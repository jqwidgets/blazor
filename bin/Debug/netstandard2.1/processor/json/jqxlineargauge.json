{
    "widget": {
        "name": "jqxLinearGauge",
        "description": "Displays a linear gauge.",
        "angular2": {
            "name": "jqxLinearGaugeComponent",
            "selector": "jqxLinearGauge"
        }
    },
    "dataTypes": [
        {
            "name": "LinearGaugeBackgroundBorderType",
            "ts_dataType": "enum",
            "enumOptions": [ "rectangle", "roundedRectangle" ]
        },
        {
            "name": "LinearGaugeEasing",
            "ts_dataType": "enum",
            "enumOptions": [ "linear", "easeOutBack", "easeInQuad", "easeInOutCirc", "easeInOutSine", "easeOutCubic" ]
        },
        {
            "name": "LinearGaugeLabelsPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "far", "near", "both" ]
        },
        {
            "name": "LinearGaugeOrientation",
            "ts_dataType": "enum",
            "enumOptions": [ "vertical", "horizontal" ]
        },
        {
            "name": "LinearGaugePointerType",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "rectangle" ]
        },
        {
            "name": "LinearGaugeRanges",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "startValue",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "StartValue",
                    "defaultValue": ""
                },
                {
                    "name": "endValue",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "EndValue",
                    "defaultValue": ""
                },
                {
                    "name": "style",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Style",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "LinearGaugeBackground",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "borderType",
                    "dataType": "object",
                    "ts_dataType": "enum:LinearGaugeBackgroundBorderType",
                    "optional": "true",
                    "displayName": "BorderType",
                    "defaultValue": ""
                },
                {
                    "name": "borderRadius",
                    "dataType": "number",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "BorderRadius",
                    "defaultValue": ""
                },
                {
                    "name": "visible",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Visible",
                    "defaultValue": ""
                },
                {
                    "name": "style",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Style",
                    "defaultValue": ""
                },
                {
                    "name": "showGradient",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "ShowGradient",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "LinearGaugeLabels",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "position",
                    "dataType": "object",
                    "ts_dataType": "enum:LinearGaugeLabelsPosition",
                    "optional": "true",
                    "displayName": "Position",
                    "defaultValue": ""
                },
                {
                    "name": "style",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Style",
                    "defaultValue": ""
                },
                {
                    "name": "interval",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Interval",
                    "defaultValue": ""
                },
                {
                    "name": "offset",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Offset",
                    "defaultValue": ""
                },
                {
                    "name": "formatValue",
                    "dataType": "Function",
                    "ts_dataType": "(value:any, position:string) => any",
                    "optional": "true",
                    "displayName": "FormatValue",
                    "defaultValue": ""
                },
                {
                    "name": "visible",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Visible",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "LinearGaugePointer",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "pointerType",
                    "dataType": "object",
                    "ts_dataType": "enum:LinearGaugePointerType",
                    "optional": "true",
                    "displayName": "PointerType",
                    "defaultValue": ""
                },
                {
                    "name": "style",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Style",
                    "defaultValue": ""
                },
                {
                    "name": "size",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Size",
                    "defaultValue": ""
                },
                {
                    "name": "offset",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Offset",
                    "defaultValue": ""
                },
                {
                    "name": "visible",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Visible",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "LinearGaugeTicks",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "size",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Size",
                    "defaultValue": ""
                },
                {
                    "name": "interval",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Interval",
                    "defaultValue": ""
                },
                {
                    "name": "visible",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Visible",
                    "defaultValue": ""
                },
                {
                    "name": "style",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Style",
                    "defaultValue": ""
                }
            ]
        }
    ],
    "exampleElementsInit": {
        "ticksMinor": "ticksMinor",
        "ticksMajor": "ticksMajor",
        "ranges": "ranges",
        "value": "60"
    },
    "exampleInit": {
        "ticksMinor": "ticksMinor",
        "ticksMajor": "ticksMajor",
        "value": "0"
    },
    "exampledInitExtraData": {
        "properties": "ticksMajor: {\n          size: '10%',\n          interval: 10\n        },\n        ticksMinor: {\n          size: '5%',\n          interval: 2.5\n        }",
        "beforeCreate": "",
        "mounted": "",
        "methods": ""
    },
    "properties": [
        {
            "name": "animationDuration",
            "defaultValue": "1000",
            "description": "<P>Sets or gets jqxLinearGauge's animation duration [ms]. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>animationDuration</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({animationDuration: 300 });</CODE></PRE>\n\r\n<P>Get the <CODE>animationDuration</CODE> property. </P>\n<PRE><CODE>var animationDuration = $('#jqxLinearGauge').jqxLinearGauge('animationDuration');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/55VYY/",
            "exampleDescription": "animationDuration is set to 3000",
            "dataType": "number",
            "exampleInit": {
                "animationDuration": "3000"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxLinearGauge ref=\"myLinearGauge\" \n  :ticksMinor=\"ticksMinor\" :ticksMajor=\"ticksMajor\" :value=\"0\" :animationDuration=\"3000\" /> \n&lt;/template> \n \n&lt;script> \n  import JqxLinearGauge from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlineargauge.vue'; \n \n  export default { \n    components: { \n      JqxLinearGauge \n    }, \n    data: function () {\n      return {\n        ticksMajor: {\n          size: '10%',\n          interval: 10\n        },\n        ticksMinor: {\n          size: '5%',\n          interval: 2.5\n        }\n      }\n    },\n    mounted: function() { \n      this.$refs.myLinearGauge.val(50);\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "background",
            "defaultValue": "{ borderRadius: 15, style: { stroke: '#cccccc', fill: 'default-gradient'}, visible: true, backgroundType: 'roundedRectangle', showGradient: true }",
            "description": "<P>Sets or gets the gauge's properties for it's background. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'borderType' - specifies the border type. Possible values are 'rectangle' and 'roundedRectangle'</CODE></PRE>\n<PRE><CODE>'borderRadius' - sets the border radius</CODE></PRE>\n<PRE><CODE>'visible' - indicates if the border will be visible</CODE></PRE>\n<PRE><CODE>'style' - sets border style (color and thickness</CODE></PRE>\n<PRE><CODE>'showGradient' - whether a gradient background will be used</CODE></PRE>\n<PRE><CODE></CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>background</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({ background: { style: { stroke: '#cccccc', fill: '#cccccc'}, visible: true, backgroundType: 'rectangle' }});</CODE></PRE>\n\r\n<P>Get the <CODE>background</CODE> property. </P>\n<PRE><CODE>var background = $('#jqxLinearGauge').jqxLinearGauge('background');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/GXLC5/",
            "exampleDescription": "background is set to { style: { stroke: '#ffaaaa',fill: '#ffaaaa' }, visible: true, backgroundType: 'rectangle' }",
            "dataType": "object",
            "ts_dataType": "LinearGaugeBackground",
            "exampleInit": {
                "background": "background",
                "exampleData": "{\n          style: {\n            stroke: '#ffaaaa',\n            fill: '#ffaaaa'\n          }\n       }"
            }
        },
        {
            "name": "colorScheme",
            "defaultValue": "'scheme01'",
            "description": "<P>Sets the gauge's color pallete. jqxLinearGauge suppports 11 color schemes from 'scheme01' to 'scheme11'. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>colorScheme</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({colorScheme: 'scheme06' });</CODE></PRE>\n\r\n<P>Get the <CODE>colorScheme</CODE> property. </P>\n<PRE><CODE>var colorScheme = $('#jqxLinearGauge').jqxLinearGauge('colorScheme');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/qWatn/",
            "exampleDescription": "colorScheme is set to 'scheme06'",
            "dataType": "string",
            "exampleInit": {
                "colorScheme": "scheme06"
            }
        },
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the jqxLinearGauge is disabled. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({disabled: true });</CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxLinearGauge').jqxLinearGauge('disabled');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/C5cfm/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "easing",
            "defaultValue": "'linear'",
            "description": "<P>Sets or gets jqxLinearGauge's animation easing. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'linear'</CODE></PRE>\n<PRE><CODE>'easeOutBack'</CODE></PRE>\n<PRE><CODE>'easeInQuad'</CODE></PRE>\n<PRE><CODE>'easeInOutCirc'</CODE></PRE>\n<PRE><CODE>'easeInOutSine'</CODE></PRE>\n<PRE><CODE>'easeOutCubic'</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>easing</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({easing: 'easeInOutSine' });</CODE></PRE>\n\r\n<P>Get the <CODE>easing</CODE> property. </P>\n<PRE><CODE>var easing = $('#jqxLinearGauge').jqxLinearGauge('easing');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/p9PCK/",
            "exampleDescription": "easing is set to 'easeInQuad'",
            "dataType": "string",
            "ts_dataType": "enum:LinearGaugeEasing",
            "exampleInit": {
                "easing": "easeInQuad"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxLinearGauge ref=\"myLinearGauge\" \n  :ticksMinor=\"ticksMinor\" :ticksMajor=\"ticksMajor\" :value=\"0\" :easing=\"'easeInQuad'\" /> \n&lt;/template> \n \n&lt;script> \n  import JqxLinearGauge from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlineargauge.vue'; \n \n  export default { \n    components: { \n      JqxLinearGauge \n    }, \n    data: function () {\n      return {\n        ticksMajor: {\n          size: '10%',\n          interval: 10\n        },\n        ticksMinor: {\n          size: '5%',\n          interval: 2.5\n        }\n      }\n    },\n    mounted: function() { \n      this.$refs.myLinearGauge.val(50);\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "height",
            "defaultValue": "300",
            "description": "<P>Sets or gets the gauge's height. This property accepts size in pixels and percentage. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({height: 400 });</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxLinearGauge').jqxLinearGauge('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/UyyTx/",
            "exampleDescription": "height is set to 300",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "height": "300"
            }
        },
        {
            "name": "int64",
            "defaultValue": "false",
            "description": "<P>Enables the jqxLinearGauge 64-bit number support. </P>\n\r\n<P><EM style=\"DISPLAY: none\" jQuery1111039755656510001835=\"8\">Note:</EM> If this property is set to true, the properties <STRONG style=\"DISPLAY: none\" jQuery1111039755656510001835=\"45\">value</STRONG>, <STRONG>min</STRONG>, <STRONG>max</STRONG>, ranges.<STRONG>startValue</STRONG>, ranges.<STRONG>endValue</STRONG>, ticksMinor.<STRONG>interval</STRONG>, ticksMajor.<STRONG>interval</STRONG> and labels.<STRONG>interval</STRONG> should be set to string values. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>int64</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({ int64: true });</CODE></PRE>\n\r\n<P>Get the <CODE>int64</CODE> property. </P>\n<PRE><CODE>var int64 = $('#jqxLinearGauge').jqxLinearGauge('int64');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/xtu8ybkc/",
            "exampleDescription": "int64 is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "int64": "true"
            }
        },
        {
            "name": "labels",
            "defaultValue": "{ position: 'both', interval: 20, offset: 0, visible: true, formatValue: function (value, position) { return value; }}",
            "description": "<P>Sets or gets the gauge's properties for it's labels. </P>\n<B>Possible Values:</B>\n<PRE><CODE>position - specifies the gauge's labels position. Possible values for this property are 'far', 'near' and 'both'. If 'near' is used labels will be visible only in the left hand side of the ticks. If the 'far' value is set ticks will be visible only in the right hand side of the ticks. Otherwise, if the 'both' value is used the labels will be shown in both sides of the ticks</CODE></PRE>\n<PRE><CODE>style - specifies the gauge's pointer style. Here you can set it's fill or stroke color</CODE></PRE>\n<PRE><CODE>interval - specifies labels's frequency</CODE></PRE>\n<PRE><CODE>offset - specifies labels's offset from the ticks</CODE></PRE>\n<PRE><CODE>formatValue - callback used for formatting the label. This function accepts two parameters. The first one is the label's value and the second one is the label's position</CODE></PRE>\n<PRE><CODE>visible - indicates whether the labels will be visible</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>labels</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({ labels: { position: 'far', interval: 20, offset: 3, visible: true }});</CODE></PRE>\n\r\n<P>Get the <CODE>labels</CODE> property. </P>\n<PRE><CODE>var labels = $('#jqxLinearGauge').jqxLinearGauge('labels');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/AehGF/",
            "exampleDescription": "labels is set to { position: 'far', interval: 20, offset: 3, visible: true }",
            "dataType": "object",
            "ts_dataType": "LinearGaugeLabels | LinearGaugeLabels[]",
            "exampleInit": {
                "labels": "labels",
                "exampleData": "{\n          position: 'far',\n          interval: 20,\n          offset: 3,\n          visible: true\n        }"
            }
        },
        {
            "name": "min",
            "defaultValue": "-60",
            "description": "<P>Sets or gets gauge's minimum value. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>min</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({min: 10 });</CODE></PRE>\n\r\n<P>Get the <CODE>min</CODE> property. </P>\n<PRE><CODE>var min = $('#jqxLinearGauge').jqxLinearGauge('min');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/u994u/",
            "exampleDescription": "min is set to 0",
            "dataType": "number",
            "exampleInit": {
                "min": "0"
            }
        },
        {
            "name": "max",
            "defaultValue": "40",
            "description": "<P>Sets or gets jqxLinearGauge's max value. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>max</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({max: 200 });</CODE></PRE>\n\r\n<P>Get the <CODE>max</CODE> property. </P>\n<PRE><CODE>var max = $('#jqxLinearGauge').jqxLinearGauge('max');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9DVTA/",
            "exampleDescription": "max is set to 70",
            "dataType": "number",
            "exampleInit": {
                "max": "70"
            }
        },
        {
            "name": "orientation",
            "defaultValue": "'vertical'",
            "description": "<P>Sets or gets jqxLineaerGauge's orientation. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'vertical'</CODE></PRE>\n<PRE><CODE>'horizontal'</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>orientation</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({orientation: 'horizontal' });</CODE></PRE>\n\r\n<P>Get the <CODE>orientation</CODE> property. </P>\n<PRE><CODE>var orientation = $('#jqxLinearGauge').jqxLinearGauge('orientation');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/JmTjY/",
            "exampleDescription": "orientation is set to 'horizontal'",
            "dataType": "string",
            "ts_dataType": "enum:LinearGaugeOrientation",
            "exampleInit": {
                "width": "300",
                "height": "100",
                "orientation": "horizontal"
            }
        },
        {
            "name": "pointer",
            "defaultValue": "{ pointerType: 'default', style: { fill: 'theme-specific-color', stroke: 'theme-specific-color' }, size: '7%', visible: true, offset: 0 }",
            "description": "<P>Sets or gets the gauge's properties for it's pointer. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'pointerType' - specifies the pointer type. Possible values for this property are  - 'default' and 'rectangle'. If it's value is 'default' the pointer will be column otherwise it'll be an arrow</CODE></PRE>\n<PRE><CODE>'style' - specifies the gauge's pointer style. Here you can set it's fill or stroke color</CODE></PRE>\n<PRE><CODE>'size' - specifies pointer's size. This property can be set in percents ('0%' - '100%') or in pixels</CODE></PRE>\n<PRE><CODE>'visible' - indicates whether the pointer will be visible</CODE></PRE>\n<PRE><CODE>'offset' - indicates the left offset of the pointer</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>pointer</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({ pointer: { pointerType: 'arrow', size: '3%', visible: true, offset: 10 }});</CODE></PRE>\n\r\n<P>Get the <CODE>pointer</CODE> property. </P>\n<PRE><CODE>var pointer = $('#jqxLinearGauge').jqxLinearGauge('pointer');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/VCk84/",
            "exampleDescription": "pointer is set to { pointerType: 'arrow', size: '5%', visible: true, offset: 10 }",
            "dataType": "object",
            "ts_dataType": "LinearGaugePointer",
            "exampleInit": {
                "pointer": "pointer",
                "exampleData": "{\n          pointerType: 'arrow',\n          size: '10%',\n          visible: true,\n          offset: 10\n        }"
            }
        },
        {
            "name": "rangesOffset",
            "defaultValue": "0",
            "description": "<P>Sets or gets ranges offset from the ticks. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>rangesOffset</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({rangesOffset: 5 });</CODE></PRE>\n\r\n<P>Get the <CODE>rangesOffset</CODE> property. </P>\n<PRE><CODE>var rangesOffset = $('#jqxLinearGauge').jqxLinearGauge('rangesOffset');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/kpsC4/",
            "exampleDescription": "rangesOffset is set to 2",
            "dataType": "number",
            "exampleInit": {
                "rangesOffset": "rangesOffset",
                "ranges": "ranges",
                "exampleData": "moreThanOnePropsExample;10;[{\n          startValue: 0,\n          endValue: 20,\n          style: {\n            fill: '#FFA200',\n            stroke: '#FFA200'\n          }\n        }, {\n          startValue: 20,\n          endValue: 45,\n          style: {\n            fill: '#FF4800',\n            stroke: '#FF4800'\n          }\n        }]"
            }
        },
        {
            "name": "rangeSize",
            "defaultValue": "'5%'",
            "description": "<P>Sets or gets the size of the ranges. This property can be set in percentage or in pixels. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>rangeSize</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({rangeSize: '15%' });</CODE></PRE>\n\r\n<P>Get the <CODE>rangeSize</CODE> property. </P>\n<PRE><CODE>var rangeSize = $('#jqxLinearGauge').jqxLinearGauge('rangeSize');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8WtkJ/",
            "exampleDescription": "rangeSize is set to '7%'",
            "dataType": "string",
            "ts_dataType": "number | string",
            "exampleInit": {
                "rangeSize": "rangeSize",
                "ranges": "ranges",
                "exampleData": "moreThanOnePropsExample;'7%';[{\n          startValue: 0,\n          endValue: 20,\n          style: {\n            fill: '#FFA200',\n            stroke: '#FFA200'\n          }\n        }, {\n          startValue: 20,\n          endValue: 45,\n          style: {\n            fill: '#FF4800',\n            stroke: '#FF4800'\n          }\n        }]"
            }
        },
        {
            "name": "ranges",
            "defaultValue": "[]",
            "description": "<P>This property is array from objects. Each object is different range. The range is colored area with specified size. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'startValue' - the value from which the range will start</CODE></PRE>\n<PRE><CODE>'endValue' - the value where the current range will end</CODE></PRE>\n<PRE><CODE>'style' - this property is object containing style information for the range. It accepts properties like 'fill', 'stroke', etc (typical for SVG/VML)</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>ticksPosition</CODE> property. </P>\n<PRE><CODE>\r\nvar ranges = [{\r\n    startValue: 0,\r\n    endValue: 35,\r\n    style: {\r\n        fill: '#dddddd',\r\n        stroke: '#dddddd'\r\n    }\r\n},\r\n{\r\n    startValue: 35,\r\n    endValue: 55,\r\n    style: {\r\n        fill: '#dddddd',\r\n        stroke: '#dddddd'\r\n    }\r\n}];\r\n$('#jqxLinearGauge').jqxLinearGauge({ ranges: ranges });\r\n</CODE></PRE>\n\r\n<P>Get the <CODE>ranges</CODE> property. </P>\n<PRE><CODE>var ranges = $('#jqxLinearGauge').jqxLinearGauge('ranges');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/7dSdW/",
            "exampleDescription": "ranges is set to a custom array",
            "dataType": "Array",
            "ts_dataType": "Array<LinearGaugeRanges>",
            "exampleInit": {
                "ranges": "ranges",
                "exampleData": "[{\n          startValue: 0,\n          endValue: 10,\n          style: {\n            fill: '#FFA200',\n            stroke: '#FFA200'\n          }\n        }, { \n          startValue: 10,\n          endValue: 40,\n          style: {\n            fill: '#FF4800',\n            stroke: '#FF4800'\n          } \n        }]"
            }
        },
        {
            "name": "showRanges",
            "defaultValue": "true",
            "description": "<P>This property indicates whether the gauge's ranges will be visible. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>showRanges</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({showRanges: false });</CODE></PRE>\n\r\n<P>Get the <CODE>showRanges</CODE> property. </P>\n<PRE><CODE>var showRanges = $('#jqxLinearGauge').jqxLinearGauge('showRanges');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/L3HbV/",
            "exampleDescription": "showRanges is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showRanges": "false"
            }
        },
        {
            "name": "scaleStyle",
            "defaultValue": "{ stroke: '#A1A1A1', 'stroke-width': 1 }",
            "description": "<P>Sets or gets the style of the line connecting all the ticks. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>scaleStyle</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({scaleStyle: { stroke: '#000000', 'stroke-width': 3 } });</CODE></PRE>\n\r\n<P>Get the <CODE>scaleStyle</CODE> property. </P>\n<PRE><CODE>var scaleStyle = $('#jqxLinearGauge').jqxLinearGauge('scaleStyle');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/kt5N5/",
            "exampleDescription": "scaleStyle is set to { stroke: '#000000', 'stroke-width': 3 }",
            "dataType": "object",
            "ts_dataType": "any",
            "exampleInit": {
                "scaleStyle": "scaleStyle",
                "exampleData": "{\n          stroke: '#000000',\n          'stroke-width': 3\n          }"
            }
        },
        {
            "name": "scaleLength",
            "defaultValue": "'90%'",
            "description": "<P>Sets or gets the length of the scale. This property could be set in percentage or in pixels. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>scaleLength</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({scaleLength: '100px' });</CODE></PRE>\n\r\n<P>Get the <CODE>scaleLength</CODE> property. </P>\n<PRE><CODE>var scaleLength = $('#jqxLinearGauge').jqxLinearGauge('scaleLength');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Gd29b/",
            "exampleDescription": "scaleLength is set to '80%'",
            "dataType": "string | number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "scaleLength": "'80%'"
            }
        },
        {
            "name": "ticksOffset",
            "defaultValue": "['36%', '5%']",
            "description": "<P>Sets or gets the offset of the ticks. The first element of the array is the left offset and the second one is the top offset. This property can be set in pixels or percentage. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>ticksOffset</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({rangeSize: [0,3] });</CODE></PRE>\n\r\n<P>Get the <CODE>ticksOffset</CODE> property. </P>\n<PRE><CODE>var ticksOffset = $('#jqxLinearGauge').jqxLinearGauge('ticksOffset');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/N3KGS/",
            "exampleDescription": "ticksOffset is set to [50,10]",
            "dataType": "Array",
            "ts_dataType": "Array<number | string>",
            "exampleInit": {
                "ticksOffset": "[50,10]"
            }
        },
        {
            "name": "ticksPosition",
            "defaultValue": "'both'",
            "description": "<P>Sets or gets jqxLineaerGauge's ticks position. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'near'-ticks will be visible only in the left side of the scale</CODE></PRE>\n<PRE><CODE>'far'-ticks will be visible only in the right side of the scale</CODE></PRE>\n<PRE><CODE>'both'-ticks will be visible in both sides</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>ticksPosition</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({ticksPosition: 'far' });</CODE></PRE>\n\r\n<P>Get the <CODE>ticksPosition</CODE> property. </P>\n<PRE><CODE>var ticksPosition = $('#jqxLinearGauge').jqxLinearGauge('ticksPosition');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vpwq6/",
            "exampleDescription": "ticksPosition is set to 'far'",
            "dataType": "string",
            "ts_dataType": "enum:LinearGaugeLabelsPosition",
            "exampleInit": {
                "ticksPosition": "'far'"
            }
        },
        {
            "name": "ticksMinor",
            "defaultValue": "{ size: '10%', interval: 5, style: { stroke: '#A1A1A1', 'stroke-width': 1 }, visible: true }",
            "description": "<P>Sets or gets the gauge's properties for it's minor ticks. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'size' - specifies the length of the tick. This property can be set in pixels or in percentage</CODE></PRE>\n<PRE><CODE>'interval' - specifies the ticks frequency. With interval equals to 5 each fifth value of the gauge will have a minor tick</CODE></PRE>\n<PRE><CODE>'visible' - indicates if the minor ticks will be visible</CODE></PRE>\n<PRE><CODE>'style' - sets ticks style (color and thickness)</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>ticksPosition</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({ ticksMinor: { size: '5%', interval: 15, style: { stroke: '#898989'}, visible: true }});</CODE></PRE>\n\r\n<P>Get the <CODE>ticksMinor</CODE> property. </P>\n<PRE><CODE>var ticksMinor = $('#jqxLinearGauge').jqxLinearGauge('ticksMinor');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/6ZU5p/",
            "exampleDescription": "ticksMinor is set to a custom object",
            "dataType": "object",
            "ts_dataType": "LinearGaugeTicks"
        },
        {
            "name": "ticksMajor",
            "defaultValue": "{ size: '10%', interval: 5, style: { stroke: '#A1A1A1', 'stroke-width': 1 }, visible: true }",
            "description": "<P>Sets or gets the gauge's properties for it's major ticks. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'size' - specifies the length of the tick. This property is measured in pixels or percentage</CODE></PRE>\n<PRE><CODE>'interval' - specifies the ticks frequency. With interval equals to 5 each fifth value of the gauge will have a major tick</CODE></PRE>\n<PRE><CODE>'visible' - indicates if the major ticks will be visible</CODE></PRE>\n<PRE><CODE>'style' - sets ticks style (color and thickness)</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>ticksMajor</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({ ticksMajor: { size: '10px', interval: 15, style: { stroke: '#898989'}, visible: true }});</CODE></PRE>\n\r\n<P>Get the <CODE>ticksMajor</CODE> property. </P>\n<PRE><CODE>var ticksMajor = $('#jqxLinearGauge').jqxLinearGauge('ticksMajor');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/w949L/",
            "exampleDescription": "ticksMajor is set to a custom object",
            "dataType": "object",
            "ts_dataType": "LinearGaugeTicks"
        },
        {
            "name": "value",
            "defaultValue": "-50",
            "description": "<P>Sets or gets gauge's value. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>value</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({value: 15 });</CODE></PRE>\n\r\n<P>Get the <CODE>value</CODE> property. </P>\n<PRE><CODE>var value = $('#jqxLinearGauge').jqxLinearGauge('value');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ZKYyw/",
            "exampleDescription": "value is set to 50",
            "dataType": "number"
        },
        {
            "name": "width",
            "defaultValue": "100",
            "description": "<P>Sets or gets the gauge's width. This property accepts size in pixels and percentage. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$('#jqxLinearGauge').jqxLinearGauge({width: 400 });</CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxLinearGauge').jqxLinearGauge('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/STcPu/",
            "exampleDescription": "width is set to 100",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "width": "100"
            }
        }
    ],
    "events": [
        {
            "name": "valueChanging",
            "description": "<P>The event is raised when the gauge's value is changing. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>valueChanging</CODE> event by type: jqxLinearGauge. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/rCTcm/",
            "exampleDescription": "Bind to the valueChanging event by type: jqxLinearGauge.",
            "example": "<PRE><CODE>\r\n    $('#jqxLinearGauge').bind('valueChanging', function (e) {\r\n        alert('Value changed: ' + e.args.value);\r\n    });\r\n    $('#jqxLinearGauge').jqxLinearGauge('value', 220);\r\n</CODE>\r\n</PRE>",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxLinearGauge ref=\"myLinearGauge\" @valueChanging=\"onValueChanging($event)\"\n            :ticksMinor=\"ticksMinor\" :ticksMajor=\"ticksMajor\" :value=\"0\" />\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"80\" @click=\"changeValue()\">Change value&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxLinearGauge from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlineargauge.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxLinearGauge,\n      JqxButton\n    },\n    data: function () {\n      return {\n        ticksMajor: {\n          size: '10%',\n          interval: 10\n        },\n        ticksMinor: {\n          size: '5%',\n          interval: 2.5\n        }\n      }\n    },\n    methods: {\n      changeValue: function () {\n        this.$refs.myLinearGauge.val(5);\n      },\n      onValueChanging: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "valueChanged",
            "description": "<P>The event is raised when the gauge's value is changed. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>valueChanged</CODE> event by type: jqxLinearGauge. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/uqsGp/",
            "exampleDescription": "Bind to the valueChanged event by type: jqxLinearGauge.",
            "example": "<PRE><CODE>\r\n    $('#jqxLinearGauge').bind('valueChanged', function (e) {\r\n        alert('Value changed: ' + e.args.value);\r\n    });\r\n    $('#jqxLinearGauge').jqxLinearGauge('value', 220);\r\n</CODE>\r\n</PRE>",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxLinearGauge ref=\"myLinearGauge\" @valueChanged=\"onValueChanged($event)\"\n            :ticksMinor=\"ticksMinor\" :ticksMajor=\"ticksMajor\" :value=\"0\" />\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"80\" @click=\"changeValue()\">Change value&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxLinearGauge from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlineargauge.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxLinearGauge,\n      JqxButton\n    },\n    data: function () {\n      return {\n        ticksMajor: {\n          size: '10%',\n          interval: 10\n        },\n        ticksMinor: {\n          size: '5%',\n          interval: 2.5\n        }\n      }\n    },\n    methods: {\n      changeValue: function () {\n        this.$refs.myLinearGauge.val(30);\n      },\n      onValueChanged: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n&lt;/script>"
            }
        }
    ],
    "methods": [
        {
            "name": "disable",
            "description": "<P>This method disables the gauge. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dLYv6/",
            "exampleDescription": "disables the jqxLinearGauge.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "enable",
            "description": "<P>This method enables the gauge. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Ynucu/",
            "exampleDescription": "enables the jqxLinearGauge.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "val",
            "description": "<P>Sets or gets the value. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/avNXG/",
            "exampleDescription": "sets new value of the jqxLinearGauge.",
            "returnDataType": "number",
            "arguments": [
                {
                    "name": "value",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": true
                }
            ]
        }
    ]
}