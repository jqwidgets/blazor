{
  "widget": {
    "name": "jqxKnob",
    "description": "Displays a graph with round shape which displays a draggable indicator within a range of values. Knob can be used in a table or matrix to show the relative value of a field in a range of values in the data region, for example, as a KPI. It supports HTML5, SVG and VML rendering. ",
    "angular2": {
      "name": "jqxKnobComponent",
      "selector": "jqxKnob"
    }
  },
  "dataTypes": [
    {
      "name": "KnobPointerGrabAction",
      "ts_dataType": "enum",
      "enumOptions": [ "normal", "progressBar", "pointer" ]
    },
    {
      "name": "KnobRotation",
      "ts_dataType": "enum",
      "enumOptions": [ "clockwise", "counterclockwise" ]
    },
    {
      "name": "KnobChanging",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "oldValue",
          "dataType": "number",
          "optional": "true",
          "displayName": "OldValue",
          "defaultValue": ""
        },
        {
          "name": "newValue",
          "dataType": "number",
          "optional": "true",
          "displayName": "NewValue",
          "defaultValue": ""
        }
      ]
    },
    {
      "name": "KnobLabelsFormatFunction",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "formatFunction",
          "dataType": "string",
          "ts_dataType": "(label: string | number) => string | number",
          "optional": "true",
          "displayName": "FormatFunction",
          "defaultValue": ""
        }
      ]
    },
    {
      "name": "KnobMarks",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "colorProgress",
          "dataType": "string",
          "ts_dataType": "any",
          "optional": "true",
          "displayName": "ColorProgress",
          "defaultValue": ""
        },
        {
          "name": "colorRemaining",
          "dataType": "string",
          "ts_dataType": "any",
          "optional": "true",
          "displayName": "ColorRemaining",
          "defaultValue": ""
        },
        {
          "name": "drawAboveProgressBar",
          "dataType": "boolean",
          "optional": "true",
          "displayName": "DrawAboveProgressBar",
          "defaultValue": ""
        },
        {
          "name": "minorInterval",
          "dataType": "number",
          "optional": "true",
          "displayName": "MinorInterval",
          "defaultValue": ""
        },
        {
          "name": "majorInterval",
          "dataType": "number",
          "optional": "true",
          "displayName": "MajorInterval",
          "defaultValue": ""
        },
        {
          "name": "majorSize",
          "dataType": "number",
          "ts_dataType": "number | string",
          "optional": "true",
          "displayName": "MajorSize",
          "defaultValue": ""
        },
        {
          "name": "offset",
          "dataType": "string",
          "optional": "true",
          "displayName": "Offset",
          "defaultValue": ""
        },
        {
          "name": "rotate",
          "dataType": "boolean",
          "optional": "true",
          "displayName": "Rotate",
          "defaultValue": ""
        },
        {
          "name": "size",
          "dataType": "string",
          "ts_dataType": "number | string",
          "optional": "true",
          "displayName": "Size",
          "defaultValue": ""
        },
        {
          "name": "type",
          "dataType": "string",
          "optional": "true",
          "displayName": "Type",
          "defaultValue": ""
        },
        {
          "name": "thickness",
          "dataType": "number",
          "optional": "true",
          "displayName": "Thickness",
          "defaultValue": ""
        },
        {
          "name": "visible",
          "dataType": "boolean",
          "optional": "true",
          "displayName": "Visible",
          "defaultValue": ""
        }
      ]
    },
    {
      "name": "KnobDial",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "innerRadius",
          "dataType": "number",
          "ts_dataType": "any",
          "optional": "true",
          "displayName": "InnerRadius",
          "defaultValue": ""
        },
        {
          "name": "outerRadius",
          "dataType": "number",
          "ts_dataType": "any",
          "optional": "true",
          "displayName": "OuterRadius",
          "defaultValue": ""
        },
        {
          "name": "style",
          "dataType": "object",
          "ts_dataType": "any",
          "optional": "true",
          "displayName": "Style",
          "defaultValue": ""
        },
        {
          "name": "startAngle",
          "dataType": "number",
          "optional": "true",
          "displayName": "StartAngle",
          "defaultValue": ""
        },
        {
          "name": "endAngle",
          "dataType": "number",
          "optional": "true",
          "displayName": "EndAngle",
          "defaultValue": ""
        }
      ]
    },
    {
      "name": "KnobLabels",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "rotate",
          "dataType": "object",
          "ts_dataType": "any",
          "optional": "true",
          "displayName": "Rotate",
          "defaultValue": ""
        },
        {
          "name": "offset",
          "dataType": "number",
          "ts_dataType": "number | string",
          "optional": "true",
          "displayName": "Offset",
          "defaultValue": ""
        },
        {
          "name": "visible",
          "dataType": "boolean",
          "optional": "true",
          "displayName": "Visible",
          "defaultValue": ""
        },
        {
          "name": "step",
          "dataType": "number",
          "optional": "true",
          "displayName": "Step",
          "defaultValue": ""
        },
        {
          "name": "style",
          "dataType": "object",
          "ts_dataType": "any",
          "optional": "true",
          "displayName": "Style",
          "defaultValue": ""
        },
        {
          "name": "formatFunction",
          "dataType": "Function",
          "ts_dataType": "KnobLabelsFormatFunction['formatFunction']",
          "optional": "true",
          "displayName": "FormatFunction",
          "defaultValue": ""
        }
      ]
    },
    {
      "name": "KnobProgressBar",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "offset",
          "dataType": "number",
          "ts_dataType": "number | string",
          "optional": "true",
          "displayName": "Offset",
          "defaultValue": ""
        },
        {
          "name": "style",
          "dataType": "object",
          "ts_dataType": "any",
          "optional": "true",
          "displayName": "Style",
          "defaultValue": ""
        },
        {
          "name": "size",
          "dataType": "number",
          "ts_dataType": "number | string",
          "optional": "true",
          "displayName": "Size",
          "defaultValue": ""
        },
        {
          "name": "background",
          "dataType": "object",
          "ts_dataType": "any",
          "optional": "true",
          "displayName": "Background",
          "defaultValue": ""
        },
        {
          "name": "ranges",
          "dataType": "Array",
          "ts_dataType": "Array<any>",
          "optional": "true",
          "displayName": "Ranges",
          "defaultValue": ""
        }
      ]
    },
    {
      "name": "KnobPointer",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "offset",
          "dataType": "number",
          "ts_dataType": "number | string",
          "optional": "true",
          "displayName": "Offset",
          "defaultValue": ""
        },
        {
          "name": "type",
          "dataType": "string",
          "optional": "true",
          "displayName": "Type",
          "defaultValue": ""
        },
        {
          "name": "style",
          "dataType": "object",
          "ts_dataType": "any",
          "optional": "true",
          "displayName": "Style",
          "defaultValue": ""
        },
        {
          "name": "size",
          "dataType": "number",
          "ts_dataType": "number | string",
          "optional": "true",
          "displayName": "Size",
          "defaultValue": ""
        },
        {
          "name": "thickness",
          "dataType": "number",
          "optional": "true",
          "displayName": "Thickness",
          "defaultValue": ""
        },
        {
          "name": "visible",
          "dataType": "boolean",
          "optional": "true",
          "displayName": "Visible",
          "defaultValue": ""
        }
      ]
    },
    {
      "name": "KnobSpinner",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "innerRadius",
          "dataType": "number",
          "ts_dataType": "any",
          "optional": "true",
          "displayName": "InnerRadius",
          "defaultValue": ""
        },
        {
          "name": "outerRadius",
          "dataType": "number",
          "ts_dataType": "any",
          "optional": "true",
          "displayName": "OuterRadius",
          "defaultValue": ""
        },
        {
          "name": "style",
          "dataType": "object",
          "ts_dataType": "any",
          "optional": "true",
          "displayName": "Style",
          "defaultValue": ""
        },
        {
          "name": "marks",
          "dataType": "object",
          "ts_dataType": "KnobMarks",
          "optional": "true",
          "displayName": "Marks",
          "defaultValue": ""
        }
      ]
    },
    {
      "name": "KnobStyle",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "fill",
          "dataType": "string or object",
          "ts_dataType": "any",
          "optional": "true",
          "displayName": "Fill",
          "defaultValue": ""
        },
        {
          "name": "stroke",
          "dataType": "string",
          "optional": "true",
          "displayName": "Stroke",
          "defaultValue": ""
        },
        {
          "name": "strokeWidth",
          "dataType": "number",
          "optional": "true",
          "displayName": "StrokeWidth",
          "defaultValue": ""
        }
      ]
    }
  ],
  "exampleElementsInit": {
    "value": 60,
    "min": 0,
    "max": 100,
    "startAngle": 120,
    "endAngle": 480,
    "snapToStep": true,
    "rotation": "clockwise",
    "pointer": "pointer",
    "progressBar": "progressBar",
    "marks": "marks",
    "labels": "labels"
  },
  "exampleInit": {
    "value": 60,
    "min": 0,
    "max": 100,
    "startAngle": 120,
    "endAngle": 420,
    "snapToStep": true,
    "rotation": "clockwise",
    "pointer": "pointer",
    "progressBar": "progressBar",
    "marks": "marks",
    "labels": "labels"
  },
  "exampledInitExtraData": {
    "properties": "styles: {\n          stroke: '#dfe3e9', strokeWidth: 3,\n          fill: {\n            color: '#fefefe', gradientType: \"linear\",\n            gradientStops: [[0, 1], [50, 0.9], [100, 1]]\n          }\n        },\n        marks: {\n          colorRemaining: { color: 'grey', border: 'grey' },\n          colorProgress: { color: '#00a4e1', border: '#00a4e1' },\n          type: 'line',\n          offset: '71%',\n          thickness: 3,\n          size: '6%',\n          majorSize: '9%',\n          majorInterval: 10, \n          minorInterval: 2\n        },\n        labels: {\n          offset: '88%',\n          step: 10,\n          visible: true\n        },\n        progressBar: {\n          style: { fill: '#00a4e1', stroke: 'grey' },\n          size: '9%',\n          offset: '60%',\n          background: { fill: 'grey', stroke: 'grey' }\n        },\n        pointer: {\n          type: 'circle',\n          style: { fill: { color: '#a4a3a3', gradientType: \"linear\", gradientStops: [[0, 0.5], [50, 0.6], [100, 1]] }, stroke: '#333' },\n          size: '10%', \n          offset: '50%'\n        }",
    "beforeCreate": "",
    "mounted": "this.$refs.myKnob.styles = this.styles;",
    "methods": ""
  },
  "exampleCSS": "text.jqx-knob-label {\n     font-size: 20px;\n  }\n",
  "properties": [
    {
      "name": "allowValueChangeOnClick",
      "defaultValue": "true",
      "description": "<P>Sets or gets whether the jqxKnob's value can be changed on click. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>allowValueChangeOnClick</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({allowValueChangeOnClick: false });</CODE></PRE>\n\r\n<P>Get the <CODE>allowValueChangeOnClick</CODE> property. </P>\n<PRE><CODE>var allowValueChangeOnClick = $('#jqxKnob').jqxKnob('allowValueChangeOnClick');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-allowvaluechangeonclick-property",
      "exampleDescription": "allowValueChangeOnClick is set to false",
      "dataType": "boolean",
      "exampleInit": {
        "allowValueChangeOnClick": "false",
        "allowValueChangeOnDrag": "false"
      }
    },
    {
      "name": "allowValueChangeOnDrag",
      "defaultValue": "true",
      "description": "<P>Sets or gets whether the jqxKnob's value can be changed by dragging the pointer. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>allowValueChangeOnDrag</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({allowValueChangeOnDrag: false });</CODE></PRE>\n\r\n<P>Get the <CODE>allowValueChangeOnDrag</CODE> property. </P>\n<PRE><CODE>var allowValueChangeOnDrag = $('#jqxKnob').jqxKnob('allowValueChangeOnDrag');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-allowvaluechangeonclick-property",
      "exampleDescription": "allowValueChangeOnDrag is set to false",
      "dataType": "boolean",
      "exampleInit": {
        "allowValueChangeOnClick": "false",
        "allowValueChangeOnDrag": "true"
      }
    },
    {
      "name": "allowValueChangeOnMouseWheel",
      "defaultValue": "true",
      "description": "<P>Sets or gets whether the jqxKnob's value can be changed on mouse wheel. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>allowValueChangeOnMouseWheel</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({allowValueChangeOnMouseWheel: false });</CODE></PRE>\n\r\n<P>Get the <CODE>allowValueChangeOnMouseWheel</CODE> property. </P>\n<PRE><CODE>var allowValueChangeOnMouseWheel = $('#jqxKnob').jqxKnob('allowValueChangeOnMouseWheel');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-allowvaluechangeonclick-property",
      "exampleDescription": "allowValueChangeOnMouseWheel is set to false",
      "dataType": "boolean",
      "allowValueChangeOnMouseWheel": {
        "columnRenderer": "true"
      },
      "exampleInit": {
        "allowValueChangeOnMouseWheel": "false"
      }
    },
    {
      "name": "changing",
      "defaultValue": "null",
      "description": "<P>Sets or gets a function called when the user drags the pointer. The function is called before the pointer is moved and the passed arguments are 2 - oldValue and newValue. If the function returns false, the value will not be changed. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>changing</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({changing: function(oldValue, newValue){} });</CODE></PRE>\n\r\n<P>Get the <CODE>changing</CODE> property. </P>\n<PRE><CODE>var changing = $('#jqxKnob').jqxKnob('changing');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-changing-property",
      "exampleDescription": "changing is set to function",
      "dataType": "Function",
      "ts_dataType": "(oldValue: KnobChanging['oldValue'] | KnobChanging['oldValue'][], newValue: KnobChanging['newValue'] | KnobChanging['newValue'][]) => boolean",
      "exampleInit": {
        "changing": "changing",
        "exampleData": "alert('changing');"
      }
    },
    {
      "name": "dragEndAngle",
      "defaultValue": "0",
      "description": "<P>Sets or gets the Knob's angle where dragging the pointer will end. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>dragEndAngle</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({dragEndAngle: 420 });</CODE></PRE>\n\r\n<P>Get the <CODE>dragEndAngle</CODE> property. </P>\n<PRE><CODE>var dragEndAngle = $('#jqxKnob').jqxKnob('dragEndAngle');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-dragstartangle-and-dragendangle-property",
      "exampleDescription": "dragEndAngle is set to 420",
      "dataType": "number",
      "exampleInit": {
        "dragEndAngle": "420"
      }
    },
    {
      "name": "dragStartAngle",
      "defaultValue": "360",
      "description": "<P>Sets or gets the Knob's degrees where dragging the pointer can start. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>dragStartAngle</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({dragStartAngle: 120 });</CODE></PRE>\n\r\n<P>Get the <CODE>dragStartAngle</CODE> property. </P>\n<PRE><CODE>var dragStartAngle = $('#jqxKnob').jqxKnob('dragStartAngle');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-dragstartangle-and-dragendangle-property",
      "exampleDescription": "dragStartAngle is set to 120",
      "dataType": "number",
      "exampleInit": {
        "dragStartAngle": "120"
      }
    },
    {
      "name": "disabled",
      "defaultValue": "false",
      "description": "<P>Sets or gets whether the Knob is disabled. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({disabled: true });</CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxKnob').jqxKnob('disabled');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-disabled-state",
      "exampleDescription": "disabled is set to true",
      "dataType": "boolean",
      "exampleInit": {
        "disabled": "true"
      }
    },
    {
      "name": "dial",
      "defaultValue": "null",
      "description": "<P>Sets or gets the Knob's dial. \n\r\n<UL><LI>innerRadius - specifies the inner Radius of the dial. \r\n<LI>outerRadius - specifies the outer Radius of the dial. \r\n<LI>style - specifies the style of the dial. style.fill - fill color(hex string) or object(object.color(hex color), object.gradientType(linear, linearHorizontal or radial), gradientStops(Array like [[0, 1], [50, 0.5], [100, 1]]), style.stroke - border color(hex string), style.strokeWidth - border width. \r\n<LI>startAngle - dial's start angle(optional). \r\n<LI>endAngle - dial's end angle(optional). </LI></UL>\n\r\n<P></P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>dial</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({dial: 360 });</CODE></PRE>\n\r\n<P>Get the <CODE>dial</CODE> property. </P>\n<PRE><CODE>var dial = $('#jqxKnob').jqxKnob('dial');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-dial-property",
      "exampleDescription": "dial is set to custom object",
      "dataType": "object",
      "ts_dataType": "KnobDial",
      "exampleInit": {
        "dial": "dial",
        "exampleData": "{\n          innerRadius: '0%', /*specifies the inner Radius of the dial*/\n          outerRadius: '65%', /*specifies the outer Radius of the dial*/\n          style: {\n            stroke: '#ff0000', strokeWidth: 1, fill: { color: '#66707e', gradientType: \"linear\", gradientStops: [[0, 1], [50, 0.4], [100, 1]] }\n          }\n        }"
      }
    },
    {
      "name": "endAngle",
      "defaultValue": "360",
      "description": "<P>Sets or gets the Knob's degrees offset for the 360 location. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>endAngle</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({endAngle: 360 });</CODE></PRE>\n\r\n<P>Get the <CODE>endAngle</CODE> property. </P>\n<PRE><CODE>var endAngle = $('#jqxKnob').jqxKnob('endAngle');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-dragstartangle-and-dragendangle-property",
      "exampleDescription": "endAngle is set to 420",
      "dataType": "number"
    },
    {
      "name": "height",
      "defaultValue": "400",
      "description": "<P>Sets or gets the Knob's height. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({height: 360 });</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxKnob').jqxKnob('height');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-width-and-height-properties",
      "exampleDescription": "height is set to 400",
      "dataType": "number",
      "ts_dataType": "number | string",
      "exampleInit": {
        "height": "400"
      }
    },
    {
      "name": "labels",
      "defaultValue": "null",
      "description": "<P>Sets or gets the Knob's labels. \n\r\n<UL><LI>rotate - specifies if labels should be vertical or rotated with the appropriate angle. \r\n<LI>offset - specifies the labels offset. \r\n<LI>visible - determines the labels visibility. \r\n<LI>step - sets the labels step. \r\n<LI>formatFunction - function which can be used to format the labels. <BR>Example: <PRE><CODE>\r\nformatFunction: function (label) {\r\n    if (label == 0)\r\n        return \"Min\";\r\n    if (label == 100)\r\n        return \"Max\";\r\n    return label;\r\n}\r\n                                     </CODE></PRE>\r\n<LI>style - specifies the style of the labels. style.fill - fill color(hex string) or object(object.color(hex color), object.gradientType(linear, linearHorizontal or radial), gradientStops(Array like [[0, 1], [50, 0.5], [100, 1]]), style.stroke - border color(hex string), style.strokeWidth - border width. </LI></UL>\n\r\n<P></P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>labels</CODE> property. </P>\n<PRE><CODE>\r\n$('#jqxKnob').jqxKnob({labels: {\r\n    offset: '88%',\r\n    step: 5,\r\n    visible: true,\r\n    formatFunction: function (label) {\r\n        if (label == 0)\r\n            return \"Min\";\r\n        if (label == 100)\r\n            return \"Max\";\r\n        return label;\r\n    }\r\n});\r\n                     </CODE></PRE>\n\r\n<P>Get the <CODE>labels</CODE> property. </P>\n<PRE><CODE>var labels = $('#jqxKnob').jqxKnob('labels');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-dial-property",
      "exampleDescription": "labels is set to custom object",
      "dataType": "object",
      "ts_dataType": "KnobLabels"
    },
    {
      "name": "marks",
      "defaultValue": "null",
      "description": "<P>Sets or gets the Knob's marks. \n\r\n<UL><LI>colorProgress - hex color string. \r\n<LI>colorRemaining - hex color string. \r\n<LI>drawAboveProgressBar - draws the marks with z-index higher than the progress bar. \r\n<LI>minorInterval - minor ticks interval. \r\n<LI>majorInterval - major ticks interval. \r\n<LI>majorSize - major tick's size. Specifies radius in case of circular lines, or length in case of lines. \r\n<LI>offset - specifies the labels offset. \r\n<LI>size - specifies radius in case of circular lines, or length in case of lines. \r\n<LI>type - \"circle\" or \"line\". \r\n<LI>thickness - specifies thickness in case of lines. \r\n<LI>visible - determines the labels visibility. </LI></UL>\n\r\n<P></P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>marks</CODE> property. </P>\n<PRE><CODE>\r\n$('#jqxKnob').jqxKnob({marks: \r\n{\r\n    colorRemaining: { color: 'grey', border: 'grey' },\r\n    colorProgress: { color: '#a2da39', border: '#a2da39' },\r\n    type: 'line',\r\n    offset: '71%',\r\n    thickness: 3,\r\n    size: '6%',\r\n    majorSize: '9%',\r\n    majorInterval: 10,\r\n    minorInterval: 2\r\n});</CODE></PRE>\n\r\n<P>Get the <CODE>marks</CODE> property. </P>\n<PRE><CODE>var marks = $('#jqxKnob').jqxKnob('marks');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-dial-property",
      "exampleDescription": "marks is set to custom object",
      "dataType": "object",
      "ts_dataType": "KnobMarks"
    },
    {
      "name": "min",
      "defaultValue": "0",
      "description": "<P>Sets or gets the Knob's min property. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>min</CODE> property. </P>\n<PRE><CODE>\r\n$('#jqxKnob').jqxKnob({min: 0});</CODE></PRE>\n\r\n<P>Get the <CODE>min</CODE> property. </P>\n<PRE><CODE>var min = $('#jqxKnob').jqxKnob('min');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-dial-property",
      "exampleDescription": "min is set to 0",
      "dataType": "number"
    },
    {
      "name": "max",
      "defaultValue": "100",
      "description": "<P>Sets or gets the Knob's max property. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>max</CODE> property. </P>\n<PRE><CODE>\r\n$('#jqxKnob').jqxKnob({max: 100});</CODE></PRE>\n\r\n<P>Get the <CODE>max</CODE> property. </P>\n<PRE><CODE>var max = $('#jqxKnob').jqxKnob('max');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-dial-property",
      "exampleDescription": "max is set to 100",
      "dataType": "number"
    },
    {
      "name": "progressBar",
      "defaultValue": "null",
      "description": "<P>Sets or gets the Knob's progressBar property. \n\r\n<UL><LI>offset - specifies the progress bar's offset. \r\n<LI>style - specifies the style of the progressBar. style.fill - fill color(hex string) or object(object.color(hex color), object.gradientType(linear, linearHorizontal or radial), gradientStops(Array like [[0, 1], [50, 0.5], [100, 1]]), style.stroke - border color(hex string), style.strokeWidth - border width, style.opacity - opacity values from 0 to 1 \r\n<LI>background - specifies the background style of the progressBar. background.fill - fill color(hex string) or object(object.color(hex color), object.gradientType(linear, linearHorizontal or radial), gradientStops(Array like [[0, 1], [50, 0.5], [100, 1]]), style.stroke - border color(hex string), background.strokeWidth - border width, background.opacity - opacity values from 0 to 1 \r\n<LI>size - specifies the progress bar's size. \r\n<LI>ranges - array which specify the progress bar's ranges. object.startValue - range start value. range.endValue - range end value. style.fill - fill color(hex string) or object(object.color(hex color), object.gradientType(linear, linearHorizontal or radial), gradientStops(Array like [[0, 1], [50, 0.5], [100, 1]]), object.stroke - border color(hex string), object.strokeWidth - border width, object.opacity - opacity values from 0 to 1 </LI></UL>\n\r\n<P></P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>progressBar</CODE> property. </P>\n<PRE><CODE>\r\n$('#jqxKnob').jqxKnob({\r\n  progressBar: {\r\n    style: { fill: '#a2da39', stroke: 'grey' },\r\n    size: '9%',\r\n    offset: '60%',\r\n    background: { fill: 'grey', stroke: 'grey' }\r\n  }\r\n});\r\n\r\n</CODE></PRE>\n\r\n<P>Get the <CODE>progressBar</CODE> property. </P>\n<PRE><CODE>var progressBar = $('#jqxKnob').jqxKnob('progressBar');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-dial-property",
      "exampleDescription": "progressBar is set to custom object",
      "dataType": "object",
      "ts_dataType": "KnobProgressBar"
    },
    {
      "name": "pointer",
      "defaultValue": "null",
      "description": "<P>Sets or gets the Knob's pointer property. \n\r\n<UL><LI>type - specifies the pointer's type - \"circle\", \"line\", \"arrow\". \r\n<LI>style - specifies the style of the pointer. style.fill - fill color(hex string) or object(object.color(hex color), object.gradientType(linear, linearHorizontal or radial), gradientStops(Array like [[0, 1], [50, 0.5], [100, 1]]), style.stroke - border color(hex string), style.strokeWidth - border width. \r\n<LI>size - specifies the pointer's size. \r\n<LI>thickness - specifies the pointer's thickness. \r\n<LI>visible - specifies whether the pointer is visible. </LI></UL>\n\r\n<P></P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>pointer</CODE> property. </P>\n<PRE><CODE>\r\n$('#jqxKnob').jqxKnob({pointer:\r\n  { type: 'arrow', style: { fill: '#a2da39', stroke: 'grey' }, size: '59%', offset: '49%', thickness: 20 }}\r\n);\r\n\r\n</CODE></PRE>\n\r\n<P>Get the <CODE>pointer</CODE> property. </P>\n<PRE><CODE>var pointer = $('#jqxKnob').jqxKnob('pointer');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-dial-property",
      "exampleDescription": "pointer is set to custom object",
      "dataType": "Array | Object",
      "ts_dataType": "KnobPointer | KnobPointer[]"
    },
    {
      "name": "pointerGrabAction",
      "defaultValue": "\"normal\"",
      "description": "<P>Sets or gets the Knob's pointerGrabAction property(\"normal\", \"progressBar\", \"pointer\"). </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>pointerGrabAction</CODE> property. </P>\n<PRE><CODE>\r\n$('#jqxKnob').jqxKnob(\r\n  {pointerGrabAction: \"pointer\"}\r\n);\r\n\r\n</CODE></PRE>\n\r\n<P>Get the <CODE>pointerGrabAction</CODE> property. </P>\n<PRE><CODE>var pointerGrabAction = $('#jqxKnob').jqxKnob('pointerGrabAction');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-dial-property",
      "exampleDescription": "pointerGrabAction is set to \"pointer\"",
      "dataType": "string",
      "ts_dataType": "enum:KnobPointerGrabAction",
      "exampleInit": {
        "pointerGrabAction": "pointer"
      }
    },
    {
      "name": "rotation",
      "defaultValue": "\"clockwise\"",
      "description": "<P>Sets or gets the Knob's rotation(\"clockwise\" or \"counterclockwise\"). </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>rotation</CODE> property. </P>\n<PRE><CODE>\r\n$('#jqxKnob').jqxKnob(\r\n  {rotation: \"counterclockwise\"}\r\n);\r\n\r\n</CODE></PRE>\n\r\n<P>Get the <CODE>rotation</CODE> property. </P>\n<PRE><CODE>var rotation = $('#jqxKnob').jqxKnob('rotation');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-rotation-property",
      "exampleDescription": "rotation is set to \"counterclockwise\"",
      "dataType": "string",
      "ts_dataType": "enum:KnobRotation",
      "exampleInit": {
        "rotation": "counterclockwise"
      }
    },
    {
      "name": "startAngle",
      "defaultValue": "0",
      "description": "<P>Sets or gets the Knob's degrees offset for the 0 location. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>startAngle</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({startAngle: 120 });</CODE></PRE>\n\r\n<P>Get the <CODE>startAngle</CODE> property. </P>\n<PRE><CODE>var startAngle = $('#jqxKnob').jqxKnob('startAngle');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-dragstartangle-and-dragendangle-property",
      "exampleDescription": "startAngle is set to 120",
      "dataType": "number"
    },
    {
      "name": "spinner",
      "defaultValue": "null",
      "description": "<P>Sets or gets Knob's spinner. \n\r\n<UL><LI>innerRadius - specifies the inner Radius of the spinner. \r\n<LI>outerRadius - specifies the outer Radius of the spinner. \r\n<LI>style - specifies the style of the spinner. style.fill - fill color(hex string) or object(object.color(hex color), object.gradientType(linear, linearHorizontal or radial), gradientStops(Array like [[0, 1], [50, 0.5], [100, 1]]), style.stroke - border color(hex string), style.strokeWidth - border width. \r\n<LI>marks - \r\n<UL>\r\n<LI>rotate - sets whether spinner marks rotate with pointer. \r\n<LI>colorProgress - hex color string. \r\n<LI>colorRemaining - hex color string. \r\n<LI>drawAboveProgressBar - draws the marks with z-index higher than the progress bar. \r\n<LI>minorInterval - minor ticks interval. \r\n<LI>majorInterval - major ticks interval. \r\n<LI>majorSize - major tick's size. Specifies radius in case of circular lines, or length in case of lines. \r\n<LI>offset - specifies the labels offset. \r\n<LI>size - specifies radius in case of circular lines, or length in case of lines. \r\n<LI>type - \"circle\" or \"line\". \r\n<LI>thickness - specifies thickness in case of lines. \r\n<LI>visible - determines the labels visibility. </LI></UL></LI></UL>\n\r\n<P></P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>spinner</CODE> property. </P>\n<PRE><CODE>\r\n$('#jqxKnob').jqxKnob({spinner:\r\n{\r\n    style: { fill: { color: '#00a4e1', gradientType: \"linear\", gradientStops: [[0, 1], [50, 0.9], [100, 1]] }, stroke: '#00a4e1' },\r\n    innerRadius: '45%', // specifies the inner Radius of the dial\r\n    outerRadius: '60%', // specifies the outer Radius of the dial\r\n    marks: {\r\n        colorRemaining: '#fff',\r\n        colorProgress: '#fff',\r\n        type: 'line',\r\n        offset: '46%',\r\n        thickness: 2,\r\n        size: '14%',\r\n        majorSize: '14%',\r\n        majorInterval: 10,\r\n        minorInterval: 10\r\n    }\r\n                \r\n});</CODE></PRE>\n\r\n<P>Get the <CODE>spinner</CODE> property. </P>\n<PRE><CODE>var spinner = $('#jqxKnob').jqxKnob('spinner');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-spinner-property",
      "exampleDescription": "spinner is set to custom object",
      "dataType": "object",
      "ts_dataType": "KnobSpinner",
      "exampleInit": {
        "spinner": "spinner",
        "exampleData": "{\n          style: { fill: { color: '#a2da39', gradientType: \"linear\", gradientStops: [[0, 1], [50, 0.9], [100, 1]] }, stroke: '#00a4e1' },\n          innerRadius: '45%', /*specifies the inner Radius of the dial*/\n          outerRadius: '60%', /*specifies the outer Radius of the dial*/\n          marks: {\n            colorRemaining: '#fff',\n            colorProgress: '#fff',\n            type: 'line',\n            offset: '46%',\n            thickness: 2,\n            size: '14%',\n            majorSize: '14%',\n            majorInterval: 10,\n            minorInterval: 10\n          },\n        }"
      }
    },
    {
      "name": "styles",
      "defaultValue": "null",
      "description": "<P>Sets or gets the Knob's background style. \n\r\n<UL><LI>fill - fill color(hex string) or object(object.color(hex color), object.gradientType(linear, linearHorizontal or radial), gradientStops(Array like [[0, 1], [50, 0.5], [100, 1]]) \r\n<LI>stroke - border color(hex string). \r\n<LI>strokeWidth - border width. </LI></UL>\n\r\n<P></P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>style</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({style: { stroke: '#dfe3e9', strokeWidth: 3, fill: { color: '#fefefe', gradientType: \"linear\", gradientStops: [[0, 1], [50, 0.9], [100, 1]] } } });</CODE></PRE>\n\r\n<P>Get the <CODE>style</CODE> property. </P>\n<PRE><CODE>var style = $('#jqxKnob').jqxKnob('style');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-dragstartangle-and-dragendangle-property",
      "exampleDescription": "styles is set to custom object",
      "dataType": "object",
      "ts_dataType": "KnobStyle"
    },
    {
      "name": "step",
      "defaultValue": "1",
      "description": "<P>Sets or gets the Knob's step property. Specifies the increase/decrease step. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>step</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({step: 2});</CODE></PRE>\n\r\n<P>Get the <CODE>step</CODE> property. </P>\n<PRE><CODE>var step = $('#jqxKnob').jqxKnob('step');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-step-property",
      "exampleDescription": "step is set to 10",
      "dataType": "Number | String",
      "ts_dataType": "number | string",
      "exampleInit": {
        "step": "10"
      }
    },
    {
      "name": "snapToStep",
      "defaultValue": "true",
      "description": "<P>Sets or gets the Knob's snapToStep property. Specifies whether setting the knob value will snap to the closest step true/false. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>snapToStep</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({snapToStep: true});</CODE></PRE>\n\r\n<P>Get the <CODE>snapToStep</CODE> property. </P>\n<PRE><CODE>var snapToStep = $('#jqxKnob').jqxKnob('snapToStep');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-dragstartangle-and-dragendangle-property",
      "exampleDescription": "snapToStep is set to true",
      "dataType": "boolean",
      "exampleInit": {
        "snapToStep": "false"
      }
    },
    {
      "name": "value",
      "defaultValue": "0",
      "description": "<P>Sets or gets the Knob's value. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>value</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({value: 23});</CODE></PRE>\n\r\n<P>Get the <CODE>value</CODE> property. </P>\n<PRE><CODE>var value = $('#jqxKnob').jqxKnob('value');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-spinner-property",
      "exampleDescription": "value is set to 60",
      "dataType": "Number | Array",
      "ts_dataType": "any"
    },
    {
      "name": "width",
      "defaultValue": "400",
      "description": "<P>Sets or gets the Knob's width. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob({width: 400});</CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxKnob').jqxKnob('width');</CODE></PRE>",
      "example": "",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-width-and-height-properties",
      "exampleDescription": "width is set to 400",
      "dataType": "number",
      "ts_dataType": "number | string",
      "exampleInit": {
        "width": "500"
      }
    }
  ],
  "events": [
    {
      "name": "change",
      "description": "<P>This event is triggered when the value is changed. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>change</CODE> event by type: jqxKnob. </P>",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-change-event",
      "exampleDescription": "Bind to the change event by type: jqxKnob.",
      "example": "<PRE><CODE>$('#jqxKnob').on('change', \r\nfunction (event) {var args = event.args; var value = args.value; var changeSource = args.changeSource; // \"pointerMove\", \"increment\", \"decrement\", \"val\", \"propertyChange\" }); \r\n                         </CODE></PRE>"
    }
  ],
  "methods": [
    {
      "name": "destroy",
      "description": "<P>Destroys the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob('destroy'); </CODE></PRE>",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-destroy-method",
      "exampleDescription": "destroys the jqxKnob",
      "returnDataType": "None",
      "arguments": [
        {
          "name": "None",
          "dataType": null,
          "description": "",
          "optional": false
        }
      ]
    },
    {
      "name": "val",
      "description": "<P>Sets or gets the value. </P>\n<H4>Code examples</H4>\n<P>Get the <CODE>value</CODE>: </P>\n<PRE><CODE>var value = $('#jqxKnob').jqxKnob('val'); or var value = $('#jqxKnob').val();</CODE></PRE>\n<P>Set the <CODE>value</CODE>: </P>\n<PRE><CODE>$('#jqxKnob').jqxKnob('val', 50); or $('#jqxKnob').val(50);</CODE></PRE>",
      "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxknob-val-method",
      "exampleDescription": "sets the jqxKnob value",
      "returnDataType": "number",
      "arguments": [
        {
          "name": "value",
          "dataType": "string",
          "ts_dataType": "number | string",
          "description": "",
          "optional": true
        }
      ],
      "customExample": {
        "customCode": "&lt;template>\n  &lt;JqxKnob ref=\"myKnob\"\n       :value=\"60\" :min=\"0\" :max=\"100\" :startAngle=\"120\" :endAngle=\"420\" :snapToStep=\"true\"\n       :rotation=\"'clockwise'\" :pointer=\"pointer\" :progressBar=\"progressBar\"\n       :marks=\"marks\" :labels=\"labels\" />\n&lt;/template>\n\n&lt;script>\n  import JqxKnob from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxknob.vue';\n\n  export default {\n    components: {\n      JqxKnob\n    },\n    data: function () {\n      return {\n        styles: {\n          stroke: '#dfe3e9', strokeWidth: 3,\n          fill: {\n            color: '#fefefe', gradientType: \"linear\",\n            gradientStops: [[0, 1], [50, 0.9], [100, 1]]\n          }\n        },\n        marks: {\n          colorRemaining: { color: 'grey', border: 'grey' },\n          colorProgress: { color: '#00a4e1', border: '#00a4e1' },\n          type: 'line',\n          offset: '71%',\n          thickness: 3,\n          size: '6%',\n          majorSize: '9%',\n          majorInterval: 10,\n          minorInterval: 2\n        },\n        labels: {\n          offset: '88%',\n          step: 10,\n          visible: true\n        },\n        progressBar: {\n          style: { fill: '#00a4e1', stroke: 'grey' },\n          size: '9%',\n          offset: '60%',\n          background: { fill: 'grey', stroke: 'grey' }\n        },\n        pointer: {\n          type: 'circle',\n          style: { fill: { color: '#a4a3a3', gradientType: \"linear\", gradientStops: [[0, 0.5], [50, 0.6], [100, 1]] }, stroke: '#333' },\n          size: '10%',\n          offset: '50%'\n        }\n      }\n    },\n    mounted: function () {\n      this.$refs.myKnob.val(100);     \n    }\n  }\n&lt;/script>\n&lt;style>\n  text.jqx-knob-label {\n    font-size: 20px;\n  }\n&lt;/style>"
      }
    }
  ]
}