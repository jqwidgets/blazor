{
    "widget": {
        "name": "jqxEditor",
        "description": "Represents a ready-for-use HTML text editor which can simplify web content creation or be a replacement of your HTML Text Areas.",
        "angular2": {
            "name": "jqxEditorComponent",
            "selector": "jqxEditor"
        }
    },
    "dataTypes": [
        {
            "name": "EditorLineBreak",
            "ts_dataType": "enum",
            "enumOptions": [ "br", "p", "div", "default" ]
        },
        {
            "name": "EditorPasteMode",
            "ts_dataType": "enum",
            "enumOptions": [ "html", "text" ]
        },
        {
            "name": "EditorToolbarPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "top", "bottom" ]
        },
        {
            "name": "EditorLocalization",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "bold",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Bold",
                    "defaultValue": ""
                },
                {
                    "name": "italic",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Italic",
                    "defaultValue": ""
                },
                {
                    "name": "underline",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Underline",
                    "defaultValue": ""
                },
                {
                    "name": "format",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Format",
                    "defaultValue": ""
                },
                {
                    "name": "size",
                    "dataType": "string",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "string | number",
                    "defaultValue": ""
                },
                {
                    "name": "font",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Font",
                    "defaultValue": ""
                },
                {
                    "name": "html",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "HTML",
                    "defaultValue": ""
                },
                {
                    "name": "color",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Color",
                    "defaultValue": ""
                },
                {
                    "name": "background",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Background",
                    "defaultValue": ""
                },
                {
                    "name": "left",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Left",
                    "defaultValue": ""
                },
                {
                    "name": "center",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Center",
                    "defaultValue": ""
                },
                {
                    "name": "right",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Right",
                    "defaultValue": ""
                },
                {
                    "name": "outdent",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Outdent",
                    "defaultValue": ""
                },
                {
                    "name": "indent",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Indent",
                    "defaultValue": ""
                },
                {
                    "name": "ul",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Ul",
                    "defaultValue": ""
                },
                {
                    "name": "ol",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Ol",
                    "defaultValue": ""
                },
                {
                    "name": "image",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Image",
                    "defaultValue": ""
                },
                {
                    "name": "link",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Link",
                    "defaultValue": ""
                },
                {
                    "name": "clean",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Clean",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "EditorCreateCommand",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "name",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Name",
                    "defaultValue": ""
                }
            ]
        }
    ],
    "exampleInit": {
        "width": "850",
        "height": "400",
        "tools": "bold italic underline | format font size"
    },
    "exampleExtraTemplate": "Editor Content Here...",
    "properties": [
        {
            "name": "createCommand",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxEditor's createCommand property. The property allows you to add new commands or override existing commands. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>createCommand</CODE> property in order to create new commands. </P>\n<PRE><CODE>\r\n$('#editor').jqxEditor({\r\n    height: 400,\r\n    width: 800,\r\n    tools: 'datetime | print clear | backcolor | font bold italic underline',\r\n    createCommand: function (name) {\r\n        switch (name) {\r\n            case \"datetime\":\r\n                return {\r\n                    type: 'list',\r\n                    tooltip: \"Insert Date/Time\",\r\n                    init: function (widget) {\r\n                        widget.jqxDropDownList({ placeHolder: \"Insert Custom HTML\", width: 160, source: ['Insert Time', 'Insert Date'], autoDropDownHeight: true });\r\n                    },\r\n                    refresh: function (widget, style) {\r\n                        // do something here when the selection is changed.\r\n                        widget.jqxDropDownList('clearSelection');\r\n                    },\r\n                    action: function (widget, editor) {\r\n                        var widgetValue = widget.val();\r\n                        var date = new Date();\r\n                        // return object with command and value members.\r\n                        return { command: \"inserthtml\", value: widgetValue == \"Insert Time\" ? date.getHours() + \":\" + date.getMinutes() : date.getDate() + \"-\" + date.getMonth() + \"-\" + date.getFullYear() };\r\n                    }\r\n                }\r\n            case \"print\":\r\n                return {\r\n                    type: 'button',\r\n                    tooltip: 'Print',\r\n                    init: function (widget) {\r\n                        widget.jqxButton({ height: 25, width: 40 });\r\n                        widget.html(\"&lt;span style='line-height: 23px;'&gt;Print&lt;/span&gt;\");\r\n                    },\r\n                    refresh: function (widget, style) {\r\n                        // do something here when the selection is changed.\r\n                    },\r\n                    action: function (widget, editor) {\r\n                        // return nothing and perform a custom action.\r\n                        $('#editor').jqxEditor('print');\r\n                    }\r\n                }\r\n            case \"clear\":\r\n                return {\r\n                    type: 'button',\r\n                    tooltip: 'Clear',\r\n                    init: function (widget) {\r\n                        widget.jqxButton({ height: 25, width: 40 });\r\n                        widget.html(\"&lt;span style='line-height: 23px;'&gt;Clear&lt;/span&gt;\");\r\n                    },\r\n                    refresh: function (widget, style) {\r\n                        // do something here when the selection is changed.\r\n                    },\r\n                    action: function (widget, editor) {\r\n                        // return nothing and perform a custom action.\r\n                        $('#editor').val('');\r\n                    }\r\n                }\r\n            case \"backcolor\":\r\n                return {\r\n                    type: 'colorPicker',\r\n                    tooltip: 'Background',\r\n                    init: function (widget) {\r\n                        widget.jqxDropDownButton({ width: 160 });\r\n                        widget.jqxDropDownButton('setContent', '&lt;span style=\"line-height: 23px;\"&gt;Choose Background&lt;/span&gt;');\r\n                    },\r\n                    refresh: function (widget, style) {\r\n                        // do something here when the selection is changed.\r\n                    },\r\n                    action: function (widget, editor) {\r\n                        // return nothing and perform a custom action.\r\n                        var color = widget.val();\r\n                        editor.css('background', color);\r\n                    }\r\n                }\r\n        }\r\n    }\r\n});\r\n                         </CODE></PRE>\n\r\n<P>Set the <CODE>createCommand</CODE> property to override existing commands.</P>\n<PRE><CODE>\r\n$('#editor').jqxEditor({\r\n    height: 400,\r\n    width: 800,\r\n    tools: \"bold italic underline | font size | left center right | outdent indent\",\r\n    createCommand: function (name) {\r\n        switch (name) {\r\n            case \"font\":\r\n                return {\r\n                    init: function (widget) {\r\n                        widget.jqxDropDownList({\r\n                            source: [{ label: 'Arial', value: 'Arial, Helvetica, sans-serif' },\r\n                                    { label: 'Comic Sans MS', value: '\"Comic Sans MS\", cursive, sans-serif' },\r\n                                    { label: 'Courier New', value: '\"Courier New\", Courier, monospace' },\r\n                                    { label: 'Georgia', value: \"Georgia,serif\" }]\r\n                        });\r\n                    }\r\n                }\r\n            case \"size\":\r\n                return {\r\n                    init: function (widget) {\r\n                        widget.jqxDropDownList({\r\n                            source: [\r\n                                { label: \"8pt\", value: \"xx-small\" },\r\n                                { label: \"12pt\", value: \"small\" },\r\n                                { label: \"18pt\", value: \"large\" },\r\n                                { label: \"36pt\", value: \"xx-large\" }\r\n                            ]\r\n                        });\r\n                    }\r\n                }\r\n        }\r\n    }\r\n});\r\n</CODE></PRE>\n\r\n<P>Get the <CODE>createCommand</CODE> property. </P>\n<PRE><CODE>var createCommand = $('#jqxEditor').jqxEditor('createCommand');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zuBu9/",
            "exampleDescription": "createCommand is set to a custom function.",
            "dataType": "Function",
            "ts_dataType": "(name:EditorCreateCommand['name']) => void",
            "exampleInit": {
                "createCommand": "createCommand",
                "tools": "datetime backcolor",
                "exampleData": "switch (name) {\n          case 'datetime': \n            return { \n              type: 'list', \n              tooltip: 'Insert Date/Time', \n              init: function(widget) { \n                widget.jqxDropDownList({ placeHolder: 'Insert Custom HTML', width: 160, source: ['Insert Time', 'Insert Date'], autoDropDownHeight: true }); \n              }, \n              refresh: function(widget, style) { \n                // do something here when the selection is changed.\n                widget.jqxDropDownList('clearSelection'); \n              }, \n              action: function(widget, editor) { \n                const widgetValue = widget.val(); \n                const date = new Date(); \n                // return object with command and value members.\n                return { command: 'inserthtml', value: widgetValue == 'Insert Time' ? date.getHours() + ':' + date.getMinutes() : date.getDate() + '-' + date.getMonth() + '-' + date.getFullYear() }; \n              } \n            }\n          case 'backcolor': \n            return { \n              type: 'colorPicker', \n              tooltip: 'Background', \n              init: function(widget) { \n                widget.jqxDropDownButton({ width: 160 }); \n                widget.jqxDropDownButton('setContent', 'Choose Background'); \n              }, \n              refresh: function(widget, style) { \n                // do something here when the selection is changed.\n              }, \n              action: function(widget, editor) { \n                // return nothing and perform a custom action.\n                const color = widget.val(); \n                editor.css('background', color); \n              } \n            }\n          }"
            }
        },
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the jqxEditor is disabled. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$('#jqxEditor').jqxEditor({ disabled:true }); </CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxEditor').jqxEditor('disabled');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/mksnT/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "editable",
            "defaultValue": "true",
            "description": "<P>Sets or gets the jqxEditor's editable property. The property determines whether the jqxEditor is read only. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>editable</CODE> property. </P>\n<PRE><CODE>$('#jqxEditor').jqxEditor({editable: true});</CODE></PRE>\n\r\n<P>Get the <CODE>editable</CODE> property. </P>\n<PRE><CODE>var editable = $('#jqxEditor').jqxEditor('editable');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/SNMX3/",
            "exampleDescription": "editable is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "editable": "false"
            }
        },
        {
            "name": "height",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxEditor's height. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$('#jqxEditor').jqxEditor({height:\"400px\"});</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxEditor').jqxEditor('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/XvXyy/",
            "exampleDescription": "height is set to '400px'",
            "dataType": "string  | number",
            "ts_dataType": "string  | number"
        },
        {
            "name": "lineBreak",
            "defaultValue": "\"default\"",
            "description": "<P>Sets or gets the jqxEditor's line break. The property determines whether the jqxEditor creates <CODE>BR</CODE>, <CODE>P</CODE> or <CODE>DIV</CODE> tag when the <CODE>Enter</CODE> key is pressed or uses the web browser's default mode. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>lineBreak</CODE> property. </P>\n<PRE><CODE>$('#jqxEditor').jqxEditor({lineBreak:\"div\"});</CODE></PRE>\n\r\n<P>Get the <CODE>lineBreak</CODE> property. </P>\n<PRE><CODE>var lineBreak = $('#jqxEditor').jqxEditor('lineBreak');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Bpjz7/",
            "exampleDescription": "lineBreak is set to 'div'",
            "dataType": "string",
            "ts_dataType": "enum:EditorLineBreak",
            "exampleInit": {
                "lineBreak": "div"
            }
        },
        {
            "name": "localization",
            "defaultValue": "{ \"bold\": \"Bold\", \"italic\": \"Italic\", \"underline\": \"Underline\", \"format\": \"Format Block\", \"font\": \"Font Name\", \"size\": \"Font Size\", \"color\": \"Text Color\", \"background\": \"Fill Color\", \"left\": \"Align Left\", \"center\": \"Align Center\", \"right\": \"Align Right\", \"outdent\": \"Indent Less\", \"indent\": \"Indent More\", \"ul\": \"Insert unordered list\", \"ol\": \"Insert ordered list\", \"image\": \"Insert image\", \"link\": \"Insert link\", \"html\": \"View source\", \"clean\": \"Remove Formatting\" }",
            "description": "<P>Sets or gets the jqxEditor's localization. The property determines the localization of the jqxEditor. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>localization</CODE> property. </P>\n<PRE><CODE>\r\n$('#editor').jqxEditor({\r\n    localization: {\r\n        \"bold\": \"Fett\",\r\n        \"italic\": \"Kursiv\",\r\n        \"underline\": \"Unterstreichen\",\r\n        \"format\": \"Block-Format\",\r\n        \"font\": \"Schriftname\",\r\n        \"size\": \"Schriftgröße\",\r\n        \"color\": \"Textfarbe\",\r\n        \"background\": \"Hintergrundfarbe\",\r\n        \"left\": \"Links ausrichten\",\r\n        \"center\": \"Mitte ausrichten\",\r\n        \"right\": \"Rechts ausrichten\",\r\n        \"outdent\": \"Weniger Einzug\",\r\n        \"indent\": \"Mehr Einzug\",\r\n        \"ul\": \"Legen Sie ungeordnete Liste\",\r\n        \"ol\": \"Geordnete Liste einfügen\",\r\n        \"image\": \"Bild einfügen\",\r\n        \"link\": \"Link einfügen\",\r\n        \"html\": \"html anzeigen\",\r\n        \"clean\": \"Formatierung entfernen\"\r\n    }\r\n});\r\n                        </CODE></PRE>\n\r\n<P>Get the <CODE>localization</CODE> property. </P>\n<PRE><CODE>var localization = $('#jqxEditor').jqxEditor('localization');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Kw3QQ/",
            "exampleDescription": "localization is set to a custom object.",
            "dataType": "object",
            "ts_dataType": "EditorLocalization",
            "exampleInit": {
                "localization": "localization",
                "exampleData": "{ 'bold': 'Fett', 'italic': 'Kursiv', 'underline': 'Unterstreichen', 'format': 'Block-Format', 'font': 'Schriftname', 'size': 'Schriftgröße', 'color': 'Textfarbe', 'background': 'Hintergrundfarbe', 'left': 'Links ausrichten', 'center': 'Mitte ausrichten', 'right': 'Rechts ausrichten', 'outdent': 'Weniger Einzug', 'indent': 'Mehr Einzug', 'ul': 'Legen Sie ungeordnete Liste', 'ol': 'Geordnete Liste einfügen', 'image': 'Bild einfügen', 'link': 'Link einfügen', 'html': 'html anzeigen', 'clean': 'Formatierung entfernen' }"
            }
        },
        {
            "name": "pasteMode",
            "defaultValue": "\"html\"",
            "description": "<P>Sets or gets the jqxEditor's paste mode. The property determines whether the clipboard data is pasted as HTML or Plain Text. Possible values: \"html\" and \"text\". </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>pasteMode</CODE> property. </P>\n<PRE><CODE>$('#jqxEditor').jqxEditor({pasteMode:\"html\"});</CODE></PRE>\n\r\n<P>Get the <CODE>pasteMode</CODE> property. </P>\n<PRE><CODE>var pasteMode = $('#jqxEditor').jqxEditor('pasteMode');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/kyf35/",
            "exampleDescription": "pasteMode is set to 'text'",
            "dataType": "string",
            "ts_dataType": "enum:EditorPasteMode",
            "exampleInit": {
                "pasteMode": "text"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts.</P>",
            "example": "<pre><CODE>$('#jqxEditor').jqxEditor({rtl : true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/e96VD/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "stylesheets",
            "defaultValue": "[]",
            "description": "<P>Sets or gets the jqxEditor's stylesheets. The property allows you to include stylesheets into the jqxEditor's IFrame. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>stylesheets</CODE> property. </P>\n<PRE><CODE>$('#jqxEditor').jqxEditor({stylesheets:[\"../../jqwidgets/styles/jqx.base.css\"]);</CODE></PRE>\n\r\n<P>Get the <CODE>stylesheets</CODE> property. </P>\n<PRE><CODE>var stylesheets = $('#jqxEditor').jqxEditor('stylesheets');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/aV8kG/",
            "exampleDescription": "stylesheets is set to a custom array.",
            "dataType": "Array",
            "ts_dataType": "Array<any>",
            "exampleInit": {
                "stylesheets": "stylesheets",
                "exampleData": "['../../jqwidgets/styles/jqx.base.css']"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n<PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;\r\n</CODE></PRE>\r\n</CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/j5kD6/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "toolbarPosition",
            "defaultValue": "\"top\"",
            "description": "<P>Sets or gets the jqxEditor's toolbar position. The property determines the position of the jqxEditor's toolbar. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>toolbarPosition</CODE> property. </P>\n<PRE><CODE>$('#jqxEditor').jqxEditor({toolbarPosition:\"bottom\"});</CODE></PRE>\n\r\n<P>Get the <CODE>toolbarPosition</CODE> property. </P>\n<PRE><CODE>var toolbarPosition = $('#jqxEditor').jqxEditor('toolbarPosition');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/LdK5D/",
            "exampleDescription": "toolbarPosition is set to 'bottom'",
            "dataType": "string",
            "ts_dataType": "enum:EditorToolbarPosition",
            "exampleInit": {
                "toolbarPosition": "bottom"
            }
        },
        {
            "name": "tools",
            "defaultValue": "\"bold italic underline | format font size | color background | left center right | outdent indent | ul ol | image | link | clean | html\"",
            "description": "<P>Sets or gets the jqxEditor's tools. The property determines the visibility and layout of the jqxEditor's tools. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>tools</CODE> property. </P>\n<PRE><CODE>$('#jqxEditor').jqxEditor({tools:\"bold italic underline\"});</CODE></PRE>\n\r\n<P>Get the <CODE>tools</CODE> property. </P>\n<PRE><CODE>var tools = $('#jqxEditor').jqxEditor('tools');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/n4e23/",
            "exampleDescription": "tools is set to \"bold italic underline\"",
            "dataType": "string"
        },
        {
            "name": "width",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxEditor's width. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$('#jqxEditor').jqxEditor({width:\"200px\"});</CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxEditor').jqxEditor('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/XvXyy/",
            "exampleDescription": "width is set to '800px'",
            "dataType": "number",
            "ts_dataType": "string | number"
        }
    ],
    "events": [
        {
            "name": "change",
            "description": "<P>This is triggered when the jqxEditor's value is changed. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>change</CODE> event by type: jqxEditor. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/L2Aek/",
            "exampleDescription": "Bind to the change event by type:jqxEditor",
            "example": "<PRE><CODE>\r\n$('#jqxEditor').on('change', function (event) {\r\n    // type\r\n    var type = event.args.type; // keyboard, mouse or null depending on how the value was changed.                                              \r\n}); </CODE></PRE>"
        }
    ],
    "methods": [
        {
            "name": "destroy",
            "description": "<P>Destroys the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxEditor').jqxEditor('destroy'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/j63LP/",
            "exampleDescription": "destroys the jqxEditor",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "focus",
            "description": "<P>Focuses the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>focus</CODE> method. </P>\n<PRE><CODE>$('#jqxEditor').jqxEditor('focus'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/skXv7/",
            "exampleDescription": "focuses the jqxEditor",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "print",
            "description": "<P>Prints the jqxEditor's value. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>print</CODE> method. </P>\n<PRE><CODE>$('#jqxEditor').jqxEditor('print'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Jw75s/",
            "exampleDescription": "prints the jqxEditor's value.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;div>\n        &lt;JqxEditor ref=\"myEditor\"\n                   :width=\"850\" :height=\"400\" :tools=\"'bold italic underline | format font size'\">\n             jqxEditor is a HTML text editor designed to simplify web content creation. You can use it as a replacement of your Textarea or you can create it from a DIV element.\n        &lt;/JqxEditor>\n        &lt;br />\n        &lt;JqxButton @click=\"print()\" :width=\"120\">Print&lt;/JqxButton>\n    &lt;/div>\n&lt;/template>\n \n&lt;script>\n  import JqxEditor from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxeditor.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n \n  export default {\n    components: {\n        JqxEditor,\n        JqxButton\n    },\n    methods: {\n        print: function () {\n            this.$refs.myEditor.print();\n        }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "setMode",
            "description": "<P>Sets the jqxEditor's mode. The method has one boolean parameter which determines whether the jqxEditor displays its value as formatted html or html code. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>setMode</CODE> method. </P>\n<PRE><CODE>$('#jqxEditor').jqxEditor('setMode', true); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ZGcWL/",
            "exampleDescription": "display the jqxEditor's html code.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "mode",
                    "dataType": "boolean",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "true" ]
            }
        },
        {
            "name": "val",
            "description": "<P>Sets or gets the value. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zxaRL/",
            "exampleDescription": "invoke the val method of the jqxEditor",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "value",
                    "dataType": "string",
                    "description": "",
                    "optional": true
                }
            ],
            "exampleInit": {
                "args": [ "'New Editor Value!'" ]
            }
        }
    ]
}