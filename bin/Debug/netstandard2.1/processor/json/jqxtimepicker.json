{
  "widget": {
    "name": "jqxTimePicker",
    "description": "Represents hours and minutes as an o'clock in a circular graph.",
    "angular2": {
      "name": "jqxTimePickerComponent",
      "selector": "jqxTimePicker"
    }
  },
  "dataTypes": [
    {
      "name": "TimePickerSelection",
      "ts_dataType": "enum",
      "enumOptions": [ "hour", "minute" ]
    },
    {
      "name": "TimePickerView",
      "ts_dataType": "enum",
      "enumOptions": [ "landscape", "portrait" ]
    }
  ],
  "exampleElementsInit": {},
  "exampleInit": {
    "width": "400",
    "height": "400"
  },
  "exampledInitExtraData": {
    "properties": "",
    "beforeCreate": "",
    "mounted": "",
    "methods": ""
  },
  "properties": [
    {
      "name": "autoSwitchToMinutes",
      "defaultValue": false,
      "allowedValues": [],
      "description": "Sets or gets whether after selecting hours, the element will automatically switch to minute selection. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$('#jqxTimePicker').jqxTimePicker({ autoSwitchToMinutes: false });</CODE></PRE>\n\r\n<P>Get the <CODE>autoSwitchToMinutes</CODE> property. </P>\n<PRE><CODE>var autoSwitchToMinutes = $('#jqxTimePicker').jqxTimePicker('autoSwitchToMinutes');</CODE></PRE>",
      "demoValues": [ true, false ],
      "dataType": "boolean",
      "exampleInit": {
        "autoSwitchToMinutes": "true"
      }
    },
    {
      "name": "disabled",
      "defaultValue": "false",
      "description": "<P>Enables or disables the jqxTimePicker. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$('#jqxTimePicker').jqxTimePicker({ disabled: false });</CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxTimePicker').jqxTimePicker('disabled');</CODE></PRE>",
      "example": "",
      "exampleURL": "",
      "exampleDescription": "disabled is set to true",
      "dataType": "boolean",
      "exampleInit": {
        "disabled": "true"
      }
    },
    {
      "name": "footer",
      "defaultValue": false,
      "allowedValues": [],
      "description": "<P>Sets or gets whether the footer is shown. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>footer</CODE> property. </P>\n<PRE><CODE>&lt;div id=\"timepicker\">&lt;/div>\n\n  &lt;template id=\"templateWithButtons\">\n    &lt;div id=\"buttonContainer\">\n      &lt;button>CANCEL&lt;/button>\n      &lt;button>OK&lt;/button>\n    &lt;/div>\n  &lt;/template>\n\n  &lt;script type=\"text/javascript\">\n    $(document).ready(function () {\n      $(\"#timepicker\").jqxTimePicker({\n        width: 400,\n        footer: true,\n        footerTemplate: \"templateWithButtons\"\n      });\n\n      $(\"#buttonContainer button\").jqxButton();\n    });\n  &lt;/script></CODE></PRE>",
      "demoValues": [ true, false ],
      "dataType": "boolean"
    },
    {
      "name": "footerTemplate",
      "defaultValue": null,
      "allowedValues": [],
      "description": "Sets or gets the footer template. The value of this property can be the id of an HTMLTemplateElement or the HTMLTemplateElement itself. If set to <em>null</em>, a default, empty, template is applied.",
      "demoValues": [ "template1", "document.getElementsByTagName('template')[0]" ],
      "dataType": "string"
    },
    {
      "name": "format",
      "defaultValue": "12-hour",
      "allowedValues": [ "12-hour", "24-hour" ],
      "description": "Sets or gets the whether hour selection format is using a 12-hour or 24-hour clock convention.",
      "demoValues": [ "24-hour", "12-hour" ],
      "dataType": "string",
      "exampleInit": {
        "format": "'24-hour'"
      }
    },
    {
      "name": "height",
      "defaultValue": "400",
      "description": "Sets or gets the height.",
      "demoValues": [ "400" ],
      "dataType": "string",
      "ts_dataType": "number | string",
      "exampleInit": {
        "height": "400"
      }
    },
    {
      "name": "minuteInterval",
      "defaultValue": 1,
      "allowedValues": [],
      "description": "Sets or gets the step when selecting minutes.\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>minuteInterval</CODE> property. </P>\n<PRE><CODE>$('#jqxTimePicker').jqxTimePicker({ minuteInterval: 5 });</CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var minuteInterval = $('#jqxTimePicker').jqxTimePicker('minuteInterval');</CODE></PRE>",
      "demoValues": [ 5, 15 ],
      "dataType": "number",
      "exampleInit": {
        "minuteInterval": "15"
      }
    },
    {
      "name": "name",
      "defaultValue": "",
      "allowedValues": [],
      "description": "The name of the control.",
      "demoValues": [ "time", "timepicker" ],
      "dataType": "string"
    },
    {
      "name": "readonly",
      "defaultValue": false,
      "allowedValues": [],
      "description": "Disables user interaction with the element.",
      "demoValues": [ true, false ],
      "dataType": "boolean",
      "exampleInit": {
        "readonly": "true"
      }
    },
    {
      "name": "selection",
      "defaultValue": "hour",
      "allowedValues": [ "hour", "minute" ],
      "description": "Sets or gets whether hour or minute selection is currently enabled.",
      "demoValues": [ "minute", "hour" ],
      "dataType": "string",
      "ts_dataType": "enum:TimePickerSelection",
      "exampleInit": {
        "selection": "'minute'"
      }
    },
    {
      "name": "theme",
      "defaultValue": "",
      "allowedValues": [],
      "description": "Determines the theme. Theme defines the look of the element. <P>\n\t\t\t\t\t\t\tSets the widget's theme.\n\t\t\t\t\t\t</P>\n\t\t\t\t\t\tjQWidgets uses a pair of css files - jqx.base.css and jqx.[theme name].css. The base stylesheet creates the styles related to the widget's layout like margin, padding, border-width, position. The second css file applies the widget's colors and backgrounds. The jqx.base.css should be included before the second CSS file.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIn order to set a theme, you need to do the following:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li>Include the theme's CSS file after jqx.base.css.<br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe following code example adds the 'energyblue' theme.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<pre><code>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;../../jqwidgets/styles/jqx.base.css&quot; type=&quot;text/css&quot; /&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;../../jqwidgets/styles/jqx.energyblue.css&quot; type=&quot;text/css&quot; /&gt;\n</code></pre>\n</code></pre>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li>Set the widget's theme property to 'energyblue' when you initialize it.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>",
      "demoValues": [ "blue", "red" ],
      "dataType": "string"
    },
    {
      "name": "unfocusable",
      "defaultValue": false,
      "allowedValues": [],
      "description": "If is set to true, the element cannot be focused.",
      "demoValues": [ true, false ],
      "dataType": "boolean",
      "exampleInit": {
        "unfocusable": "true"
      }
    },
    {
      "name": "value",
      "defaultValue": "new Date()",
      "allowedValues": [],
      "description": "Sets or gets the value.",
      "demoValues": [ "new Date(2017, 0, 1, 20, 33)", "new Date(2017, 10, 5, 1, 12)" ],
      "dataType": "Date",
      "ts_dataType": "any",
      "exampleInit": {
        "value": "new Date()"
      }
    },
    {
      "name": "view",
      "defaultValue": "portrait",
      "allowedValues": [ "landscape", "portrait" ],
      "description": "Sets or gets whether the element is in landscape or portrait orientation. <P>\n<B>Possible Values:</B>\n</P><PRE><CODE>'landscape'</CODE></PRE>\n<PRE><CODE>'portrait'</CODE></PRE>",
      "demoValues": [ "portrait", "landscape" ],
      "example": "<PRE><CODE>$('#jqxTimePicker').jqxTimePicker({ view: \"landscape\" }); </CODE></PRE>",
      "dataType": "string",
      "ts_dataType": "enum:TimePickerView",
      "exampleInit": {
        "view": "'landscape'"
      }
    },
    {
      "name": "width",
      "defaultValue": "400",
      "description": "Sets or gets the width.",
      "demoValues": [ "400" ],
      "dataType": "string",
      "ts_dataType": "number | string",
      "exampleInit": {
        "width": "400"
      }
    }
  ],
  "events": [
    {
      "name": "change",
      "description": "This event is triggered when the value is changed.",
      "exampleURL": "",
      "exampleDescription": "",
      "example": "<PRE><CODE>$(\"#jqxTimePicker\").on(\"change\", function (event) {\n        var args = event.args;\n        var value = args.value;\n        var oldValue = args.oldValue;\n        // Get current hour\n        var hour = value.getHours();\n        // Get current minutes\n        var minutes = value.getMinutes();\n        console.log(\"New time: \" + hour + \":\" + minutes);\n      });</CODE></PRE>"
    }
  ],
  "methods": [
    {
      "name": "setHours",
      "description": "Sets the hours.",
      "exampleURL": "",
      "exampleDescription": "sets the jqxTimePicker value",
      "returnDataType": "None",
      "arguments": [
        {
          "name": "hours",
          "dataType": "Number",
          "ts_dataType": "number",
          "description": "The hours to set.",
          "optional": false
        }
      ]
    },
    {
      "name": "setMinutes",
      "description": "Sets the minutes.",
      "exampleURL": "",
      "exampleDescription": "",
      "returnDataType": "None",
      "arguments": [
        {
          "name": "minutes",
          "dataType": "Number",
          "ts_dataType": "number",
          "description": "The minutes to set.",
          "optional": false
        }
      ]
    }
  ]
}