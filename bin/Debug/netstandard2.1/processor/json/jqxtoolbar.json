{
    "widget": {
        "name": "jqxToolBar",
        "description": "Displays a bar with tools such as buttons, drop-downs and others.",
        "angular2": {
            "name": "jqxToolBarComponent",
            "selector": "jqxToolbar"
        }
    },
    "dataTypes": [
        {
            "name": "ToolBarTools",
            "ts_dataType": "enum",
            "enumOptions": [ "button", "toggleButton", "dropdownlist", "combobox", "input", "custom" ]
        },
        {
            "name": "ToolBarToolItem",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "type",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Type",
                    "defaultValue": ""
                },
                {
                    "name": "tool",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Tool",
                    "defaultValue": ""
                },
                {
                    "name": "separatorAfterWidget",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Separator After Widget",
                    "defaultValue": ""
                },
                {
                    "name": "minimizable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Minimizable",
                    "defaultValue": ""
                },
                {
                    "name": "minimized",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Minimized",
                    "defaultValue": ""
                },
                {
                    "name": "menuTool",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Menu Tool",
                    "defaultValue": ""
                },
                {
                    "name": "menuSeparator",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Menu Separator",
                    "defaultValue": ""
                }
            ]
        }
    ],
    "exampleElementsInit": {
        "tools": "tools",
        "initTools": "initTools"
    },
    "exampleInit": {
        "width": "'70%'",
        "height": "35",
        "tools": "tools",
        "initTools": "initTools"
    },
    "exampledInitExtraData": {
        "properties": "tools: 'button | dropdownlist combobox | input',\n        initTools: function (type, index, tool, menuToolIninitialization) {\n          switch (index) {\n            case 0:\n              tool.text('Button');\n              break;\n            case 1:\n              tool.jqxDropDownList({\n                width: 130,\n                source: ['Affogato', 'Breve', 'Cafe', 'Crema'],\n                selectedIndex: 1\n              });\n              break;\n            case 2:\n              tool.jqxComboBox({\n                width: 50,\n                source: [8, 9, 10, 11, 12, 14, 16, 18, 20],\n                selectedIndex: 3\n              });\n              break;\n            case 3:\n              tool.jqxInput({\n                width: 200,\n                placeHolder: 'Type here...'\n              });\n              break;\n          }\n        }",
        "beforeCreate": "",
        "mounted": "",
        "methods": ""
    },
    "properties": [
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Enables or disables the jqxToolBar and all its tools. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$('#jqxToolBar').jqxToolBar({ disabled: false });</CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxToolBar').jqxToolBar('disabled');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/srb0r67m/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "height",
            "defaultValue": "35",
            "description": "<P>Sets or gets the jqxToolBar's height. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$('#jqxToolBar').jqxToolBar({ height: '50px' });</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxToolBar').jqxToolBar('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/xfo74dd1/",
            "exampleDescription": "height is set to 50",
            "dataType": "number",
            "ts_dataType": "string | number"
        },
        {
            "name": "initTools",
            "defaultValue": "null",
            "description": "<P>A callback function where settings can be made to the tools specified in the <CODE>tools</CODE> property. The <CODE>initTools</CODE> callback function is called twice for each tool. On the first call, the settings are applied to the tool as it appears in the toolbar. On the second call, the settings are applied to the tool when it is minimized. This allows the tool to appear differently in both cases if different settings are applied. </P>\n\r\n<P>If you wish to disable the minimization of a tool, return <CODE>{ minimizable: false }</CODE> in <CODE>initTools</CODE>. If you wish the tool to be minimizable but not to appear in the minimize pop-up menu, return <CODE>{ menuTool: false }</CODE>. In these cases, there will only be one call of <CODE>initTools</CODE> for this tool. </P>\n\r\n<P><CODE>initTools</CODE> is passed four parameters: </P>\n\r\n<UL><LI><CODE>type</CODE> - the type of the tool, as specified in <CODE>tools</CODE>. \r\n<LI><CODE>index</CODE> \r\n<LI><CODE>tool</CODE> - a jQuery object representing the tool. \r\n<LI><CODE>menuToolIninitialization</CODE> - a boolean value, specifying whether <CODE>initTools</CODE> is called for the toolbar tool (<CODE>false</CODE>) or the pop-up menu tool (<CODE>true</CODE>). </LI></UL>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>initTools</CODE> property. </P>\n<PRE><CODE>$(\"#jqxToolBar\").jqxToolBar({ width: \"100%\", height: 35, tools: 'button | dropdownlist combobox | input',\r\n    initTools: function (type, index, tool, menuToolIninitialization) {\r\n        switch (index) {\r\n            case 0:\r\n                tool.text(\"Button\");\r\n                break;\r\n            case 1:\r\n                tool.jqxDropDownList({ width: 130, source: [\"Affogato\", \"Breve\", \"Caf√© Crema\"], selectedIndex: 1 });\r\n                break;\r\n            case 2:\r\n                tool.jqxComboBox({ width: 50, source: [8, 9, 10, 11, 12, 14, 16, 18, 20], selectedIndex: 3 });\r\n                break;\r\n            case 3:\r\n                tool.jqxInput({ width: 200, placeHolder: \"Type here...\" });\r\n                break;\r\n        }\r\n    }\r\n});\r\n</CODE></PRE>\n\r\n<P>Get the <CODE>initTools</CODE> property. </P>\n<PRE><CODE>var displayFormat = $('#jqxToolBar').jqxToolBar('initTools'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/r6ybnvrq/",
            "exampleDescription": "initTools is set to a custom function",
            "dataType": "function",
            "ts_dataType": "(type?: string, index?: number, tool?: any, menuToolIninitialization?: boolean) => void"
        },
        {
            "name": "minimizeWidth",
            "defaultValue": "200",
            "description": "<P>Sets or gets the width of the minimize pop-up menu. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>minimizeWidth</CODE> property. </P>\n<PRE><CODE>$(\"#jqxToolBar\").jqxToolBar({ minimizeWidth: 100 });</CODE></PRE>\n\r\n<P>Get the <CODE>minimizeWidth</CODE> property. </P>\n<PRE><CODE>var value = $('#jqxToolBar').jqxToolBar('minimizeWidth');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/1qpfy60a/",
            "exampleDescription": "minimizeWidth is set to 250",
            "dataType": "number",
            "exampleInit": {
                "minimizeWidth": "400"
            }
        },
        {
            "name": "minWidth",
            "defaultValue": "null",
            "description": "<P>Sets or gets the minimum width of the jqxToolBar. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>minWidth</CODE> property. </P>\n<PRE><CODE>$('#jqxToolBar').jqxToolBar({ minWidth: 200 });</CODE></PRE>\n\r\n<P>Get the <CODE>minWidth</CODE> property. </P>\n<PRE><CODE>var minWidth = $('#jqxToolBar').jqxToolBar('minWidth');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/y425poaw/",
            "exampleDescription": "minWidth is set to 300",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "minWidth": "300"
            }
        },
        {
            "name": "maxWidth",
            "defaultValue": "null",
            "description": "<P>Sets or gets the maximum width of the jqxToolBar. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>maxWidth</CODE> property. </P>\n<PRE><CODE>$(\"#jqxToolBar\").jqxToolBar({ maxWidth: 1000 });</CODE></PRE>\n\r\n<P>Get the <CODE>maxWidth</CODE> property. </P>\n<PRE><CODE>var maxWidth = $('#jqxToolBar').jqxToolBar('maxWidth'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/jzdcrgmt/",
            "exampleDescription": "maxWidth is set to 1000.",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "maxWidth": "900"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>rtl</CODE> property. </P>\n<PRE><CODE>$('#jqxToolBar').jqxToolBar({ rtl : true });</CODE></PRE>\n\r\n<P>Get the <CODE>rtl</CODE> property. </P>\n<PRE><CODE>var rtl = $('#jqxToolBar').jqxToolBar('rtl');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/99gdezej/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "tools",
            "defaultValue": "''",
            "description": "<P>Sets or gets the types of tools in the jqxToolBar in the order they appear. The value of <CODE>tools</CODE> is a string representing a list of space-separated tool types. Possible tool types are: 'button', 'toggleButton', 'dropdownlist', 'combobox', 'input' and 'custom'. Separators can be added between tools by inserting a '|'. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>tools</CODE> property. </P>\n<PRE><CODE>$(\"#jqxToolBar\").jqxToolBar({ tools: \"button button button | toggleButton | dropdownlist combobox | input\" });</CODE></PRE>\n\r\n<P>Get the <CODE>tools</CODE> property. </P>\n<PRE><CODE>var tools = $('#jqxToolBar').jqxToolBar('tools');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/r6ybnvrq/",
            "exampleDescription": "tools is set to a custom string.",
            "dataType": "string",
            "ts_dataType": "string"
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n                                    <PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt; </CODE></PRE>\r\n                                </CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/kgjb4ewn/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "width",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxToolBar's width. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$('#jqxToolBar').jqxToolBar({ width: 200 });</CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxToolBar').jqxToolBar('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/kgjb4ewn/",
            "exampleDescription": "width is set to 700",
            "dataType": "number",
            "ts_dataType": "string | number"
        }
    ],
    "events": [
        {
            "name": "close",
            "description": "<P>This event is triggered when the minimize pop-up menu is closed. </P>\n<H4>Code examples </H4>\n<P>Bind to the <CODE>close</CODE> event by type: jqxToolBar. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Lf3wrycj/",
            "exampleDescription": "Bind to the close event by type: jqxToolBar.",
            "example": "<PRE><CODE>$('#jqxToolBar').on('close', function(){ // type your code here. }); </CODE></PRE>",
            "exampleInit": {
                "width": "'30%'"
            }
        },
        {
            "name": "open",
            "description": "<P>This event is triggered when the minimize pop-up menu is opened. </P>\n<H4>Code examples </H4>\n<P>Bind to the <CODE>open</CODE> event by type: jqxToolBar. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/bo1rhng9/",
            "exampleDescription": "Bind to the open event by type: jqxToolBar.",
            "example": "<PRE><CODE>$('#jqxToolBar').on('open', function(){ // type your code here. }); </CODE></PRE>",
            "exampleInit": {
                "width": "'30%'"
            }
        }
    ],
    "methods": [
        {
            "name": "addTool",
            "description": "<P>Adds a tool to the jqxToolBar. </P>\n<P>List of parameters: </P>\n<UL><LI>Type - the new tool's type. Possible values are: 'button', 'toggleButton', 'dropdownlist', 'combobox', 'input' and 'custom'. \r\n<LI>Position - where to insert the tool. Possible values are 'first' and 'last'. \r\n<LI>Separator - whether to include a separator after the new tool. Possible values are true and false. \r\n<LI>Initialization callback function - a function to be called after the new tool has been initialized. It is passed three parameters: \r\n<UL>\r\n<LI>type - the type of the tool. \r\n<LI>tool - a jQuery object representing the tool. \r\n<LI>menuToolIninitialization - a boolean value, specifying whether the callback is called for the toolbar tool (false) or the pop-up menu tool (true). </LI></UL></LI></UL>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>addTool</CODE> method. </P>\n<PRE><CODE>$(\"#jqxToolBar\").jqxToolBar(\"addTool\", \"button\", \"last\", true, function (type, tool, menuToolIninitialization) {\r\n    var width = 100;\r\n    if (menuToolIninitialization === true) {\r\n        width = \"100%\";\r\n    }\r\n    tool.text(\"New button\");\r\n    tool.jqxButton({ width: width });\r\n});\r\n</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/0m3b2d4m/",
            "exampleDescription": "adds a tool",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "type",
                    "dataType": "string",
                    "description": "Possible values are: 'button', 'toggleButton', 'dropdownlist', 'combobox', 'input' and 'custom'",
                    "optional": false
                },
                {
                    "name": "position",
                    "dataType": "string",
                    "description": "Possible values are 'first' and 'last'",
                    "optional": false
                },
                {
                    "name": "separator",
                    "dataType": "boolean",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "menuToolIninitialization",
                    "dataType": "Function",
                    "ts_dataType": "(type?: string, tool?: any, menuToolIninitialization?: boolean) => void",
                    "description": "It is passed three parameters: \r\ntype - the type of the tool. \r\ntool - a jQuery object representing the tool. \r\nmenuToolIninitialization - a boolean value, specifying whether the callback is called for the toolbar tool (false) or the pop-up menu tool (true). ",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'button'", "'last'", "''", "function (type, tool, menuToolIninitialization) {\n        tool.text(\"New button\");\n        tool.jqxButton({\n          width: 170\n        });\n      }" ]
            }
        },
        {
            "name": "disableTool",
            "description": "<P>Disables a tool. </P>\n<P>List of parameters: </P>\n<UL><LI>Index - the tool's index. \r\n<LI>Disable - whether to disable or enable the tool. Possible values are true (disables the tool) and false (enables the tool). </LI></UL>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>disableTool</CODE> method. </P>\n<PRE><CODE>$('#jqxToolBar').jqxToolBar('disableTool', 9, true);</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/rz78bjx5/",
            "exampleDescription": "disables a tool",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "disable",
                    "dataType": "boolean",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "1", "true" ]
            }
        },
        {
            "name": "destroy",
            "description": "<P>Destroys the toolbar and all its tools. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxToolBar').jqxToolBar('destroy'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/bua6hvn9/",
            "exampleDescription": "destroys the jqxToolBar",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "destroyTool",
            "description": "<P>Destroys a tool. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>destroyTool</CODE> method. </P>\n<PRE><CODE>// @param int. The expected parameter is the tool index.\r\n\r\n$('#jqxToolBar').jqxToolBar('destroyTool', 0);</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9pn6nryn/",
            "exampleDescription": "destroys a tool",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "1" ]
            }
        },
        {
            "name": "getTools",
            "description": "<P>Returns an array of all tools in the jqxToolBar. </P>\n<P>Each tool is represented by an object with the following fields: </P>\n<UL><LI><CODE>type</CODE> - string. Returns the type of the tool. \r\n<LI><CODE>tool</CODE> - object. Returns a jQuery object representing the tool. \r\n<LI><CODE>separatorAfterWidget</CODE> - boolean. Returns whether there is a separator after the tool. \r\n<LI><CODE>minimizable</CODE> - boolean. Returns whether the tool is minimizable. \r\n<LI><CODE>minimized</CODE> - boolean. Returns whether the tool is currently minimized. \r\n<LI><CODE>menuTool</CODE> - object. Returns a jQuery object representing the minimized tool in the pop-up menu. If the minimized tool is disabled, returns <CODE>false</CODE>. \r\n<LI><CODE>menuSeparator</CODE> - object. Returns a jQuery object representing the separator after the minimized tool in the pop-up menu. If there is no separator after the tool, returns <CODE>false</CODE>. </LI></UL>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>getTools</CODE> method. </P>\n<PRE><CODE>var tools = $('#jqxToolBar').jqxToolBar('getTools');</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/bx1nb0z5/",
            "exampleDescription": "get all tools",
            "returnDataType": "Array",
            "ts_returnDataType": "Array<ToolBarToolItem>",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "render",
            "description": "<P>Renders the widget. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>render</CODE> method. </P>\n<PRE><CODE>$('#jqxToolBar').jqxToolBar('render');</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/c4k4nxuo/",
            "exampleDescription": "renders the jqxToolBar",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None", 
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "refresh",
            "description": "<P>Refreshes the widget. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>refresh</CODE> method. </P>\n<PRE><CODE>$('#jqxToolBar').jqxToolBar('refresh'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/gb2xym4e/",
            "exampleDescription": "refreshes the jqxToolBar",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        }
    ]
}