{
    "widget": {
        "name": "jqxGrid",
        "description": "Enables users to display tabular data. The Grid offers rich support for interacting with data, including paging, grouping, sorting, filtering and editing. ",
        "angular2": {
            "name": "jqxGridComponent",
            "selector": "jqxGrid"
        }
    },
    "dataTypes": [
        {
            "name": "GridEverPresentRowPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "top", "bottom", "topAboveFilterRow" ]
        },
        {
            "name": "GridEverPresentRowActionsMode",
            "ts_dataType": "enum",
            "enumOptions": [ "popup", "columns" ]
        },
        {
            "name": "GridFilterMode",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "excel" ]
        },
        {
            "name": "GridSelectionMode",
            "ts_dataType": "enum",
            "enumOptions": [ "none", "singlerow", "multiplerows", "multiplerowsextended", "singlecell", "multiplecells", "multiplecellsextended", "multiplecellsadvanced", "checkbox" ]
        },
        {
            "name": "GridScrollMode",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "logical", "deferred" ]
        },
        {
            "name": "GridCellsFormat",
            "ts_dataType": "enum",
            "enumOptions": [ "n2", "f2", "c2", "f", "f5", "n", "c", "p", "d", "dd", "ddd", "dddd", "D", "h", "hh", "H", "HH", "m", "mm", "M", "MM", "MMM", "MMMM", "s", "ss", "t", "tt", "y", "yy", "yyy", "yyyy", "yyyy-MM-dd", "dd-MMMM-yyyy" ]
        },
        {
            "name": "GridAlign",
            "ts_dataType": "enum",
            "enumOptions": [ "left", "center", "right" ]
        },
        {
            "name": "GridFilterType",
            "ts_dataType": "enum",
            "enumOptions": [ "textbox", "input", "checkedlist", "list", "number", "bool", "date", "range", "custom" ]
        },
        {
            "name": "GridFilterCondition",
            "ts_dataType": "enum",
            "enumOptions": [ "EMPTY", "NOT_EMPTY", "CONTAINS", "CONTAINS_CASE_SENSITIVE", "DOES_NOT_CONTAIN", "DOES_NOT_CONTAIN_CASE_SENSITIVE", "STARTS_WITH", "STARTS_WITH_CASE_SENSITIVE", "ENDS_WITH", "ENDS_WITH_CASE_SENSITIVE", "EQUAL", "EQUAL_CASE_SENSITIVE", "NULL", "NOT_NULL", "EQUAL", "NOT_EQUAL", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", "NULL", "NOT_NULL" ]
        },
        {
            "name": "GridEditMode",
            "ts_dataType": "enum",
            "enumOptions": [ "click", "selectedcell", "selectedrow", "dblclick", "programmatic" ]
        },
        {
            "name": "GridDataType",
            "ts_dataType": "enum",
            "enumOptions": [ "xml", "json", "jsonp", "tsv", "csv", "local", "array", "observablearray" ]
        },
        {
            "name": "GridType",
            "ts_dataType": "enum",
            "enumOptions": [ "GET", "POST" ]
        },
        {
            "name": "GridSourceDataFieldsType",
            "ts_dataType": "enum",
            "enumOptions": [ "string", "date", "int", "float", "number", "bool" ]
        },
        {
            "name": "GridSortDirection",
            "ts_dataType": "enum",
            "enumOptions": [ "asc", "desc" ]
        },
        {
            "name": "GridSortToggleStates",
            "ts_dataType": "enum",
            "enumOptions": [ "0", "1", "2" ]
        },
        {
            "name": "GridColumnProperty",
            "ts_dataType": "enum",
            "enumOptions": [ "text", "hidden", "hideable", "renderer", "cellsrenderer", "hideable", "align", "cellsalign", "cellsformat", "pinned", "contenttype", "resizable", "filterable", "editable", "cellclassname", "classname", "width", "minwidth", "maxwidth" ]
        },
        {
            "name": "GridUpdateBoundData",
            "ts_dataType": "enum",
            "enumOptions": [ "filter", "sort", "cells" ]
        },
        {
            "name": "GridRowPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "first", "last" ]
        },
        {
            "name": "GridColumnType",
            "ts_dataType": "enum",
            "enumOptions": [ "number", "checkbox", "button", "numberinput", "dropdownlist", "combobox", "datetimeinput", "textbox", "template", "custom" ]
        },
        {
            "name": "ValidationResult",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "result",
                    "dataType": "boolean",
                    "optional": "false",
                    "displayName": "boolean result",
                    "defaultValue": ""
                },
                {
                    "name": "message",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Message",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridColumn",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "text",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Sets the column text",
                    "defaultValue": ""
                },
                {
                    "name": "datafield",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Sets the column datafield",
                    "defaultValue": ""
                },
                {
                    "name": "displayfield",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Sets the column's displayfield",
                    "defaultValue": ""
                },
                {
                    "name": "threestatecheckbox",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Enables or Disables Three State Checkboxes",
                    "defaultValue": "false"
                },
                {
                    "name": "sortable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Enables or Disables the sorting",
                    "defaultValue": "true"
                },
                {
                    "name": "filterable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Enables or Disables the filtering",
                    "defaultValue": "true"
                },
                {
                    "name": "filter",
                    "ts_dataType": "(cellValue?: any, rowData?: any, dataField?: string, filterGroup?: any, defaultFilterResult?: any) => any",
                    "optional": "true",
                    "displayName": "Sets the column's initialization filter",
                    "defaultValue": ""
                },
                {
                    "name": "buttonclick",
                    "ts_dataType": "(row: number) => void",
                    "optional": "true",
                    "displayName": "buttonclick",
                    "defaultValue": ""
                },
                {
                    "name": "hideable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Enables or Disables whether the column can be hidden",
                    "defaultValue": "false"
                },
                {
                    "name": "hidden",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Hides or Shows the column",
                    "defaultValue": "false"
                },
                {
                    "name": "groupable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Sets whether the user can group by this column",
                    "defaultValue": "true"
                },
                {
                    "name": "menu",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Sets whether the menu button is displayed",
                    "defaultValue": "true"
                },
                {
                    "name": "exportable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Determines whether the column will be exported",
                    "defaultValue": "true"
                },
                {
                    "name": "columngroup",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Determines the name of the column's parent group",
                    "defaultValue": "true"
                },
                {
                    "name": "enabletooltips",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Determines whether tooltips are enabled",
                    "defaultValue": "true"
                },
                {
                    "name": "columntype",
                    "dataType": "string",
                    "ts_dataType": "enum:GridColumnType",
                    "optional": "true",
                    "displayName": "Determines the column type.",
                    "defaultValue": ""
                },
                {
                    "name": "renderer",
                    "ts_dataType": "(defaultText?: string, alignment?: string, height?: number) => string",
                    "optional": "true",
                    "displayName": "Sets a custom column's header element renderer",
                    "defaultValue": ""
                },
                {
                    "name": "rendered",
                    "ts_dataType": "(columnHeaderElement?: any) => void",
                    "optional": "true",
                    "displayName": "Set additional settings to the column's header element",
                    "defaultValue": ""
                },
                {
                    "name": "cellsrenderer",
                    "ts_dataType": "(row?: number, columnfield?: string, value?: any, defaulthtml?: string, columnproperties?: any, rowdata?: any) => string",
                    "optional": "true",
                    "displayName": "Sets a custom rendering function",
                    "defaultValue": ""
                },
                {
                    "name": "aggregatesrenderer",
                    "ts_dataType": "(aggregates?: any, column?: any, element?: any, summaryData?: any)  => string",
                    "optional": "true",
                    "displayName": "Sets a custom rendering function of the column's aggregates",
                    "defaultValue": ""
                },
                {
                    "name": "validation",
                    "ts_dataType": "(cell?: any, value?: number) => any",
                    "optional": "true",
                    "displayName": "sets a custom validation function",
                    "defaultValue": ""
                },
                {
                    "name": "createwidget",
                    "ts_dataType": "(row: any, column: any, value: string, cellElement: any) => void",
                    "optional": "true",
                    "displayName": "Sets a custom function which is called when a widget in a cell is created",
                    "defaultValue": ""
                },
                {
                    "name": "initwidget",
                    "ts_dataType": "(row: number, column: string, value: string, cellElement: any) => void",
                    "optional": "true",
                    "displayName": "Initwidget",
                    "defaultValue": ""
                },
                {
                    "name": "createfilterwidget",
                    "ts_dataType": "(column: any, htmlElement: HTMLElement, editor: any) => void",
                    "optional": "true",
                    "displayName": "Create filter widget",
                    "defaultValue": ""
                },
                {
                    "name": "createfilterpanel",
                    "ts_dataType": "(datafield: string, filterPanel: any) => void",
                    "optional": "true",
                    "displayName": "Create filter panel",
                    "defaultValue": ""
                },
                {
                    "name": "initeditor",
                    "ts_dataType": "(row: number, cellvalue: any, editor: any, celltext: any, pressedChar: string, callback: any) => void",
                    "optional": "true",
                    "displayName": "Initeditor",
                    "defaultValue": ""
                },
                {
                    "name": "createeditor",
                    "ts_dataType": "(row: number, cellvalue: any, editor: any, celltext: any, cellwidth: any, cellheight: any) => void",
                    "optional": "true",
                    "displayName": "Createeditor",
                    "defaultValue": ""
                },
                {
                    "name": "destroyeditor",
                    "ts_dataType": "(row: number, callback: any) => void",
                    "optional": "true",
                    "displayName": "Destroyeditor",
                    "defaultValue": ""
                },
                {
                    "name": "geteditorvalue",
                    "ts_dataType": "(row: number, cellvalue:any, editor:any) => any",
                    "optional": "true",
                    "displayName": "Get editor value",
                    "defaultValue": ""
                },
                {
                    "name": "cellbeginedit",
                    "ts_dataType": "(row: number, datafield: string, columntype: string, value: any) => boolean",
                    "optional": "true",
                    "displayName": "Cell begin edit",
                    "defaultValue": ""
                },
                {
                    "name": "cellendedit",
                    "ts_dataType": "(row: number, datafield: string, columntype: string, oldvalue: any, newvalue: any) => boolean",
                    "optional": "true",
                    "displayName": "Cell end edit",
                    "defaultValue": ""
                },
                {
                    "name": "cellvaluechanging",
                    "ts_dataType": "(row: number, datafield: string, columntype: string, oldvalue: any, newvalue: any) => string | void",
                    "optional": "true",
                    "displayName": "Cell value changing",
                    "defaultValue": ""
                },
                {
                    "name": "createeverpresentrowwidget",
                    "ts_dataType": "(datafield: string, htmlElement: HTMLElement, popup: any, addRowCallback: any) => any",
                    "optional": "true",
                    "displayName": "Create ever present row widget",
                    "defaultValue": ""
                },
                {
                    "name": "initeverpresentrowwidget",
                    "ts_dataType": "(datafield: string, htmlElement: HTMLElement, popup: any) => void",
                    "optional": "true",
                    "displayName": "Init ever present row widget",
                    "defaultValue": ""
                },
                {
                    "name": "reseteverpresentrowwidgetvalue",
                    "ts_dataType": "(datafield: string, htmlElement: HTMLElement) => void",
                    "optional": "true",
                    "displayName": "Reset ever present row widget value",
                    "defaultValue": ""
                },
                {
                    "name": "geteverpresentrowwidgetvalue",
                    "ts_dataType": "(datafield: string, htmlElement: HTMLElement) => any",
                    "optional": "true",
                    "displayName": "Get ever present row widget value",
                    "defaultValue": ""
                },
                {
                    "name": "destroyeverpresentrowwidget",
                    "ts_dataType": "(htmlElement: HTMLElement) => void",
                    "optional": "true",
                    "displayName": "Destroy ever present row widget",
                    "defaultValue": ""
                },
                {
                    "name": "validateeverpresentrowwidgetvalue",
                    "ts_dataType": "(datafield: string, value: any, rowValues: any) => boolean | object",
                    "optional": "true",
                    "displayName": "Validate ever present row widget value",
                    "defaultValue": ""
                },
                {
                    "name": "cellsformat",
                    "ts_dataType": "string",
                    "optional": "true",
                    "displayName": "Cells format",
                    "defaultValue": ""
                },
                {
                    "name": "cellclassname",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Cell Class Name",
                    "defaultValue": ""
                },
                {
                    "name": "aggregates",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Aggregates",
                    "defaultValue": ""
                },
                {
                    "name": "align",
                    "ts_dataType": "enum:GridAlign",
                    "optional": "true",
                    "displayName": "Header's alignment",
                    "defaultValue": ""
                },
                {
                    "name": "cellsalign",
                    "ts_dataType": "enum:GridAlign",
                    "optional": "true",
                    "displayName": "Cells align ",
                    "defaultValue": ""
                },
                {
                    "name": "width",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Width",
                    "defaultValue": ""
                },
                {
                    "name": "minwidth",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Min width",
                    "defaultValue": ""
                },
                {
                    "name": "maxwidth",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Max width ",
                    "defaultValue": ""
                },
                {
                    "name": "resizable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Resizable",
                    "defaultValue": ""
                },
                {
                    "name": "draggable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Draggable",
                    "defaultValue": ""
                },
                {
                    "name": "editable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Editable",
                    "defaultValue": ""
                },
                {
                    "name": "classname",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Class name for the column's header",
                    "defaultValue": ""
                },
                {
                    "name": "pinned",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Pinned",
                    "defaultValue": ""
                },
                {
                    "name": "nullable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Nullable",
                    "defaultValue": ""
                },
                {
                    "name": "filteritems",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Filter items",
                    "defaultValue": ""
                },
                {
                    "name": "filterdelay",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Filter delay",
                    "defaultValue": ""
                },
                {
                    "name": "filtertype",
                    "ts_dataType": "enum:GridFilterType",
                    "optional": "true",
                    "displayName": "filter type",
                    "defaultValue": ""
                },
                {
                    "name": "filtercondition",
                    "ts_dataType": "enum:GridFilterCondition",
                    "optional": "true",
                    "displayName": "Filter condition",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridSourceDataFields",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "name",
                    "dataType": "string",
                    "optional": "false",
                    "displayName": "boolean result",
                    "defaultValue": ""
                },
                {
                    "name": "type",
                    "ts_dataType": "enum:GridSourceDataFieldsType",
                    "optional": "true",
                    "displayName": "Type",
                    "defaultValue": ""
                },
                {
                    "name": "format",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Format",
                    "defaultValue": ""
                },
                {
                    "name": "map",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Map",
                    "defaultValue": ""
                },
                {
                    "name": "id",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Id",
                    "defaultValue": ""
                },
                {
                    "name": "text",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Text",
                    "defaultValue": ""
                },
                {
                    "name": "source",
                    "ts_dataType": "Array<any>",
                    "optional": "true",
                    "displayName": "Source",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridSource",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "url",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Url",
                    "defaultValue": ""
                },
                {
                    "name": "data",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Data to be sent to the server",
                    "defaultValue": ""
                },
                {
                    "name": "localdata",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Local data",
                    "defaultValue": ""
                },
                {
                    "name": "datatype",
                    "ts_dataType": "enum:GridDataType",
                    "optional": "true",
                    "displayName": "Data type",
                    "defaultValue": ""
                },
                {
                    "name": "type",
                    "ts_dataType": "enum:GridType",
                    "optional": "true",
                    "displayName": "localdata",
                    "defaultValue": "GET"
                },
                {
                    "name": "id",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Id",
                    "defaultValue": ""
                },
                {
                    "name": "root",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Root",
                    "defaultValue": ""
                },
                {
                    "name": "record",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Record",
                    "defaultValue": ""
                },
                {
                    "name": "datafields",
                    "ts_dataType": "Array<GridSourceDataFields>",
                    "optional": "true",
                    "displayName": "Data fields",
                    "defaultValue": ""
                },
                {
                    "name": "pagenum",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Page number",
                    "defaultValue": ""
                },
                {
                    "name": "pagesize",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Page size",
                    "defaultValue": ""
                },
                {
                    "name": "pager",
                    "ts_dataType": "(pagenum?: number, pagesize?: number, oldpagenum?: number) => any",
                    "optional": "true",
                    "displayName": "Pager",
                    "defaultValue": ""
                },
                {
                    "name": "sortcolumn",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Sort column",
                    "defaultValue": ""
                },
                {
                    "name": "sortdirection",
                    "ts_dataType": "enum:GridSortDirection",
                    "optional": "true",
                    "displayName": "Sort direction",
                    "defaultValue": ""
                },
                {
                    "name": "sort",
                    "ts_dataType": "(column?: any, direction?: any) => void",
                    "optional": "true",
                    "displayName": "Sort",
                    "defaultValue": ""
                },
                {
                    "name": "filter",
                    "ts_dataType": "(filters?: any, recordsArray?: any) => void",
                    "optional": "true",
                    "displayName": "Filter",
                    "defaultValue": ""
                },
                {
                    "name": "addrow",
                    "ts_dataType": "(rowid?: any, rowdata?: any, position?: any, commit?: boolean) => void",
                    "optional": "true",
                    "displayName": "Add row",
                    "defaultValue": ""
                },
                {
                    "name": "deleterow",
                    "ts_dataType": "(rowid?: any, commit?: boolean) => void",
                    "optional": "true",
                    "displayName": "Delete row",
                    "defaultValue": ""
                },
                {
                    "name": "updaterow",
                    "ts_dataType": "(rowid?: any, newdata?: any, commit? : any) => void",
                    "optional": "true",
                    "displayName": "Update row",
                    "defaultValue": ""
                },
                {
                    "name": "processdata",
                    "ts_dataType": "(data: any) => void",
                    "optional": "true",
                    "displayName": "Process data",
                    "defaultValue": ""
                },
                {
                    "name": "formatdata",
                    "ts_dataType": "(data: any) => any",
                    "optional": "true",
                    "displayName": "Format data",
                    "defaultValue": ""
                },
                {
                    "name": "async",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "async",
                    "defaultValue": ""
                },
                {
                    "name": "totalrecords",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "totalrecords",
                    "defaultValue": ""
                },
                {
                    "name": "unboundmode",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "unboundmode",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridGetColumn",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "datafield",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Data field",
                    "defaultValue": ""
                },
                {
                    "name": "displayfield",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Display field",
                    "defaultValue": ""
                },
                {
                    "name": "text",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Text",
                    "defaultValue": ""
                },
                {
                    "name": "sortable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Sortable",
                    "defaultValue": ""
                },
                {
                    "name": "filterable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Filterable",
                    "defaultValue": ""
                },
                {
                    "name": "exportable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Exportable",
                    "defaultValue": ""
                },
                {
                    "name": "editable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Editable",
                    "defaultValue": ""
                },
                {
                    "name": "groupable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Groupable",
                    "defaultValue": ""
                },
                {
                    "name": "resizable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Resizable",
                    "defaultValue": ""
                },
                {
                    "name": "draggable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Draggable",
                    "defaultValue": ""
                },
                {
                    "name": "classname",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Class name",
                    "defaultValue": ""
                },
                {
                    "name": "cellclassname",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Cell class name",
                    "defaultValue": ""
                },
                {
                    "name": "width",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Width",
                    "defaultValue": ""
                },
                {
                    "name": "menu",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Menu",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridGetDataInformation",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "rowscount",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Rows count",
                    "defaultValue": ""
                },
                {
                    "name": "sortinformation",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Sort information",
                    "defaultValue": ""
                },
                {
                    "name": "sortcolumn",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Sort column",
                    "defaultValue": ""
                },
                {
                    "name": "sortdirection",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Sort direction",
                    "defaultValue": ""
                },
                {
                    "name": "paginginformation",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Paging information",
                    "defaultValue": ""
                },
                {
                    "name": "pagenum",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Page number",
                    "defaultValue": ""
                },
                {
                    "name": "pagesize",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Page size",
                    "defaultValue": ""
                },
                {
                    "name": "pagescount",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Pages count",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridGetSortInformation",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "sortcolumn",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Sort column",
                    "defaultValue": ""
                },
                {
                    "name": "sortdirection",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Sort direction",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridGetPagingInformation",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "pagenum",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Page number",
                    "defaultValue": ""
                },
                {
                    "name": "pagesize",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Page size",
                    "defaultValue": ""
                },
                {
                    "name": "pagescount",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Pages count",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridDateNaming",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "names",
                    "ts_dataType": "Array<string>",
                    "optional": "true",
                    "displayName": "Names",
                    "defaultValue": ""
                },
                {
                    "name": "namesAbbr",
                    "ts_dataType": "Array<string>",
                    "optional": "true",
                    "displayName": "Names abbreviation",
                    "defaultValue": ""
                },
                {
                    "name": "namesShort",
                    "ts_dataType": "Array<string>",
                    "optional": "true",
                    "displayName": "Names short",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridLocalizationobject",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "filterstringcomparisonoperators",
                    "dataType": "Array",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "",
                    "defaultValue": ""
                },
                {
                    "name": "filternumericcomparisonoperators",
                    "dataType": "Array",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "",
                    "defaultValue": ""
                },
                {
                    "name": "filterdatecomparisonoperators",
                    "dataType": "Array",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "",
                    "defaultValue": ""
                },
                {
                    "name": "filterbooleancomparisonoperators",
                    "dataType": "Array",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "",
                    "defaultValue": ""
                },
                {
                    "name": "pagergotopagestring",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Pager go to page string",
                    "defaultValue": ""
                },
                {
                    "name": "pagershowrowsstring",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Pager show rows string",
                    "defaultValue": ""
                },
                {
                    "name": "pagerrangestring",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Pager range string",
                    "defaultValue": ""
                },
                {
                    "name": "pagernextbuttonstring",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Pager next button string",
                    "defaultValue": ""
                },
                {
                    "name": "pagerpreviousbuttonstring",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Pager previous button string",
                    "defaultValue": ""
                },
                {
                    "name": "sortascendingstring",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Sort ascending string",
                    "defaultValue": ""
                },
                {
                    "name": "sortdescendingstring",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Sort descending string",
                    "defaultValue": ""
                },
                {
                    "name": "sortremovestring",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Sort remove string",
                    "defaultValue": ""
                },
                {
                    "name": "firstDay",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "First day",
                    "defaultValue": ""
                },
                {
                    "name": "percentsymbol",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Percent symbol",
                    "defaultValue": ""
                },
                {
                    "name": "currencysymbol",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Currency symbol",
                    "defaultValue": ""
                },
                {
                    "name": "currencysymbolposition",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Currency symbol position",
                    "defaultValue": ""
                },
                {
                    "name": "decimalseparator",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Decimal separator",
                    "defaultValue": ""
                },
                {
                    "name": "thousandsseparator",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Thousands separator",
                    "defaultValue": ""
                },
                {
                    "name": "days",
                    "ts_dataType": "GridDateNaming",
                    "optional": "true",
                    "displayName": "Days",
                    "defaultValue": ""
                },
                {
                    "name": "months",
                    "ts_dataType": "GridDateNaming",
                    "optional": "true",
                    "displayName": "Months",
                    "defaultValue": ""
                },
                {
                    "name": "addrowstring",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "addrowstring",
                    "defaultValue": ""
                },
                {
                    "name": "updaterowstring",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "udpaterowstring",
                    "defaultValue": ""
                },
                {
                    "name": "deleterowstring",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "deleterowstring",
                    "defaultValue": ""
                },
                {
                    "name": "resetrowstring",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "resetrowstring",
                    "defaultValue": ""
                },
                {
                    "name": "everpresentrowplaceholder",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "everpresentrowplaceholder",
                    "defaultValue": ""
                },
                {
                    "name": "emptydatastring",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "emptydatastring",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridScrollPosition",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "top",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Top",
                    "defaultValue": ""
                },
                {
                    "name": "left",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Left",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridGetGroup",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "group",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Group",
                    "defaultValue": ""
                },
                {
                    "name": "level",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Level",
                    "defaultValue": ""
                },
                {
                    "name": "expanded",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Expanded",
                    "defaultValue": ""
                },
                {
                    "name": "subgroups",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Sub groups",
                    "defaultValue": ""
                },
                {
                    "name": "subrows",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Sub rows",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridGetCell",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "value",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Value",
                    "defaultValue": ""
                },
                {
                    "name": "row",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Row",
                    "defaultValue": ""
                },
                {
                    "name": "column",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Column",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridGetSelectedCell",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "rowindex",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Row index",
                    "defaultValue": ""
                },
                {
                    "name": "datafield",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Data field",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridGetStateColumns",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "width",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Width",
                    "defaultValue": ""
                },
                {
                    "name": "hidden",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Hidden",
                    "defaultValue": ""
                },
                {
                    "name": "index",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Index",
                    "defaultValue": ""
                },
                {
                    "name": "pinned",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Pinned",
                    "defaultValue": ""
                },
                {
                    "name": "groupable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Groupable",
                    "defaultValue": ""
                },
                {
                    "name": "resizable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Resizable",
                    "defaultValue": ""
                },
                {
                    "name": "draggable",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Draggable",
                    "defaultValue": ""
                },
                {
                    "name": "text",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Text",
                    "defaultValue": ""
                },
                {
                    "name": "align",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Align",
                    "defaultValue": ""
                },
                {
                    "name": "cellsalign",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Cells align",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridGetState",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "width",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Width",
                    "defaultValue": ""
                },
                {
                    "name": "height",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Height",
                    "defaultValue": ""
                },
                {
                    "name": "pagenum",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Page number",
                    "defaultValue": ""
                },
                {
                    "name": "pagesize",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Page size",
                    "defaultValue": ""
                },
                {
                    "name": "pagesizeoptions",
                    "ts_dataType": "Array<string>",
                    "optional": "true",
                    "displayName": "Page size options",
                    "defaultValue": ""
                },
                {
                    "name": "sortcolumn",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Sort column",
                    "defaultValue": ""
                },
                {
                    "name": "sortdirection",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Sort direction",
                    "defaultValue": ""
                },
                {
                    "name": "filters",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Filters",
                    "defaultValue": ""
                },
                {
                    "name": "groups",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Groups",
                    "defaultValue": ""
                },
                {
                    "name": "columns",
                    "ts_dataType": "GridGetStateColumns",
                    "optional": "true",
                    "displayName": "Columns",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridColumnmenuopening",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "menu",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "menu",
                    "defaultValue": ""
                },
                {
                    "name": "datafield",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "datafield",
                    "defaultValue": ""
                },
                {
                    "name": "height",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "height",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridColumnmenuclosing",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "menu",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "menu",
                    "defaultValue": ""
                },
                {
                    "name": "datafield",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "datafield",
                    "defaultValue": ""
                },
                {
                    "name": "height",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "height",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridCellhover",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "cellhtmlElement",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "cellhtmlElement",
                    "defaultValue": ""
                },
                {
                    "name": "x",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "x",
                    "defaultValue": ""
                },
                {
                    "name": "y",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "y",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridGroupsrenderer",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "text",
                    "ts_dataType": "string",
                    "optional": "true",
                    "displayName": "text",
                    "defaultValue": ""
                },
                {
                    "name": "group",
                    "ts_dataType": "number",
                    "optional": "true",
                    "displayName": "group",
                    "defaultValue": ""
                },
                {
                    "name": "expanded",
                    "ts_dataType": "boolean",
                    "optional": "true",
                    "displayName": "expanded",
                    "defaultValue": ""
                },
                {
                    "name": "data",
                    "ts_dataType": "object",
                    "optional": "true",
                    "displayName": "data",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridGroupcolumnrenderer",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "text",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "text",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridHandlekeyboardnavigation ",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "event",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "event",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridScrollfeedback",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "row",
                    "dataType": "object",
                    "optional": "true",
                    "displayName": "Row",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridFilter",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "cellValue",
                    "dataType": "any",
                    "optional": "true",
                    "displayName": "CellValue",
                    "defaultValue": ""
                },
                {
                    "name": "rowData",
                    "dataType": "any",
                    "optional": "true",
                    "displayName": "RowData",
                    "defaultValue": ""
                },
                {
                    "name": "dataField",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "DataField",
                    "defaultValue": ""
                },
                {
                    "name": "filterGroup",
                    "dataType": "any",
                    "optional": "true",
                    "displayName": "FilterGroup",
                    "defaultValue": ""
                },
                {
                    "name": "defaultFilterResult",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "DefaultFilterResult",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridRendertoolbar",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "toolbar",
                    "dataType": "any",
                    "optional": "true",
                    "displayName": "Toolbar",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "GridRenderstatusbar",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "statusbar",
                    "dataType": "any",
                    "optional": "true",
                    "displayName": "Statusbar",
                    "defaultValue": ""
                }
            ]
        }
    ],
    "exampleInit": {
        "width": "850",
        "source": "dataAdapter",
        "columns": "columns",
        "autoheight": "true"
    },
    "exampleElementsInit": {
        "source": "adapter",
        "columns": "columns"
    },
    "exampledInitExtraData": {
        "properties": "dataAdapter: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]",
        "beforeCreate": "this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };",
        "mounted": "",
        "methods": ""
    },
    "properties": [
        {
            "name": "altrows",
            "defaultValue": "false",
            "description": "<P>Enables or disables the alternating rows. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ altrows: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4zAHJ/",
            "exampleDescription": "altrows is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "altrows": "true"
            }
        },
        {
            "name": "altstart",
            "defaultValue": "1",
            "description": "<P>This property specifies the first alternating row. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ altstart: 2}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/VRYVU/",
            "exampleDescription": "altstart is set to 2",
            "dataType": "number",
            "exampleInit": {
                "altrows": "true",
                "altstart": "2"
            }
        },
        {
            "name": "altstep",
            "defaultValue": "1",
            "description": "<P>Sets or gets the alternating step </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ altstep: 2}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/QucxJ/",
            "exampleDescription": "altstep is set to 2",
            "dataType": "number",
            "exampleInit": {
                "altrows": "true",
                "altstart": "0",
                "altstep": "2"
            }
        },
        {
            "name": "autoshowloadelement",
            "defaultValue": "true",
            "description": "<P>Determines whether the loading image should be displayed until the Grid's data is loaded. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ autoshowloadelement: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/HgU6P/",
            "exampleDescription": "autoshowloadelement is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "autoshowloadelement": "false"
            }
        },
        {
            "name": "autoshowfiltericon",
            "defaultValue": "true",
            "description": "<P>Displays the filter icon only when the column is filtered. When the value of this property is set to false, all grid columns will display a filter icon when the filtering is enabled. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ autoshowfiltericon: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/cUaH7/",
            "exampleDescription": "autoshowfiltericon is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "filterable": "true",
                "autoshowfiltericon": "false"
            }
        },
        {
            "name": "autoshowcolumnsmenubutton",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether the columns menu button will be displayed only when the mouse cursor is over a columns header or will be always displayed. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ autoshowcolumnsmenubutton: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/PmqY7/",
            "exampleDescription": "autoshowcolumnsmenubutton is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "filterable": "true",
                "autoshowcolumnsmenubutton": "false"
            }
        },
        {
            "name": "showcolumnlines",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether the columns lines are displayed. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showcolumnlines: false}); </CODE></pre>",
            "exampleURL": "",
            "exampleDescription": "showcolumnlines is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showcolumnlines": "false"
            }
        },
        {
            "name": "showrowlines",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether the row lines are displayed. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showrowlines: false}); </CODE></pre>",
            "exampleURL": "",
            "exampleDescription": "showrowlines is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showrowlines": "false"
            }
        },
        {
            "name": "showcolumnheaderlines",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether the column header lines are displayed. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showcolumnheaderlines: false}); </CODE></pre>",
            "exampleURL": "",
            "exampleDescription": "showcolumnheaderlines is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showcolumnheaderlines": "false"
            }
        },
        {
            "name": "adaptive",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether adaptive mode is enabled. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ adaptive: true}); </CODE></pre>",
            "exampleURL": "",
            "exampleDescription": "adaptive is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "adaptive": "true"
            }
        },
        {
            "name": "adaptivewidth",
            "defaultValue": "600",
            "description": "<P>Sets or gets the Grid's breakpoint width when adaptive mode is actived. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ adaptivewidth: false}); </CODE></pre>",
            "exampleURL": "",
            "exampleDescription": "adaptivewidth is set to false",
            "dataType": "number",
            "exampleInit": {
                "adaptive": "true",
                "adaptivewidth": "400"
            }
        },
        {
            "name": "clipboard",
            "defaultValue": "true",
            "description": "<P>Enables or disables the clipboard operations </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ clipboard: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Dp5tA/",
            "exampleDescription": "clipboard is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "clipboard": "false"
            }
        },
        {
            "name": "closeablegroups",
            "defaultValue": "true",
            "description": "<P>When the value of this property is true, a close button is displayed in each grouping column. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ closeablegroups: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/7UCsH/",
            "exampleDescription": "closeablegroups is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "groupable": "true",
                "groups": "['City']",
                "closeablegroups": "false"
            }
        },
        {
            "name": "columnsmenuwidth",
            "defaultValue": "15",
            "description": "<P>Sets or gets the columns menu width. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ columnsmenuwidth: 20}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zLunZ/",
            "exampleDescription": "columnsmenuwidth is set to 40",
            "dataType": "number",
            "exampleInit": {
                "filterable": "true",
                "autoshowcolumnsmenubutton": "false",
                "columnsmenuwidth": "40"
            }
        },
        {
            "name": "columnmenuopening",
            "defaultValue": "null",
            "description": "<P>Callback called when a column menu is opening. You can use it for changing the size of the menu or cancelling the opening. Three params are passed - menu, datafield and menu's height. If you return false, the opening will be cancelled. </P>",
            "example": "<pre><CODE>\r\n$('#jqxGrid').jqxGrid({ columnmenuopening: function (menu, datafield, height) {\r\n    var column = $(\"#jqxgrid\").jqxGrid('getcolumn', datafield);\r\n    if (column.filtertype === \"custom\") {\r\n        menu.height(155);\r\n    }\r\n    else menu.height(height);\r\n}}); \r\n                         </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zhprkz7s/",
            "exampleDescription": "columnmenuopening is set to custom function",
            "dataType": "Function",
            "ts_dataType": "(menu?: GridColumnmenuopening['menu'], datafield?: GridColumnmenuopening['datafield'], height?: GridColumnmenuopening['height']) => boolean | void",
            "exampleInit": {
                "columnmenuopening": "columnmenuopening",
                "filterable": "true",
                "exampleData": "alert('Menu Opening');"
            }
        },
        {
            "name": "columnmenuclosing",
            "defaultValue": "null",
            "description": "<P>Callback called when a column menu is opening. You can use it for changing the size of the menu or cancelling the opening. Three params are passed - menu, datafield and menu's height. If you return false, the opening will be cancelled. </P>",
            "example": "<pre><CODE>\r\n$('#jqxGrid').jqxGrid({ columnmenuclosing: function (menu, datafield, height) {\r\n                       \r\n}}); \r\n                         </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zhprkz7s/",
            "exampleDescription": "columnmenuclosing is set to custom function",
            "dataType": "Function",
            "ts_dataType": "(menu?: GridColumnmenuclosing['menu'], datafield?: GridColumnmenuclosing['datafield'], height?: GridColumnmenuclosing['height']) => boolean",
            "exampleInit": {
                "columnmenuclosing": "columnmenuclosing",
                "filterable": "true",
                "exampleData": "alert('Menu Closing');"
            }
        },
        {
            "name": "cellhover",
            "defaultValue": "null",
            "description": "<P>Callback called when a cell is hovered. </P>",
            "example": "<pre><CODE>\r\n$('#jqxGrid').jqxGrid({ cellhover: function (cellhtmlElement, x, y) {\r\n                       \r\n}}); \r\n                         </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tguhan39/",
            "exampleDescription": "cellhover is set to custom function",
            "dataType": "Function",
            "ts_dataType": "(cellhtmlElement?: GridCellhover['cellhtmlElement'], x?: GridCellhover['x'], y?: GridCellhover['y']) => void",
            "exampleInit": {
                "cellhover": "cellhover",
                "exampleData": "alert('Cell Hovered!');"
            }
        },
        {
            "name": "enablekeyboarddelete",
            "defaultValue": "true",
            "description": "<P>Enables or disables the delete of a cell/row values by using the \"delete\" key. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ enablekeyboarddelete: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/cqrnt/",
            "exampleDescription": "enablekeyboarddelete is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "editable": "true",
                "enablekeyboarddelete": "false"
            }
        },
        {
            "name": "enableellipsis",
            "defaultValue": "true",
            "description": "<P>Determines whether ellipsis will be displayed, if the cells or columns content overflows. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ enableellipsis: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/QBxfk/",
            "exampleDescription": "enableellipsis is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "enableellipsis": "false"
            }
        },
        {
            "name": "enablemousewheel",
            "defaultValue": "true",
            "description": "<P>Determines whether mousewheel scrolling is enabled. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ enablemousewheel: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/QLt6b/",
            "exampleDescription": "enablemousewheel is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "autoheight": "false",
                "height": "100",
                "enablemousewheel": "false"
            }
        },
        {
            "name": "enableanimations",
            "defaultValue": "true",
            "description": "<P>Enables or disables the grid animations. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ enableanimations: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/sDC74/",
            "exampleDescription": "enableanimations is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "filterable": "true",
                "enableanimations": "false"
            }
        },
        {
            "name": "enabletooltips",
            "defaultValue": "false",
            "description": "<P>Enables or disables the grid tooltips. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ enabletooltips: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/n8Q3z/",
            "exampleDescription": "enabletooltips is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "enabletooltips": "true"
            }
        },
        {
            "name": "enablehover",
            "defaultValue": "true",
            "description": "<P>Enables or disables the grid rows hover state. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ enablehover: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/nA66a/",
            "exampleDescription": "enablehover is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "enablehover": "false"
            }
        },
        {
            "name": "enablebrowserselection",
            "defaultValue": "false",
            "description": "<P>Enables the text selection of the browser. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ enablebrowserselection: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/pRQLd/",
            "exampleDescription": "enablebrowserselection is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "enablebrowserselection": "true"
            }
        },
        {
            "name": "everpresentrowposition",
            "defaultValue": "'top'",
            "description": "<P>Sets the position of the ever present row. Possible values: \"top\", \"bottom\", \"topAboveFilterRow\". </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ everpresentrowposition: 'bottom'}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/x7p4dfy5/",
            "exampleDescription": "everpresentrowposition is set to 'bottom'",
            "dataType": "string",
            "ts_dataType": "enum:GridEverPresentRowPosition",
            "exampleInit": {
                "showeverpresentrow": "true",
                "everpresentrowposition": "bottom"
            }
        },
        {
            "name": "everpresentrowheight",
            "defaultValue": "30",
            "description": "<P>Sets the height of the ever present row. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ everpresentrowheight: 35}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/c3jsogjs/",
            "exampleDescription": "everpresentrowheight is set to 40",
            "dataType": "number",
            "exampleInit": {
                "showeverpresentrow": "true",
                "everpresentrowheight": "40"
            }
        },
        {
            "name": "everpresentrowactions",
            "defaultValue": "\"add reset\"",
            "description": "<P>Sets the actions of the ever present row. Possible values: \"add\", \"reset\", \"update\", \"delete\". Instead of \"add\", you can also use \"addBottom\" which is the same as \"add\", but adds the new row to the bottom of the Grid. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ everpresentrowactions: \"add update delete reset\"}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vkLvyn69/",
            "exampleDescription": "everpresentrowactions is set to \"add update delete reset\"",
            "dataType": "string",
            "exampleInit": {
                "showeverpresentrow": "true",
                "everpresentrowactions": "add update delete reset"
            }
        },
        {
            "name": "everpresentrowactionsmode",
            "defaultValue": "\"popup\"",
            "description": "<P>Sets the actions display mode. By default they are displayed in a popup. You can set the property to \"columns\" and define columns with datafields - addButtonColumn, resetButtonColumn, updateButtonColumn and deleteButtonColumn to display the actions in columns. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ everpresentrowactionsmode: \"add update delete reset\"}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/0dmvm9vj/",
            "exampleDescription": "everpresentrowactionsmode is set to \"columns\"",
            "dataType": "string",
            "ts_dataType": "enum:GridEverPresentRowActionsMode",
            "exampleInit": {
                "showeverpresentrow": "true",
                "everpresentrowactionsmode": "columns"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showeverpresentrow=\"true\"\n       :everpresentrowactionsmode=\"'columns'\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' },\n          { datafield: 'addButtonColumn', width: 50 },\n          { datafield: 'resetButtonColumn', width: 50 }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "filterrowheight",
            "defaultValue": "36",
            "description": "<P>Sets or gets the filter row's height. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ filterrowheight: 30}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Td3Qn/",
            "exampleDescription": "filterrowheight is set to 40",
            "dataType": "number",
            "exampleInit": {
                "filterable": "true",
                "showfilterrow": "true",
                "filterrowheight": "40"
            }
        },
        {
            "name": "filtermode",
            "defaultValue": "\"default\"",
            "description": "<P>The property specifies the type of rendering of the Filter Menu. Possible values: \"default\" and \"excel\". In \"excel\" mode, the Filter Menu displays a ListBox with Checkboxes with all unique cell values. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ filtermode: 'excel'}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/LYLvA/",
            "exampleDescription": "filtermode is set to 'excel'",
            "dataType": "string",
            "ts_dataType": "enum:GridFilterMode",
            "exampleInit": {
                "filterable": "true",
                "filtermode": "excel"
            }
        },
        {
            "name": "groupsrenderer",
            "defaultValue": "null",
            "description": "<P>This function is called when a group is rendered. You can use it to customize the default group rendering. </P>",
            "example": "<pre><CODE> \r\nvar groupsrenderer = function (text, group, expanded, data) {\r\n    return \"<SPAN>\" + group + \"</SPAN>\";\r\n}\r\n$(\"#jqxGrid\").jqxGrid(\r\n{\r\n    source: source,\r\n    groupsrenderer: groupsrenderer,\r\n    columns: [\r\n        { text: 'Ship Name', datafield: 'ShipName', width: 250 },\r\n        { text: 'Ship City', datafield: 'ShipCity', width: 100 },\r\n        { text: 'Ship Country', datafield: 'ShipCountry' }\r\n    ],\r\n    groupable: true,\r\n    groups: ['ShipCity']\r\n});\r\n            </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/wzSxU/",
            "exampleDescription": "groupsrenderer is set to a custom function",
            "dataType": "function",
            "ts_dataType": "(text?: GridGroupsrenderer['text'], group?: GridGroupsrenderer['group'], expanded?: GridGroupsrenderer['expanded'], data?: GridGroupsrenderer['data']) => string",
            "exampleInit": {
                "groupsrenderer": "groupsrenderer",
                "groupable": "true",
                "groups": "['City']",
                "exampleData": "return 'City: ' + group;"
            }
        },
        {
            "name": "groupcolumnrenderer",
            "defaultValue": "null",
            "description": "<P>Sets or gets a custom renderer for the grouping columns displayed in the grouping header when the grouping feature is enabled. </P>",
            "example": "<pre><CODE>\r\nvar groupcolumnrenderer = function (text, group, expanded, data) {\r\nreturn '&lt;div style=\"padding: 5px; float: left; color: Blue;\"&gt;' + text + '&lt;/div&gt;';\r\n}\r\n$(\"#jqxgrid\").jqxGrid(\r\n{\r\n    source: source,\r\n    groupcolumnrenderer: groupcolumnrenderer,\r\n    columns: [\r\n    { text: 'Ship Name', datafield: 'ShipName', width: 250 },\r\n    { text: 'Ship City', datafield: 'ShipCity', width: 100 },\r\n    { text: 'Ship Country', datafield: 'ShipCountry' }\r\n    ],\r\n    groupable: true,\r\n    groups: ['ShipCity']\r\n});\r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/UHUNy/",
            "exampleDescription": "groupcolumnrenderer is set to a custom function",
            "dataType": "function",
            "ts_dataType": "(text?: GridGroupcolumnrenderer['text']) => string",
            "exampleInit": {
                "groupcolumnrenderer": "groupcolumnrenderer",
                "groupable": "true",
                "groups": "['City']",
                "exampleData": "return 'Grouped By: ' + text;"
            }
        },
        {
            "name": "groupsexpandedbydefault",
            "defaultValue": "false",
            "description": "<P>Sets or gets the default state of the grouped rows. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ groupsexpandedbydefault: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/66MVd/",
            "exampleDescription": "groupsexpandedbydefault is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "groupable": "true",
                "groups": "['ContactName']",
                "groupsexpandedbydefault": "true"
            }
        },
        {
            "name": "handlekeyboardnavigation",
            "defaultValue": "null",
            "description": "<P>The function is called when a key is pressed. If the result of the function is true, the default keyboard navigation will be overriden for the pressed key. </P>",
            "example": "<pre><CODE>\r\nvar handleKeys = function(event)\r\n{\r\n   var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;\r\n}\r\n$('#jqxGrid').jqxGrid({ handlekeyboardnavigation: handleKeys});\r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/SZcnP/",
            "exampleDescription": "handlekeyboardnavigation is set to a custom function",
            "dataType": "function",
            "ts_dataType": "(event: GridHandlekeyboardnavigation['event']) => boolean",
            "exampleInit": {
                "handlekeyboardnavigation": "handlekeyboardnavigation",
                "exampleData": "// const key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;\n         // alert(key);"
            }
        },
        {
            "name": "pagerrenderer",
            "defaultValue": "null",
            "description": "<P>The function is called when the Grid Pager is rendered. This allows you to customize the default rendering of the pager. </P>",
            "example": "<pre><CODE>\r\nvar pagerrenderer = function () {\r\n    var element = $(\"&lt;div style='margin-top: 5px; width: 100%; height: 100%;'&gt;&lt;/div&gt;\");\r\n    var paginginfo = $(\"#jqxgrid\").jqxGrid('getpaginginformation');\r\n    for (i = 0; i &lt; paginginfo.pagescount; i++) {\r\n        var anchor = $(\"&lt;a style='padding: 5px;' href='#\" + i + \"'&gt;\" + i + \"&lt;/a&gt;\");\r\n        anchor.appendTo(element);\r\n        anchor.click(function (event) {\r\n            var pagenum = parseInt($(event.target).text());\r\n            $(\"#jqxgrid\").jqxGrid('gotopage', pagenum);\r\n        });\r\n    }\r\n    return element;\r\n}\r\n$(\"#jqxgrid\").jqxGrid(\r\n{\r\n    width: 670,\r\n    source: source,\r\n    pagerrenderer: pagerrenderer,\r\n    sortable: true,\r\n    pageable: true,\r\n    autoheight: true,\r\n    columns: [\r\n        { text: 'Ship Name', datafield: 'ShipName', width: 250 },\r\n        { text: 'Shipped Date', datafield: 'ShippedDate', width: 230, cellsformat: 'D' },\r\n        { text: 'Freight', datafield: 'Freight', width: 130, cellsformat: 'F2', cellsalign: 'right' },\r\n        { text: 'Ship Address', datafield: 'ShipAddress', width: 350 },\r\n        { text: 'Ship City', datafield: 'ShipCity', width: 100 },\r\n        { text: 'Ship Country', datafield: 'ShipCountry', width: 100 }\r\n    ]\r\n});\r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/5fsjV/",
            "exampleDescription": "pagerrenderer is set to a custom function",
            "dataType": "function",
            "ts_dataType": "() => any[]",
            "exampleInit": {
                "pagerrenderer": "pagerrenderer",
                "pageable": "true",
                "exampleData": "const element = document.createElement('div');\n        element.innerHTML = 'Custom Render of the JqxGrid Pager!';\n        return element;"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts.</P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({rtl : true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/bnPLG/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "showdefaultloadelement",
            "defaultValue": "true",
            "description": "<P>Determines whether the Grid should display the built-in loading element or should use a DIV tag with class 'jqx-grid-load' </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showdefaultloadelement: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/BZpBE/",
            "exampleDescription": "showdefaultloadelement is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showdefaultloadelement": "false"
            }
        },
        {
            "name": "showfiltercolumnbackground",
            "defaultValue": "true",
            "description": "<P>When this property is true, the Grid adds an additional visual style to the grid cells in the filter column(s). </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showfiltercolumnbackground: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tkhgy/",
            "exampleDescription": "showfiltercolumnbackground is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "filterable": "true",
                "showfiltercolumnbackground": "false"
            }
        },
        {
            "name": "showfiltermenuitems",
            "defaultValue": "true",
            "description": "<P>Determines whether to display the filtering items in the column's menu. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showfiltermenuitems: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/XGMaf/",
            "exampleDescription": "showfiltermenuitems is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "filterable": "true",
                "showfiltermenuitems": "false"
            }
        },
        {
            "name": "showpinnedcolumnbackground",
            "defaultValue": "true",
            "description": "<P>When this property is true, the Grid adds an additional visual style to the grid cells in the pinned column(s). </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showpinnedcolumnbackground: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/HAxEf/",
            "exampleDescription": "showpinnedcolumnbackground is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showpinnedcolumnbackground": "false"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"500\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showpinnedcolumnbackground=\"false\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { pinned: true, text: 'Contact Name', datafield: 'ContactName', width: 150 },\n          { text: 'Contact Title', datafield: 'Title', width: 150 },\n          { text: 'City', datafield: 'City', width: 150 },\n          { text: 'Country', datafield: 'Country', width: 150 },\n          { text: 'Country1', width: 150 },\n          { text: 'Country2', width: 150 },\n          { text: 'Country3', width: 150 },\n          { text: 'Country4', width: 150 },\n          { text: 'Country5', width: 150 }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "showsortcolumnbackground",
            "defaultValue": "true",
            "description": "<P>When this property is true, the Grid adds an additional visual style to the grid cells in the sort column. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showsortcolumnbackground: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8m6qj/",
            "exampleDescription": "showsortcolumnbackground is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "sortable": "true",
                "showsortcolumnbackground": "false"
            }
        },
        {
            "name": "showsortmenuitems",
            "defaultValue": "true",
            "description": "<P>Determines whether to display the sort menu items. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showsortmenuitems: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FLZzf/",
            "exampleDescription": "showsortmenuitems is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "sortable": "true",
                "showsortmenuitems": "false"
            }
        },
        {
            "name": "showgroupmenuitems",
            "defaultValue": "true",
            "description": "<P>Determines whether to display the group menu items. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showgroupmenuitems: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/UcQUE/",
            "exampleDescription": "showgroupmenuitems is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "groupable": "true",
                "showgroupmenuitems": "false"
            }
        },
        {
            "name": "showrowdetailscolumn",
            "defaultValue": "true",
            "description": "<P>Shows an additional column with expand/collapse toggle buttons when the Row details feature is enabled. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showrowdetailscolumn: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/R7UYj/",
            "exampleDescription": "showrowdetailscolumn is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "rowdetails": "true",
                "showrowdetailscolumn": "false"
            }
        },
        {
            "name": "showheader",
            "defaultValue": "true",
            "description": "<P>Shows or hides the columns header. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showheader: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9RnXk/",
            "exampleDescription": "showheader is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showheader": "false"
            }
        },
        {
            "name": "showgroupsheader",
            "defaultValue": "true",
            "description": "<P>Shows or hides the groups header area. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showgroupsheader: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/uFSMD/",
            "exampleDescription": "showgroupsheader is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "groupable": "true",
                "showgroupsheader": "false"
            }
        },
        {
            "name": "showaggregates",
            "defaultValue": "false",
            "description": "<P>Shows or hides the aggregates in the grid's statusbar. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showaggregates: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8BE5w/",
            "exampleDescription": "showaggregates is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "showaggregates": "true"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showaggregates=\"true\" :showstatusbar=\"true\" :statusbarheight=\"50\"/>\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          {\n            text: 'Contact Title', datafield: 'Title', aggregates: ['count', {\n              'Owners': function (aggregatedValue, currentValue) {\n                if (currentValue == 'Owner') {\n                  return aggregatedValue + 1;\n                }\n                return aggregatedValue;\n              }\n            }]\n          },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country', aggregates: ['count'] }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "showgroupaggregates",
            "defaultValue": "false",
            "description": "<P>Shows or hides the aggregates in Grid groups. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showgroupaggregates: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/nxn074pn/",
            "exampleDescription": "showgroupaggregates is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "showgroupaggregates": "true"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :groupable=\"true\" \n       :showaggregates=\"true\" :showgroupaggregates=\"true\" :showstatusbar=\"true\" :statusbarheight=\"50\" />\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          {\n            text: 'Contact Title', datafield: 'Title', aggregates: ['count', {\n              'Owners': function (aggregatedValue, currentValue) {\n                if (currentValue == 'Owner') {\n                  return aggregatedValue + 1;\n                }\n                return aggregatedValue;\n              }\n            }]\n          },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country', aggregates: ['count'] }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "showeverpresentrow",
            "defaultValue": "false",
            "description": "<P>Shows or hides an additional row in jqxGrid which allows you to easily add new rows. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showeverpresentrow: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/xhekgmab/",
            "exampleDescription": "showeverpresentrow is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "showeverpresentrow": "true"
            }
        },
        {
            "name": "showfilterrow",
            "defaultValue": "false",
            "description": "<P>Shows or hides the filter row. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showfilterrow: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/RsV5g/",
            "exampleDescription": "showfilterrow is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "filterable": "true",
                "showfilterrow": "true"
            }
        },
        {
            "name": "showemptyrow",
            "defaultValue": "true",
            "description": "<P>Shows or hides the empty row label when the Grid has no records to display. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showemptyrow: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Lu3EF/",
            "exampleDescription": "showemptyrow is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showemptyrow": "false"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"850\" :columns=\"columns\" :autoheight=\"true\" :showemptyrow=\"false\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "showstatusbar",
            "defaultValue": "false",
            "description": "<P>Shows or hides the grid's statusbar. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showstatusbar: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zu4b7/",
            "exampleDescription": "showstatusbar is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "showstatusbar": "true"
            }
        },
        {
            "name": "statusbarheight",
            "defaultValue": "34",
            "description": "<P>Sets the statusbar's height. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ statusbarheight: 40}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/MsBb9/",
            "exampleDescription": "statusbarheight is set to 50",
            "dataType": "number",
            "exampleInit": {
                "showstatusbar": "true",
                "statusbarheight": "50"
            }
        },
        {
            "name": "showtoolbar",
            "defaultValue": "false",
            "description": "<P>Shows or hides the grid's toolbar. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ showtoolbar: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/rq8h7k6n/",
            "exampleDescription": "showtoolbar is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "showtoolbar": "true"
            }
        },
        {
            "name": "selectionmode",
            "defaultValue": "'singlerow'",
            "description": "<P>Sets or gets the selection mode. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'none'-disables the selection</CODE></PRE>\n<PRE><CODE>'singlerow'- full row selection</CODE></PRE>\n<PRE><CODE>'multiplerows' - each click selects a new row. Click on a selected row unselects it</CODE></PRE>\n<PRE><CODE>'multiplerowsextended' - multiple rows selection with drag and drop. The selection behavior resembles the selection of icons on your desktop</CODE></PRE>\n<PRE><CODE>'singlecell' - single cell selection</CODE></PRE>\n<PRE><CODE>'multiplecells' - each click selects a new cell. Click on a selected cell unselects it</CODE></PRE>\n<PRE><CODE>'multiplecellsextended' - in this mode, users can select multiple cells with a drag and drop. The selection behavior resembles the selection of icons on your desktop</CODE></PRE>\n<PRE><CODE>'multiplecellsadvanced' - this mode is the most advanced cells selection mode. In this mode, users can select multiple cells with a drag and drop. The selection behavior resembles the selection of cells in a spreadsheet</CODE></PRE>\n<PRE><CODE>'checkbox' - multiple rows selection through a checkbox.</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ selectionmode: 'none'}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ZAkyj/",
            "exampleDescription": "selectionmode is set to a custom string",
            "dataType": "string",
            "ts_dataType": "enum:GridSelectionMode",
            "exampleInit": {
                "selectionmode": "multiplerows"
            }
        },
        {
            "name": "updatefilterconditions",
            "defaultValue": "null",
            "description": "",
            "example": "",
            "exampleURL": "",
            "exampleDescription": "",
            "dataType": "function",
            "ts_dataType": "(type?: string, defaultconditions?: any) => any",
            "exampleInit": {
                "updatefilterconditions": "updatefilterconditions"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\" \n       :width=\"800\" :source=\"source\" :autoheight=\"true\" :columns=\"columns\" \n       :filterable=\"true\" :autoshowfiltericon=\"true\" :ready=\"ready\"\n       :updatefilterconditions=\"updatefilterconditions\" :updatefilterpanel=\"updatefilterpanel\">\n  &lt;/JqxGrid>\n&lt;/template>\n&lt;script>\n  import JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      addfilter: function () {\n        let filtergroup = new jqx.filter();\n        let filter_or_operator = 1;\n        let filtervalue = 'Beate';\n        let filtercondition = 'contains';\n        let filter1 = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n        filtervalue = 'Andrew';\n        filtercondition = 'contains';\n        let filter2 = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n        filtergroup.addfilter(filter_or_operator, filter1);\n        filtergroup.addfilter(filter_or_operator, filter2);\n        // add the filters.\n        this.$refs.myGrid.addfilter('firstname', filtergroup);\n        // apply the filters.\n        this.$refs.myGrid.applyfilters();\n      },\n      updatefilterconditions: function (type, defaultconditions) {\n        let stringcomparisonoperators = ['CONTAINS', 'DOES_NOT_CONTAIN'];\n        let numericcomparisonoperators = ['LESS_THAN', 'GREATER_THAN'];\n        let datecomparisonoperators = ['LESS_THAN', 'GREATER_THAN'];\n        let booleancomparisonoperators = ['EQUAL', 'NOT_EQUAL'];\n        switch (type) {\n          case 'stringfilter':\n            return stringcomparisonoperators;\n          case 'numericfilter':\n            return numericcomparisonoperators;\n          case 'datefilter':\n            return datecomparisonoperators;\n          case 'booleanfilter':\n            return booleancomparisonoperators;\n        }\n      },\n      updatefilterpanel: function (filtertypedropdown1, filtertypedropdown2, filteroperatordropdown, filterinputfield1,\n        filterinputfield2, filterbutton, clearbutton, columnfilter, filtertype, filterconditions) {\n        let index1 = 0;\n        let index2 = 0;\n        if (columnfilter != null) {\n          let filter1 = columnfilter.getfilterat(0);\n          let filter2 = columnfilter.getfilterat(1);\n          if (filter1) {\n            index1 = filterconditions.indexOf(filter1.comparisonoperator);\n            let value1 = filter1.filtervalue;\n            filterinputfield1.val(value1);\n          }\n          if (filter2) {\n            index2 = filterconditions.indexOf(filter2.comparisonoperator);\n            let value2 = filter2.filtervalue;\n            filterinputfield2.val(value2);\n          }\n        }\n        filtertypedropdown1.jqxDropDownList({ autoDropDownHeight: true, selectedIndex: index1 });\n        filtertypedropdown2.jqxDropDownList({ autoDropDownHeight: true, selectedIndex: index2 });\n      },\n      ready: function () {\n        this.addfilter();\n        let localizationObject = {\n          filterstringcomparisonoperators: ['contains', 'does not contain'],\n          // filter numeric comparison operators.\n          filternumericcomparisonoperators: ['less than', 'greater than'],\n          // filter date comparison operators.\n          filterdatecomparisonoperators: ['less than', 'greater than'],\n          // filter bool comparison operators.\n          filterbooleancomparisonoperators: ['equal', 'not equal']\n        }\n        this.$refs.myGrid.localizestrings(localizationObject);\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "updatefilterpanel",
            "defaultValue": "null",
            "description": "",
            "example": "",
            "exampleURL": "",
            "exampleDescription": "",
            "dataType": "function",
            "ts_dataType": "(filtertypedropdown1?: any, filtertypedropdown2?: any, filteroperatordropdown?: any, filterinputfield1?: any, filterinputfield2?: any, filterbutton?: any, clearbutton?: any, columnfilter?: any, filtertype?: any, filterconditions?: any) => any",
            "exampleInit": {
                "updatefilterpanel": "updatefilterpanel"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\" \n       :width=\"800\" :source=\"source\" :autoheight=\"true\" :columns=\"columns\" \n       :filterable=\"true\" :autoshowfiltericon=\"true\" :ready=\"ready\"\n       :updatefilterconditions=\"updatefilterconditions\" :updatefilterpanel=\"updatefilterpanel\">\n  &lt;/JqxGrid>\n&lt;/template>\n&lt;script>\n  import JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      addfilter: function () {\n        let filtergroup = new jqx.filter();\n        let filter_or_operator = 1;\n        let filtervalue = 'Beate';\n        let filtercondition = 'contains';\n        let filter1 = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n        filtervalue = 'Andrew';\n        filtercondition = 'contains';\n        let filter2 = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n        filtergroup.addfilter(filter_or_operator, filter1);\n        filtergroup.addfilter(filter_or_operator, filter2);\n        // add the filters.\n        this.$refs.myGrid.addfilter('firstname', filtergroup);\n        // apply the filters.\n        this.$refs.myGrid.applyfilters();\n      },\n      updatefilterconditions: function (type, defaultconditions) {\n        let stringcomparisonoperators = ['CONTAINS', 'DOES_NOT_CONTAIN'];\n        let numericcomparisonoperators = ['LESS_THAN', 'GREATER_THAN'];\n        let datecomparisonoperators = ['LESS_THAN', 'GREATER_THAN'];\n        let booleancomparisonoperators = ['EQUAL', 'NOT_EQUAL'];\n        switch (type) {\n          case 'stringfilter':\n            return stringcomparisonoperators;\n          case 'numericfilter':\n            return numericcomparisonoperators;\n          case 'datefilter':\n            return datecomparisonoperators;\n          case 'booleanfilter':\n            return booleancomparisonoperators;\n        }\n      },\n      updatefilterpanel: function (filtertypedropdown1, filtertypedropdown2, filteroperatordropdown, filterinputfield1,\n        filterinputfield2, filterbutton, clearbutton, columnfilter, filtertype, filterconditions) {\n        let index1 = 0;\n        let index2 = 0;\n        if (columnfilter != null) {\n          let filter1 = columnfilter.getfilterat(0);\n          let filter2 = columnfilter.getfilterat(1);\n          if (filter1) {\n            index1 = filterconditions.indexOf(filter1.comparisonoperator);\n            let value1 = filter1.filtervalue;\n            filterinputfield1.val(value1);\n          }\n          if (filter2) {\n            index2 = filterconditions.indexOf(filter2.comparisonoperator);\n            let value2 = filter2.filtervalue;\n            filterinputfield2.val(value2);\n          }\n        }\n        filtertypedropdown1.jqxDropDownList({ autoDropDownHeight: true, selectedIndex: index1 });\n        filtertypedropdown2.jqxDropDownList({ autoDropDownHeight: true, selectedIndex: index2 });\n      },\n      ready: function () {\n        this.addfilter();\n        let localizationObject = {\n          filterstringcomparisonoperators: ['contains', 'does not contain'],\n          // filter numeric comparison operators.\n          filternumericcomparisonoperators: ['less than', 'greater than'],\n          // filter date comparison operators.\n          filterdatecomparisonoperators: ['less than', 'greater than'],\n          // filter bool comparison operators.\n          filterbooleancomparisonoperators: ['equal', 'not equal']\n        }\n        this.$refs.myGrid.localizestrings(localizationObject);\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n<PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;\r\n</CODE></PRE>\r\n</CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/HgGqs/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "toolbarheight",
            "defaultValue": "34",
            "description": "<P>Sets or gets the toolbar's height. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ toolbarheight: 40}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Bbm33/",
            "exampleDescription": "toolbarheight is set to 40",
            "dataType": "number",
            "exampleInit": {
                "showtoolbar": "true",
                "toolbarheight": "40"
            }
        },
        {
            "name": "autoheight",
            "defaultValue": "false",
            "description": "<P>Sets or gets the height of the grid to be equal to the summary height of the grid rows. This option should be set when the Grid is in paging mode. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ autoheight: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/cBeq7/",
            "exampleDescription": "autoheight is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "autoheight": "true"
            }
        },
        {
            "name": "autorowheight",
            "defaultValue": "false",
            "description": "<P>This property works along with the \"autoheight\" property. When it is set to true, the height of the Grid rows is dynamically changed depending on the cell values. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ autorowheight: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/QheNZ/",
            "exampleDescription": "autorowheight is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "autoheight": "true",
                "autorowheight": "true"
            }
        },
        {
            "name": "columnsheight",
            "defaultValue": "32",
            "description": "<P>Sets or gets the columns height. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ columnsheight: 30}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/LspfG/",
            "exampleDescription": "columnsheight is set to 40",
            "dataType": "number",
            "exampleInit": {
                "columnsheight": "40"
            }
        },
        {
            "name": "deferreddatafields",
            "defaultValue": "[]",
            "description": "<P>Determines the cell values displayed in a tooltip next to the scrollbar when the \"scrollmode\" is set to \"deferred\". </P>",
            "example": "<pre><CODE>\r\n$(\"#jqxGrid\").jqxGrid(\r\n{\r\n    source: adapter,\r\n    scrollmode: 'deferred',\r\n    deferreddatafields: ['firstname', 'lastname', 'productname'],\r\n    columns: [\r\n        { text: 'First Name', datafield: 'firstname', width: 100 },\r\n        { text: 'Last Name', datafield: 'lastname', width: 100 },\r\n        { text: 'Product', datafield: 'productname', width: 180 },\r\n        { text: 'Quantity', datafield: 'quantity', width: 80, cellsalign: 'right' },\r\n        { text: 'Unit Price', datafield: 'price', width: 80, cellsalign: 'right', cellsformat: 'c2' },\r\n        { text: 'Total', datafield: 'total', cellsalign: 'right', cellsformat: 'c2' }\r\n    ]\r\n});\r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/B2Gma/",
            "exampleDescription": "deferreddatafields is set to ['firstname', 'lastname', 'productname']",
            "dataType": "Array",
            "ts_dataType": "Array<string>",
            "exampleInit": {
                "autoheight": "false",
                "height": "100",
                "scrollmode": "deferred",
                "deferreddatafields": "['ContactName']"
            }
        },
        {
            "name": "groupsheaderheight",
            "defaultValue": "34",
            "description": "<P>Sets or gets the height of the Grid Groups Header. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ groupsheaderheight: 40}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FrwX2/",
            "exampleDescription": "groupsheaderheight is set to 60",
            "dataType": "number",
            "exampleInit": {
                "groupable": "true",
                "groupsheaderheight": "60"
            }
        },
        {
            "name": "groupindentwidth",
            "defaultValue": "20",
            "description": "<P>Sets or gets the group indent size. This size is used when the grid is grouped. This is the size of the columns with expand/collapse toggle buttons. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ groupindentwidth: 30}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zckSX/",
            "exampleDescription": "groupindentwidth is set to 40",
            "dataType": "number",
            "exampleInit": {
                "groupable": "true",
                "groupindentwidth": "40"
            }
        },
        {
            "name": "height",
            "defaultValue": "400",
            "description": "<P>Sets or gets the Grid's height. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ height: 250 }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/35kU5/",
            "exampleDescription": "height is set to 300",
            "dataType": "string | number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "autoheight": "false",
                "height": "500"
            }
        },
        {
            "name": "pagerheight",
            "defaultValue": "40",
            "description": "<P>Sets or gets the height of the Grid Pager. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ pagerheight: 30}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/f2wZu/",
            "exampleDescription": "pagerheight is set to 50",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "pageable": "true",
                "pagerheight": "50"
            }
        },
        {
            "name": "rowsheight",
            "defaultValue": "32",
            "description": "<P>Sets or gets the height of the grid rows. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ rowsheight: 30}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ayTST/",
            "exampleDescription": "rowsheight is set to 30",
            "dataType": "number",
            "exampleInit": {
                "rowsheight": "30"
            }
        },
        {
            "name": "scrollbarsize",
            "defaultValue": "15",
            "description": "<P>Sets or gets the scrollbars size. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ scrollbarsize: 17}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/mtY3V/",
            "exampleDescription": "scrollbarsize is set to 20",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "autoheight": "false",
                "height": "100",
                "scrollbarsize": "20"
            }
        },
        {
            "name": "scrollmode",
            "defaultValue": "\"default\"",
            "description": "<P>Determines the scrolling mode. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'default'</CODE></PRE>\n<PRE><CODE>'logical'- the movement of the scrollbar thumb is by row, not by pixel</CODE></PRE>\n<PRE><CODE>'deferred'-content is stationary when the user drags the Thumb of a ScrollBar</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ scrollmode: 'logical'}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/VDunt/",
            "exampleDescription": "scrollmode is set to 'logical'",
            "dataType": "String",
            "ts_dataType": "enum:GridScrollMode",
            "exampleInit": {
                "autoheight": "false",
                "height": "100",
                "scrollmode": "logical"
            }
        },
        {
            "name": "scrollfeedback",
            "defaultValue": "null",
            "description": "When the \"scrollmode\" is set to \"deferred\", the \"scrollfeedback\" function may be used to display custom UI Tooltip next to the scrollbar.",
            "example": "<pre>$(<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"#jqxgrid\"</SPAN>).jqxGrid(<DIV>{<DIV>    source: dataAdapter,<DIV>    altrows: true,<DIV>    sortable: true,<DIV>    scrollmode: <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'deferred'</SPAN>,<DIV>    scrollfeedback: function(row)<DIV>    {<DIV>        return <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;table style=<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"height: 150px;\"&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;tr&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;td&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;img src=\"../../images/t-shirts/' + row.pic + '\"</SPAN>/&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/td&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/tr&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;tr&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;td&gt;</SPAN>' + row.label + '<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/td&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/tr&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/table&gt;</SPAN>'</SPAN>;<DIV>    },<DIV>    rowsheight: 115,<DIV>    columns: [<DIV>        {<DIV>            text: <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'Image', datafield: 'pic'</SPAN>, width: 115, cellsrenderer: function (row, column, value) {<DIV>                return <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;img src=<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"../../images/t-shirts/' + value + '\"</SPAN>/&gt;</SPAN>'</SPAN>;<DIV>            }<DIV>        },<DIV>        {<DIV>            text: <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'Title', datafield: 'label'</SPAN>, width: 250<DIV>        },<DIV>        {<DIV>            text: <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'Price', cellsformat: 'c2', datafield: 'price'</SPAN><DIV>        }<DIV>    ]<DIV>});<DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/DuPX3/",
            "exampleDescription": "scrollfeedback is set to a custom function",
            "dataType": "function",
            "ts_dataType": "(row: GridScrollfeedback['row']) => string",
            "exampleInit": {
                "autoheight": "false",
                "height": "100",
                "scrollmode": "deferred",
                "scrollfeedback": "scrollfeedback",
                "exampleData": "return 'row ' + row.uid;"
            }
        },
        {
            "name": "width",
            "defaultValue": "600",
            "description": "<P>Sets or gets the Grid's width. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ width: 250 }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/C3vQb/",
            "exampleDescription": "width is set to 500",
            "dataType": "string | number",
            "ts_dataType": "string | number"
        },
        {
            "name": "autosavestate",
            "defaultValue": "false",
            "description": "<P>Determines whether the Grid automatically saves its current state. </P>",
            "example": "<pre><CODE>$(\"#jqxGrid\").jqxGrid({ autosavestate: true});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dnBPG/",
            "exampleDescription": "autosavestate is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "autoloadstate": "true",
                "autosavestate": "true"
            }
        },
        {
            "name": "autoloadstate",
            "defaultValue": "false",
            "description": "<P>Determines whether the Grid automatically loads its current state(if there's already saved one). The Grid's state is loaded when the page is refreshed. </P>",
            "example": "<pre><CODE>$(\"#jqxGrid\").jqxGrid({ autoloadstate: true});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/MuN7j/",
            "exampleDescription": "autoloadstate is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "autoloadstate": "true",
                "autosavestate": "true"
            }
        },
        {
            "name": "columns",
            "defaultValue": "[]",
            "description": "<P>Sets the Grid columns. </P>",
            "example": "<pre><CODE>\r\n$(\"#jqxGrid\").jqxGrid(\r\n{\r\n    source: source,\r\n    columns: [\r\n        { text: 'Ship Name', datafield: 'ShipName', width: 250 },\r\n        { text: 'Shipped Date', datafield: 'ShippedDate', width: 230, cellsformat: 'D' },\r\n        { text: 'Freight', datafield: 'Freight', width: 130, cellsformat: 'F2', cellsalign: 'right' },\r\n        { text: 'Ship Address', datafield: 'ShipAddress', width: 350 },\r\n        { text: 'Ship City', datafield: 'ShipCity', width: 100 },\r\n        { text: 'Ship Country', datafield: 'ShipCountry', width: 100 }\r\n    ]\r\n});                        \r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/z9br38f0/",
            "exampleDescription": "columns is set to a custom array",
            "dataType": "Array",
            "ts_dataType": "GridColumn[]",
            "subProperties": [
                {
                    "name": "enabletooltips",
                    "dataType": "boolean",
                    "defaultValue": true
                },
                {
                    "name": "clipboard",
                    "dataType": "boolean",
                    "defaultValue": true
                },
                {
                    "name": "nullable",
                    "dataType": "boolean",
                    "defaultValue": null
                },
                {
                    "name": "draggable",
                    "dataType": "boolean",
                    "defaultValue": true
                },
                {
                    "name": "exportable",
                    "dataType": "boolean",
                    "defaultValue": true
                },
                {
                    "name": "rendered",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "filtercondition",
                    "dataType": "string",
                    "defaultValue": null
                },
                {
                    "name": "filtertype",
                    "dataType": "string",
                    "defaultValue": "default"
                },
                {
                    "name": "createfilterwidget",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "menu",
                    "dataType": "boolean",
                    "defaultValue": true
                },
                {
                    "name": "aggregatesrenderer",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "aggregates",
                    "dataType": "Array",
                    "defaultValue": null
                },
                {
                    "name": "cellvaluechanging",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "cellbeginedit",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "cellendedit",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "sortable",
                    "dataType": "boolean",
                    "defaultValue": true
                },
                {
                    "name": "hideable",
                    "dataType": "boolean",
                    "defaultValue": true
                },
                {
                    "name": "pinned",
                    "dataType": "boolean",
                    "defaultValue": false
                },
                {
                    "name": "datafield",
                    "dataType": "string",
                    "defaultValue": null
                },
                {
                    "name": "displayfield",
                    "dataType": "string",
                    "defaultValue": null
                },
                {
                    "name": "text",
                    "dataType": "string",
                    "defaultValue": ""
                },
                {
                    "name": "createfilterpanel",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "destroyeverpresentrowwidget",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "validateeverpresentrowwidgetvalue",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "initeverpresentrowwidget",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "createeverpresentrowwidget",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "filterdelay",
                    "dataType": "number",
                    "defaultValue": 800
                },
                {
                    "name": "columngroup",
                    "dataType": "string",
                    "defaultValue": null
                },
                {
                    "name": "renderer",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "cellsrenderer",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "hidden",
                    "dataType": "boolean",
                    "defaultValue": false
                },
                {
                    "name": "groupable",
                    "dataType": "boolean",
                    "defaultValue": true
                },
                {
                    "name": "threestatecheckbox",
                    "dataType": "boolean",
                    "defaultValue": false
                },
                {
                    "name": "buttonclick",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "columntype",
                    "dataType": "string",
                    "defaultValue": null
                },
                {
                    "name": "editable",
                    "dataType": "boolean",
                    "defaultValue": "true"
                },
                {
                    "name": "width",
                    "dataType": "string",
                    "defaultValue": "auto"
                },
                {
                    "name": "minwidth",
                    "dataType": "string",
                    "defaultValue": 25
                },
                {
                    "name": "maxwidth",
                    "dataType": "string",
                    "defaultValue": "auto"
                },
                {
                    "name": "cellsformat",
                    "dataType": "string",
                    "defaultValue": ""
                },
                {
                    "name": "cellsalign",
                    "dataType": "string",
                    "defaultValue": "left"
                },
                {
                    "name": "align",
                    "dataType": "string",
                    "defaultValue": "left"
                },
                {
                    "name": "filterable",
                    "dataType": "boolean",
                    "defaultValue": true
                },
                {
                    "name": "createwidget",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "createeditor",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "initeditor",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "resizable",
                    "dataType": "boolean",
                    "defaultValue": true
                },
                {
                    "name": "filteritems",
                    "dataType": "Array",
                    "defaultValue": []
                },
                {
                    "name": "cellclassname",
                    "dataType": "string",
                    "defaultValue": ""
                },
                {
                    "name": "classname",
                    "dataType": "string",
                    "defaultValue": ""
                },
                {
                    "name": "validation",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "geteditorvalue",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "destroyeditor",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "destroywidget",
                    "dataType": "function",
                    "defaultValue": null
                },
                {
                    "name": "initwidget",
                    "dataType": "function",
                    "defaultValue": null
                }
            ]
        },
        {
            "name": "columngroups",
            "defaultValue": "[]",
            "description": "<UL><LI>parentgroup - sets the column header's parent group name. \r\n<LI>name - sets the column header's name. \r\n<LI>align - sets the column header's alignment to 'left', 'center' or 'right'. </LI></UL>",
            "example": "<pre><CODE>\r\n$(\"#jqxgrid\").jqxGrid(\r\n{\r\n    source: dataAdapter,\r\n    pageable: true,\r\n    autorowheight: true,\r\n    altrows: true,\r\n    columnsresize: true,\r\n    columns: [\r\n        { text: 'Supplier Name',  cellsalign: 'center', align: 'center', datafield: 'SupplierName', width: 110 },\r\n        { text: 'Name', columngroup: 'ProductDetails', cellsalign: 'center', align: 'center', datafield: 'ProductName', width: 120 },\r\n        { text: 'Quantity', columngroup: 'ProductDetails', datafield: 'Quantity', cellsformat: 'd', cellsalign: 'center', align: 'center', width: 80 },\r\n        { text: 'Freight', columngroup: 'OrderDetails', datafield: 'Freight', cellsformat: 'd', cellsalign: 'center', align: 'center', width: 100 },\r\n        { text: 'OrderDate', columngroup: 'OrderDetails', cellsalign: 'center', align: 'center', cellsformat: 'd', datafield: 'OrderDate', width: 100 },\r\n        { text: 'OrderAddress', columngroup: 'OrderDetails', cellsalign: 'center', align: 'center', datafield: 'OrderAddress', width: 120 },\r\n        { text: 'Price', columngroup: 'ProductDetails', datafield: 'Price', cellsformat: 'c2', align: 'center', cellsalign: 'center', width: 70 },\r\n        { text: 'Address', columngroup: 'Location', cellsalign: 'center', align: 'center', datafield: 'Address', width: 120 },\r\n        { text: 'City', columngroup: 'Location', cellsalign: 'center', align: 'center', datafield: 'City', width: 80 }\r\n    ],\r\n    columngroups: \r\n    [\r\n        { text: 'Product Details', align: 'center', name: 'ProductDetails' },\r\n        { text: 'Order Details', parentgroup: 'ProductDetails', align: 'center', name: 'OrderDetails' },\r\n        { text: 'Location', align: 'center', name: 'Location' }\r\n    ]\r\n});\r\n</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4NtrR/",
            "exampleDescription": "columngroups is set to a custom array",
            "dataType": "Array",
            "ts_dataType": "Array<any>",
            "subProperties": [
                {
                    "name": "text",
                    "dataType": "string",
                    "defaultValue": ""
                },
                {
                    "name": "parentgroup",
                    "dataType": "string",
                    "defaultValue": ""
                },
                {
                    "name": "name",
                    "dataType": "string",
                    "defaultValue": ""
                }
            ],
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :columngroups=\"columngroups\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName', columngroup: 'ContactInfo' },\n          { text: 'Contact Title', datafield: 'Title', columngroup: 'ContactInfo' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        columngroups: [{ text: 'Contact Info', name: 'ContactInfo', align: 'center' }]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n&lt;/script>"
            }

        },
        {
            "name": "columnsmenu",
            "defaultValue": "true",
            "description": "<P>Enables or disables the columns dropdown menu. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ columnsmenu: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/YpDYq/",
            "exampleDescription": "columnsmenu is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "sortable": "true",
                "columnsmenu": "false"
            }
        },
        {
            "name": "columnsresize",
            "defaultValue": "false",
            "description": "<P>Enables or disables the columns resizing. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ columnsresize: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ndn6X/",
            "exampleDescription": "columnsresize is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "columnsresize": "true"
            }
        },
        {
            "name": "columnsautoresize",
            "defaultValue": "true",
            "description": "<P>Enables or disables the columns resizing when the column's border is double-clicked and <CODE>columnsresize</CODE> is set to true. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ columnsautoresize: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/s29dv5vv/",
            "exampleDescription": "columnsautoresize is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "columnsresize": "true",
                "columnsautoresize": "false"
            }
        },
        {
            "name": "columnsreorder",
            "defaultValue": "false",
            "description": "<P>Enables or disables the columns reordering. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ columnsreorder: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/nrp6f/",
            "exampleDescription": "columnsreorder is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "columnsreorder": "true"
            }
        },
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Enables or disables the Grid's plugin. </P>",
            "example": "<pre><CODE>$(\"#jqxGrid\").jqxGrid({ disabled: true});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/NaWDx/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "editable",
            "defaultValue": "false",
            "description": "<P>The editable property enables or disables the Grid editing feature. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ editable: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tzHXR/",
            "exampleDescription": "editable is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "editable": "true"
            }
        },
        {
            "name": "editmode",
            "defaultValue": "'selectedcell'",
            "description": "<P>The editmode property specifies the action that the end-user should make to open an editor. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'click' - Marks the clicked cell as selected and shows the editor. The editor’s value is equal to the cell’s value</CODE></PRE>\n<PRE><CODE>'selectedcell' - Marks the cell as selected. A second click on the selected cell shows the editor. The editor’s value is equal to the cell’s value</CODE></PRE>\n<PRE><CODE>'selectedrow' - A second click on a selected row shows the row editors.</CODE></PRE>\n<PRE><CODE>'dblclick' - Marks the clicked cell as selected and shows the editor. The editor’s value is equal to the cell’s value</CODE></PRE>\n<PRE><CODE>'programmatic' - Cell editors are activated and deactivated only through the API(see begincelledit and endcelledit methods)</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ editmode: 'click'}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/5aGqc/",
            "exampleDescription": "editmode is set to 'dblclick'",
            "dataType": "string",
            "ts_dataType": "enum:GridEditMode",
            "exampleInit": {
                "editable": "true",
                "editmode": "dblclick"
            }
        },
        {
            "name": "filter",
            "defaultValue": "null",
            "description": "<P>Custom Filtering function. It overrides the built-in Filtering. When the user filters, the Grid calls this function, when it is implemented. The function is expected to return a boolean value or undefined. </P>\n\r\n<UL><LI>cellValue - current cell's value. \r\n<LI>rowData - JSON object which contains the current row's data. \r\n<LI>dataField - filter column's field. \r\n<LI>filterGroup - group of filters. \r\n<LI>defaultFilterResult - the default filter result. </LI></UL>",
            "example": "<pre><CODE>\r\n$(\"#jqxgrid\").jqxGrid(\r\n{\r\n    width: 850,\r\n    source: dataAdapter,\r\n    filterable: true,\r\n    // cellValue - cell's current value, row data - row's data, data field - column's data field, filterGroup - group of filters, defaultFilterResult - the built-in boolean evaluated result-\r\n    filter: function(cellValue, rowData, dataField, filterGroup, defaultFilterResult)\r\n    {\r\n        // implements a custom filter for the \"name\" field. \r\n        if (dataField === \"name\") {\r\n            var filters = filterGroup.getfilters();\r\n            for (var i = 0; i &lt; filters.length; i++) {\r\n                var filter = filters[i];\r\n                var filterValue = filter.value;\r\n                var filterCondition = filter.condition;\r\n                var filterType = filter.type;\r\n                if (cellValue.indexOf(\"Antoni\") &gt;= 0) {\r\n                    return true;\r\n                }\r\n                if (cellValue.indexOf(\"Nancy\") &gt;= 0) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    selectionmode: 'multiplecellsextended',\r\n    columns: [\r\n        { text: 'Name', columntype: 'textbox', filtertype: 'input', datafield: 'name', width: 215 },\r\n        {\r\n            text: 'Product', filtertype: 'checkedlist', datafield: 'productname', width: 220\r\n        },\r\n        { text: 'Available', datafield: 'available', columntype: 'checkbox', filtertype: 'bool', width: 67 },\r\n        { text: 'Ship Date', datafield: 'date', filtertype: 'range', width: 210, cellsalign: 'right', cellsformat: 'd' },\r\n        { text: 'Qty.', datafield: 'quantity', filtertype: 'number',  cellsalign: 'right' }\r\n    ]\r\n});                                \r\n                                </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/bn4okvy3/",
            "exampleDescription": "filter is set to custom function",
            "dataType": "Function",
            "ts_dataType": "(cellValue?: GridFilter['cellValue'], rowData?: GridFilter['rowData'], dataField?: GridFilter['dataField'], filterGroup?: GridFilter['filterGroup'], defaultFilterResult?: GridFilter['defaultFilterResult']) => any",
            "exampleName": "jqxgrid_filtering",
            "exampleInit": {
                "filterable": "true",
                "filter": "filter",
                "exampleData": "// implements a custom filter for the \"Contactname\" field. \n        if (dataField === \"ContactName\") {\n          var filters = filterGroup.getfilters();\n          for (var i = 0; i &lt; filters.length; i++) {\n            var filter = filters[i];\n            var filterValue = filter.value;\n            var filterCondition = filter.condition;\n            var filterType = filter.type;\n\n            if (cellValue.indexOf(\"Ana\") >= 0) {\n              return true;\n            }\n          }\n\n          return false;\n        }"
            }
        },
        {
            "name": "filterable",
            "defaultValue": "false",
            "description": "<P>Enables or disables the Grid Filtering feature. When the value of this property is true, the Grid displays a filtering panel in the columns popup menus. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ filterable: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/X68HN/",
            "exampleDescription": "filterable is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "filterable": "true"
            }
        },
        {
            "name": "groupable",
            "defaultValue": "false",
            "description": "<P>This property enables or disables the grouping feature. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ groupable: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/HVuGf/",
            "exampleDescription": "groupable is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "groupable": "true",
                "groups": "['ContactName']"
            }
        },
        {
            "name": "groups",
            "defaultValue": "[]",
            "description": "<P>Sets or gets the Grid groups when the Grouping feature is enabled. </P>",
            "example": "<pre><CODE>          \r\n$(\"#jqxGrid\").jqxGrid(\r\n{\r\n    source: source,\r\n    columns: [\r\n        { text: 'Ship Name', datafield: 'ShipName', width: 250 },\r\n        { text: 'Ship City', datafield: 'ShipCity', width: 100 },\r\n        { text: 'Ship Country', datafield: 'ShipCountry' }\r\n    ],\r\n    groupable: true,\r\n    groups: ['ShipCity']\r\n});\r\n            </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/rVT4R/",
            "exampleDescription": "groups is set to ['firstname']",
            "dataType": "Array",
            "ts_dataType": "Array<string>",
            "exampleInit": {
                "groupable": "true",
                "groups": "['ContactName']"
            }
        },
        {
            "name": "horizontalscrollbarstep",
            "defaultValue": "5",
            "description": "<P>Sets or gets the scrollbar's step when the user clicks the scroll arrows. </P>",
            "example": "<pre><CODE>$(\"#jqxGrid\").jqxGrid({ horizontalscrollbarstep: 15});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/EgVy7/",
            "exampleDescription": "horizontalscrollbarstep is set to 60",
            "dataType": "number",
            "exampleInit": {
                "horizontalscrollbarstep": "60"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"400\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :horizontalscrollbarstep=\"200\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName', width: '100' },\n          { text: 'Contact Title', datafield: 'Title', width: '100' },\n          { text: 'City', datafield: 'City', width: '100' },\n          { text: 'Country', datafield: 'Country', width: '100' },\n          { text: 'Column5', width: '100' },\n          { text: 'Column6', width: '100' },\n          { text: 'Column7', width: '100' },\n          { text: 'Column8', width: '100' },\n          { text: 'Column9', width: '100' },\n          { text: 'Column10', width: '100' },\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "horizontalscrollbarlargestep",
            "defaultValue": "50",
            "description": "<P>Sets or gets the scrollbar's large step. This property specifies the step with which the horizontal scrollbar's value is changed when the user clicks the area above or below the thumb. </P>",
            "example": "<pre><CODE>$(\"#jqxGrid\").jqxGrid({ horizontalscrollbarlargestep: 50});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/srGsL/",
            "exampleDescription": "horizontalscrollbarlargestep is set to 600",
            "dataType": "number",
            "exampleInit": {
                "horizontalscrollbarlargestep": "600"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"400\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :horizontalscrollbarlargestep=\"600\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName', width: '100' },\n          { text: 'Contact Title', datafield: 'Title', width: '100' },\n          { text: 'City', datafield: 'City', width: '100' },\n          { text: 'Country', datafield: 'Country', width: '100' },\n          { text: 'Column5', width: '100' },\n          { text: 'Column6', width: '100' },\n          { text: 'Column7', width: '100' },\n          { text: 'Column8', width: '100' },\n          { text: 'Column9', width: '100' },\n          { text: 'Column10', width: '100' },\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "initrowdetails",
            "defaultValue": "null",
            "description": "<P>This function is called when the user expands the row details and the details are going to be rendered. </P>",
            "example": "<pre><CODE>\r\n                        var initrowdetails = function (index) {\r\n                            // your row details initialization code here. The index is the index of the expanded row with details.\r\n                        }\r\n                        $('#jqxGrid').jqxGrid({ initrowdetails: initrowdetails}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/bHR3b/",
            "exampleDescription": "initrowdetails is set to a custom function",
            "dataType": "function",
            "ts_dataType": "(index?: number, parentElement?: any, gridElement?: any, datarecord?: any) => void",
            "exampleName": "jqxgrid_rowdetails",
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" \n       :rowdetails=\"true\" :initrowdetails=\"initrowdetails\" :rowdetailstemplate=\"rowdetailstemplate\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        rowdetailstemplate: {\n          rowdetails: \"&lt;div style='margin: 10px;'>Row Details&lt;/div>\",\n          rowdetailsheight: 50\n        }\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      \n      initrowdetails: function(index, parentElement, gridElement, datarecord) {\n        parentElement.children[0].innerHTML = 'Details: ' + index;\n      }      \n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "keyboardnavigation",
            "defaultValue": "true",
            "description": "<P>Enables or disables the keyboard navigation. </P>",
            "example": "<pre><CODE>$(\"#jqxGrid\").jqxGrid({ keyboardnavigation: false});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ftGjN/",
            "exampleDescription": "keyboardnavigation is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "keyboardnavigation": "false"
            }
        },
        {
            "name": "localization",
            "defaultValue": "null",
            "description": "<P>Localizes the Grid.</P>",
            "example": "<pre><CODE>$(\"#jqxGrid\").jqxGrid({ localization: localization});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ENbB6/",
            "exampleDescription": "localization is set to custom object",
            "dataType": "object",
            "ts_dataType": "GridLocalizationobject",
            "exampleName": "jqxgrid_localization",
            "exampleInit": {
                "pageable": "true",
                "localization": "localization",
                "exampleData": "getLocalization('de')"
            }
        },
        {
            "name": "pagesize",
            "defaultValue": "10",
            "description": "<P>Sets or gets the number of visible rows per page when the Grid paging is enabled. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ pagesize: 20}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/kQQqa/",
            "exampleDescription": "pagesize is set to 30",
            "dataType": "number",
            "exampleInit": {
                "pageable": "true",
                "pagesize": "2"
            }
        },
        {
            "name": "pagesizeoptions",
            "defaultValue": "['5', '10', '20']",
            "description": "<P>Sets or gets the available page size options. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ pagesizeoptions: ['10', '20', '30']}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Hz8GS/",
            "exampleDescription": "pagesizeoptions is set to ['15', '30', '50']",
            "dataType": "Array",
            "ts_dataType": "Array<number | string>",
            "exampleInit": {
                "pageable": "true",
                "pagesizeoptions": "['15', '30', '50']"
            }
        },
        {
            "name": "pagermode",
            "defaultValue": "\"default\"",
            "description": "<P>Sets or gets the rendering mode of the pager. Available values - \"simple\" and \"default\". </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ pagermode: \"simple\"}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/bqC8C/",
            "exampleDescription": "pagermode is set to \"simple\"",
            "dataType": "string",
            "ts_dataType": "'simple' | 'default'",
            "exampleInit": {
                "pageable": "true",
                "pagermode": "simple"
            }
        },
        {
            "name": "pagerbuttonscount",
            "defaultValue": "5",
            "description": "<P>Sets or gets the buttons displayed in the pager when the \"pagermode\" is set to \"simple\". </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ pagerbuttonscount: 3}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/wdBwt/",
            "exampleDescription": "pagerbuttonscount is set to 10",
            "dataType": "number",
            "exampleInit": {
                "pageable": "true",
                "pagerbuttonscount": "10"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :pageable=\"true\"\n       :pagermode=\"'simple'\" :pagesize=\"1\" :pagerbuttonscount=\"10\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico'],\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "pageable",
            "defaultValue": "false",
            "description": "<P>Enables or disables the Grid Paging feature. When the value of this property is true, the Grid displays a pager below the rows. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ pageable: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ugkH2/",
            "exampleDescription": "pageable is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "pageable": "true"
            }
        },
        {
            "name": "rowdetails",
            "defaultValue": "false",
            "description": "<P>Enables or disables the row details. When this option is enabled, the Grid can show additional information below each grid row. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ rowdetails: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/A59WK/",
            "exampleDescription": "rowdetails is set to true",
            "dataType": "boolean",
            "exampleName": "jqxgrid_rowdetails",
            "exampleInit": {
                "rowdetails": "rowdetails"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" \n       :rowdetails=\"true\" :initrowdetails=\"initrowdetails\" :rowdetailstemplate=\"rowdetailstemplate\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        rowdetailstemplate: {\n          rowdetails: \"&lt;div style='margin: 10px;'>Row Details&lt;/div>\",\n          rowdetailsheight: 50\n        }\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      initrowdetails: function(index, parentElement, gridElement, datarecord) {\n        parentElement.children[0].innerHTML = 'Details: ' + index;\n      }      \n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "rowdetailstemplate",
            "defaultValue": "null",
            "description": "<P>Determines the template of the row details. The rowdetails field specifies the HTML used for details. The rowdetailsheight specifies the height of the details. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ rowdetailstemplate: { rowdetails: \"<PRE class=code style=\"MARGIN: 10px\"><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;div style=<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'margin: 10px;'&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;ul style='margin-left: 30px;'&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;li class='title'&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/li&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;li&gt;</SPAN>Notes<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/li&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/ul&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;div class='information'&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/div&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;div class='notes'</SPAN>&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/div&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/div&gt;</SPAN><DIV></DIV></PRE>\", rowdetailsheight: 200 }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/jKPLJ/",
            "exampleDescription": "rowdetailstemplate is set to a custom object",
            "dataType": "object",
            "ts_dataType": "any",
            "exampleName": "jqxgrid_rowdetails",
            "exampleInit": {
                "rowdetailstemplate": "rowdetailstemplate"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" \n       :rowdetails=\"true\" :initrowdetails=\"initrowdetails\" :rowdetailstemplate=\"rowdetailstemplate\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        rowdetailstemplate: {\n          rowdetails: \"&lt;div style='margin: 10px;'>Row Details&lt;/div>\",\n          rowdetailsheight: 50\n        }\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      initrowdetails: function(index, parentElement, gridElement, datarecord) {\n        parentElement.children[0].innerHTML = 'Details: ' + index;\n      }      \n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "ready",
            "defaultValue": "null",
            "description": "<P>This function is called when the grid is initialized and the binding is complete. </P>",
            "example": "<pre><CODE>\r\n$(\"#jqxgrid\").jqxGrid(\r\n{\r\n    source: source, \r\n    ready: function()\r\n    {\r\n        $(\"#jqxGrid\").jqxGrid('sortby', 'firstname', 'asc');     \r\n    },\r\n    columns: [\r\n        { text: 'First Name', datafield: 'firstname', width: 100 },\r\n        { text: 'Last Name', datafield: 'lastname', width: 100 },\r\n        { text: 'Product', datafield: 'productname', width: 180 },\r\n        { text: 'Quantity', datafield: 'quantity', width: 80, cellsalign: 'right' },\r\n        { text: 'Unit Price', datafield: 'price', width: 90, cellsalign: 'right', cellsformat: 'c2' },\r\n        { text: 'Total', datafield: 'total', cellsalign: 'right', cellsformat: 'c2' }\r\n    ]\r\n});                        \r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Xr4LS/",
            "exampleDescription": "ready is set to a custom function",
            "dataType": "function",
            "ts_dataType": "() => void",
            "exampleInit": {
                "ready": "ready",
                "exampleData": "alert('ready!')"
            }
        },
        {
            "name": "rendered",
            "defaultValue": "null",
            "description": "<P>Callback function which is called when the jqxGrid's render function is called either internally or not. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ rendered: function(){//to do}}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/5DcnB/",
            "exampleDescription": "rendered is set to a custom function",
            "dataType": "function",
            "ts_dataType": "(type: any) => void",
            "exampleInit": {
                "rendered": "rendered",
                "exampleData": "alert('rendered!')"
            }
        },
        {
            "name": "renderstatusbar",
            "defaultValue": "null",
            "description": "<P>Callback function which allows you to customize the rendering of the Grid's statusbar. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ renderstatusbar: function(statusbar){//to do}}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/RVfRv/",
            "exampleDescription": "renderstatusbar is set to a custom function",
            "dataType": "function",
            "ts_dataType": "(statusbar?: GridRenderstatusbar['statusbar']) => void",
            "exampleInit": {
                "showstatusbar": "true",
                "renderstatusbar": "renderstatusbar",
                "exampleData": "statusbar.append($(\"&lt;span style='margin: 5px;'>Status Bar&lt;/span>\"));"
            }
        },
        {
            "name": "rendertoolbar",
            "defaultValue": "null",
            "description": "<P>Callback function which allows you to customize the rendering of the Grid's toolbar. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ rendertoolbar: function(toolbar){//to do}}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/N5qYC/",
            "exampleDescription": "rendertoolbar is set to a custom function",
            "dataType": "function",
            "ts_dataType": "(toolbar?: GridRendertoolbar['toolbar']) => void",
            "exampleInit": {
                "showtoolbar": "true",
                "rendertoolbar": "rendertoolbar",
                "exampleData": "toolbar.append($(\"&lt;span style='margin: 5px;'>Tool Bar&lt;/span>\"));"
            }
        },
        {
            "name": "rendergridrows",
            "defaultValue": "null",
            "description": "<P>This is a function called when the grid is used in virtual mode. The function should return an array of rows which will be rendered by the Grid. </P>",
            "example": "<pre><CODE>\r\n// prepare the data\r\nvar data = new Array();\r\nvar firstNames =\r\n[\r\n    \"Andrew\", \"Nancy\", \"Shelley\", \"Regina\", \"Yoshi\", \"Antoni\", \"Mayumi\", \"Ian\", \"Peter\", \"Lars\", \"Petra\", \"Martin\", \"Sven\", \"Elio\", \"Beate\", \"Cheryl\", \"Michael\", \"Guylene\"\r\n];\r\nvar lastNames =\r\n[\r\n    \"Fuller\", \"Davolio\", \"Burke\", \"Murphy\", \"Nagase\", \"Saavedra\", \"Ohno\", \"Devling\", \"Wilson\", \"Peterson\", \"Winkler\", \"Bein\", \"Petersen\", \"Rossi\", \"Vileid\", \"Saylor\", \"Bjorn\", \"Nodier\"\r\n];\r\nvar productNames =\r\n[\r\n    \"Black Tea\", \"Green Tea\", \"Caffe Espresso\", \"Doubleshot Espresso\", \"Caffe Latte\", \"White Chocolate Mocha\", \"Cramel Latte\", \"Caffe Americano\", \"Cappuccino\", \"Espresso Truffle\", \"Espresso con Panna\", \"Peppermint Mocha Twist\"\r\n];\r\nvar priceValues =\r\n[\r\n    \"2.25\", \"1.5\", \"3.0\", \"3.3\", \"4.5\", \"3.6\", \"3.8\", \"2.5\", \"5.0\", \"1.75\", \"3.25\", \"4.0\"\r\n];\r\n// generate sample data.\r\nvar generatedata = function (startindex, endindex) {\r\n    var data = {};\r\n    for (var i = startindex; i &lt; endindex; i++) {\r\n        var row = {};\r\n        var productindex = Math.floor(Math.random() * productNames.length);\r\n        var price = parseFloat(priceValues[productindex]);\r\n        var quantity = 1 + Math.round(Math.random() * 10);\r\n        row[\"id\"] = i;\r\n        row[\"firstname\"] = firstNames[Math.floor(Math.random() * firstNames.length)];\r\n        row[\"lastname\"] = lastNames[Math.floor(Math.random() * lastNames.length)];\r\n        row[\"productname\"] = productNames[productindex];\r\n        row[\"price\"] = price;\r\n        row[\"quantity\"] = quantity;\r\n        row[\"total\"] = price * quantity;\r\n        data[i] = row;\r\n    }\r\n    return data;\r\n}\r\nvar source =\r\n{\r\n    datatype: \"array\",\r\n    localdata: {},\r\n    totalrecords: 1000000\r\n};\r\n// load virtual data.\r\nvar renderGridRows = function (params) {\r\n    var data = generatedata(params.startindex, params.endindex);\r\n    return data;\r\n}            \r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/WSpcw/",
            "exampleDescription": "rendergridrows is set to a custom function",
            "dataType": "function",
            "ts_dataType": "(params?: any) => any",
            "exampleInit": {
                "virtualmode": "true",
                "rendergridrows": "rendergridrows"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;div style=\"font-size: 13px; font-family: Verdana; float: left\">\n    &lt;JqxGrid :width=\"800\" :source=\"dataAdapter\" :columns=\"columns\"\n         :autoheight=\"true\" :virtualmode=\"true\" :pageable=\"true\"\n         :rendergridrows=\"renderGridRows\">\n    &lt;/JqxGrid>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        dataAdapter: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Id', datafield: 'id', width: 50 },\n          { text: 'First Name', datafield: 'firstname', width: 120 },\n          { text: 'Last Name', datafield: 'lastname', width: 120 },\n          { text: 'Product', datafield: 'productname', width: 180 },\n          { text: 'Quantity', datafield: 'quantity', width: 100, cellsalign: 'right' },\n          { text: 'Unit Price', datafield: 'price', width: 100, cellsalign: 'right', cellsformat: 'c2' },\n          { text: 'Total', datafield: 'total', cellsrenderer: this.totalcolumnrenderer, cellsalign: 'right' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        datatype: 'array',\n        localdata: {},\n        totalrecords: 1000000\n      }\n      this.firstNames = [\n        'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'\n      ];\n      this.lastNames = [\n        'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'\n      ];\n      this.productNames = [\n        'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Cramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'\n      ];\n      this.priceValues = [\n        '2.25', '1.5', '3.0', '3.3', '4.5', '3.6', '3.8', '2.5', '5.0', '1.75', '3.25', '4.0'\n      ];\n    },\n    methods: {\n      generateData: function(startindex, endindex) {\n        let data = {};\n        for (let i = startindex; i &lt; endindex; i++) {\n          let row = {};\n          let productindex = Math.floor(Math.random() * this.productNames.length);\n          let price = parseFloat(this.priceValues[productindex]);\n          let quantity = 1 + Math.round(Math.random() * 10);\n          row['id'] = i;\n          row['firstname'] = this.firstNames[Math.floor(Math.random() * this.firstNames.length)];\n          row['lastname'] = this.lastNames[Math.floor(Math.random() * this.lastNames.length)];\n          row['productname'] = this.productNames[productindex];\n          row['price'] = price;\n          row['quantity'] = quantity;\n          row['total'] = price * quantity;\n          data[i] = row;\n        }\n        return data;\n      },\n      renderGridRows: function (params) {\n        let data = this.generateData(params.startindex, params.endindex);\n        return data;\n      },\n      totalcolumnrenderer: function (row, column, cellvalue) {\n        let newCellValue = jqx.dataFormat.formatnumber(cellvalue, 'c2');\n        return '&lt;span style=\"margin: 6px 3px; font-size: 12px; float: right; font-weight: bold;\">' + newCellValue + '&lt;/span>';\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "sortable",
            "defaultValue": "false",
            "description": "<P>The sortable property enables or disables the sorting feature. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ sortable: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/gwQrY/",
            "exampleDescription": "sortable is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "sortable": "true"
            }
        },
        {
            "name": "sortmode",
            "defaultValue": "'one'",
            "description": "<P>The sortmode property determines the Grid can sort by single or multiple columns. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ sortable: true, sortmode: 'many'}); </CODE></pre>",
            "exampleURL": "",
            "exampleDescription": "sortmode is set to 'many'",
            "dataType": "string",
            "exampleInit": {
                "sortable": "true",
                "sortmode": "many"
            }
        },
        {
            "name": "selectedrowindex",
            "defaultValue": "-1",
            "description": "<P>Selects a row at a specified index. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ selectedrowindex: 1}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/97tgw/",
            "exampleDescription": "selectedrowindex is set to 2",
            "dataType": "number",
            "exampleInit": {
                "selectedrowindex": "2"
            }
        },
        {
            "name": "selectedrowindexes",
            "defaultValue": "[]",
            "description": "<P>Selects single or multiple rows. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ selectedrowindexes: [0, 1, 2]}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dpQ9r/",
            "exampleDescription": "selectedrowindexes is set to [3,5,10]",
            "dataType": "Array",
            "ts_dataType": "Array<number>",
            "exampleInit": {
                "selectionmode": "multiplerows",
                "selectedrowindexes": "[0, 2]"
            }
        },
        {
            "name": "source",
            "defaultValue": "{}",
            "description": "<P>Sets and gets the source. </P>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/7YMFU/",
            "exampleDescription": "source is set to a custom object",
            "dataType": "object",
            "ts_dataType": "GridSource"
        },
        {
            "name": "sorttogglestates",
            "defaultValue": "2",
            "description": "<B>Possible Values:</B>\n<PRE><CODE>'0'-disables toggling</CODE></PRE>\n<PRE><CODE></CODE>'1'-enables togging. Click on a column toggles the sort direction</PRE>\n<PRE><CODE>'2'-enables remove sorting option</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ sorttogglestates: 1}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/nqfuL/",
            "exampleDescription": "sorttogglestates is set to a 1",
            "dataType": "number",
            "ts_dataType": "enum:GridSortToggleStates",
            "exampleInit": {
                "sortable": "true",
                "sorttogglestates": "1"
            }
        },
        {
            "name": "updatedelay",
            "defaultValue": "0",
            "description": "<P>Sets or gets the rendering update delay. This could be used for deferred scrolling scenarios. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ updatedelay: 5}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/aYspj/",
            "exampleDescription": "updatedelay is set to 20",
            "dataType": "number",
            "exampleInit": {
                "updatedelay": "20"
            }
        },
        {
            "name": "virtualmode",
            "defaultValue": "false",
            "description": "<P>Enables or disables the virtual data mode. </P>",
            "example": "<pre><CODE>$('#jqxGrid').jqxGrid({ virtualmode: true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/j8JUh/",
            "exampleDescription": "virtualmode is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "virtualmode": "true",
                "rendergridrows": "rendergridrows"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;div style=\"font-size: 13px; font-family: Verdana; float: left\">\n    &lt;JqxGrid :width=\"800\" :source=\"dataAdapter\" :columns=\"columns\"\n         :autoheight=\"true\" :virtualmode=\"true\" :pageable=\"true\"\n         :rendergridrows=\"renderGridRows\">\n    &lt;/JqxGrid>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        dataAdapter: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Id', datafield: 'id', width: 50 },\n          { text: 'First Name', datafield: 'firstname', width: 120 },\n          { text: 'Last Name', datafield: 'lastname', width: 120 },\n          { text: 'Product', datafield: 'productname', width: 180 },\n          { text: 'Quantity', datafield: 'quantity', width: 100, cellsalign: 'right' },\n          { text: 'Unit Price', datafield: 'price', width: 100, cellsalign: 'right', cellsformat: 'c2' },\n          { text: 'Total', datafield: 'total', cellsrenderer: this.totalcolumnrenderer, cellsalign: 'right' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        datatype: 'array',\n        localdata: {},\n        totalrecords: 1000000\n      }\n      this.firstNames = [\n        'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'\n      ];\n      this.lastNames = [\n        'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'\n      ];\n      this.productNames = [\n        'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Cramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'\n      ];\n      this.priceValues = [\n        '2.25', '1.5', '3.0', '3.3', '4.5', '3.6', '3.8', '2.5', '5.0', '1.75', '3.25', '4.0'\n      ];\n    },\n    methods: {\n      generateData: function(startindex, endindex) {\n        let data = {};\n        for (let i = startindex; i &lt; endindex; i++) {\n          let row = {};\n          let productindex = Math.floor(Math.random() * this.productNames.length);\n          let price = parseFloat(this.priceValues[productindex]);\n          let quantity = 1 + Math.round(Math.random() * 10);\n          row['id'] = i;\n          row['firstname'] = this.firstNames[Math.floor(Math.random() * this.firstNames.length)];\n          row['lastname'] = this.lastNames[Math.floor(Math.random() * this.lastNames.length)];\n          row['productname'] = this.productNames[productindex];\n          row['price'] = price;\n          row['quantity'] = quantity;\n          row['total'] = price * quantity;\n          data[i] = row;\n        }\n        return data;\n      },\n      renderGridRows: function (params) {\n        let data = this.generateData(params.startindex, params.endindex);\n        return data;\n      },\n      totalcolumnrenderer: function (row, column, cellvalue) {\n        let newCellValue = jqx.dataFormat.formatnumber(cellvalue, 'c2');\n        return '&lt;span style=\"margin: 6px 3px; font-size: 12px; float: right; font-weight: bold;\">' + newCellValue + '&lt;/span>';\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "verticalscrollbarstep",
            "defaultValue": "5",
            "description": "<P>Sets or gets the scrollbar's step when the user clicks the scroll arrows. </P>",
            "example": "<pre><CODE>$(\"#jqxGrid\").jqxGrid({ verticalscrollbarstep: 15});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/QfC4f/",
            "exampleDescription": "verticalscrollbarstep is set to 200",
            "dataType": "number",
            "exampleInit": {
                "verticalscrollbarstep": "200"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid :width=\"getWidth\" :source=\"dataAdapter\" :columns=\"columns\" :columnsresize=\"true\" :verticalscrollbarstep=\"200\">\n  &lt;/JqxGrid>\n&lt;/template>\n&lt;script>\n  import JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        getWidth: getWidth('grid'),\n        dataAdapter: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Name', datafield: 'firstname', width: 120 },\n          { text: 'Last Name', datafield: 'lastname', width: 120 },\n          { text: 'Product', datafield: 'productname', width: 180 },\n          { text: 'Quantity', datafield: 'quantity', width: 80, cellsalign: 'right' },\n          { text: 'Unit Price', datafield: 'price', width: 90, cellsalign: 'right', cellsformat: 'c2' },\n          { text: 'Total', datafield: 'total', cellsalign: 'right', cellsformat: 'c2' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.firstNames = [\n        'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'\n      ];\n      this.lastNames = [\n        'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'\n      ];\n      this.productNames = [\n        'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Cramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'\n      ];\n      this.priceValues = [\n        '2.25', '1.5', '3.0', '3.3', '4.5', '3.6', '3.8', '2.5', '5.0', '1.75', '3.25', '4.0'\n      ];\n\n      this.source = {\n        localdata: this.generateData(),\n        datatype: 'array',\n        datafields:\n          [\n            { name: 'firstname', type: 'string' },\n            { name: 'lastname', type: 'string' },\n            { name: 'productname', type: 'string' },\n            { name: 'quantity', type: 'number' },\n            { name: 'price', type: 'number' },\n            { name: 'total', type: 'number' }\n          ]\n      };\n    },\n    methods: {\n      generateData: function() {\n        let data = {};\n        for (let i = 0; i &lt; 200; i++) {\n          let row = {};\n          let productindex = Math.floor(Math.random() * this.productNames.length);\n          let price = parseFloat(this.priceValues[productindex]);\n          let quantity = 1 + Math.round(Math.random() * 10);\n          row['id'] = i;\n          row['firstname'] = this.firstNames[Math.floor(Math.random() * this.firstNames.length)];\n          row['lastname'] = this.lastNames[Math.floor(Math.random() * this.lastNames.length)];\n          row['productname'] = this.productNames[productindex];\n          row['price'] = price;\n          row['quantity'] = quantity;\n          row['total'] = price * quantity;\n          data[i] = row;\n        }\n        return data;\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "verticalscrollbarlargestep",
            "defaultValue": "400",
            "description": "<P>Sets or gets the scrollbar's large step. This property specifies the step with which the vertical scrollbar's value is changed when the user clicks the area above or below the thumb. </P>",
            "example": "<pre><CODE>$(\"#jqxGrid\").jqxGrid({ verticalscrollbarlargestep: 50});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/j3gqj/",
            "exampleDescription": "verticalscrollbarlargestep is set to 2000",
            "dataType": "number",
            "exampleInit": {
                "verticalscrollbarlargestep": "2000"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxGrid :width=\"getWidth\" :source=\"dataAdapter\" :columns=\"columns\" :columnsresize=\"true\" :verticalscrollbarlargestep=\"2000\">\n  &lt;/JqxGrid>\n&lt;/template>\n&lt;script>\n  import JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        getWidth: getWidth('grid'),\n        dataAdapter: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Name', datafield: 'firstname', width: 120 },\n          { text: 'Last Name', datafield: 'lastname', width: 120 },\n          { text: 'Product', datafield: 'productname', width: 180 },\n          { text: 'Quantity', datafield: 'quantity', width: 80, cellsalign: 'right' },\n          { text: 'Unit Price', datafield: 'price', width: 90, cellsalign: 'right', cellsformat: 'c2' },\n          { text: 'Total', datafield: 'total', cellsalign: 'right', cellsformat: 'c2' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.firstNames = [\n        'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'\n      ];\n      this.lastNames = [\n        'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'\n      ];\n      this.productNames = [\n        'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Cramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'\n      ];\n      this.priceValues = [\n        '2.25', '1.5', '3.0', '3.3', '4.5', '3.6', '3.8', '2.5', '5.0', '1.75', '3.25', '4.0'\n      ];\n\n      this.source = {\n        localdata: this.generateData(),\n        datatype: 'array',\n        datafields:\n          [\n            { name: 'firstname', type: 'string' },\n            { name: 'lastname', type: 'string' },\n            { name: 'productname', type: 'string' },\n            { name: 'quantity', type: 'number' },\n            { name: 'price', type: 'number' },\n            { name: 'total', type: 'number' }\n          ]\n      };\n    },\n    methods: {\n      generateData: function() {\n        let data = {};\n        for (let i = 0; i &lt; 200; i++) {\n          let row = {};\n          let productindex = Math.floor(Math.random() * this.productNames.length);\n          let price = parseFloat(this.priceValues[productindex]);\n          let quantity = 1 + Math.round(Math.random() * 10);\n          row['id'] = i;\n          row['firstname'] = this.firstNames[Math.floor(Math.random() * this.firstNames.length)];\n          row['lastname'] = this.lastNames[Math.floor(Math.random() * this.lastNames.length)];\n          row['productname'] = this.productNames[productindex];\n          row['price'] = price;\n          row['quantity'] = quantity;\n          row['total'] = price * quantity;\n          data[i] = row;\n        }\n        return data;\n      }\n    }\n  }\n&lt;/script>"
            }
        }
    ],
    "events": [
        {
            "name": "bindingcomplete",
            "description": "<P>This event is triggered when the binding is completed. Note: Bind to that event before the Grid's initialization, because if you data bind the Grid to a local data source and bind to the \"bindingcomplete\" event after the initializaation, the data binding will be already completed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/74CTB/",
            "exampleDescription": "Bind to the bindingcomplete event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on(\"bindingcomplete\", function (event) {// your code here.});                       \r\n                        </CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\" @bindingcomplete=\"onBindingcomplete($event)\"\n       :width=\"850\" :columns=\"columns\" :autoheight=\"true\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.source = this.source;\n    },\n    methods: {\n      onBindingcomplete: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "columnresized",
            "description": "<P>This event is triggered when a Grid Column is resized. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/xJQMm/",
            "exampleDescription": "Bind to the columnresized event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on(\"columnresized\", function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // column text.\r\n    var columnText = args.columntext;\r\n    // column data field.\r\n    var dataField = args.datafield;\r\n    // old column width.\r\n    var oldWidth = args.oldwidth;\r\n    // new column width.\r\n    var newWidth = args.newwidth;\r\n});                       \r\n                        </CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\" @columnresized=\"onColumnresized($event)\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :columnsresize=\"true\" :autoheight=\"true\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      onColumnresized: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "columnreordered",
            "description": "<P>This event is triggered when a Grid Column is moved to a new position. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/PMxtZ/",
            "exampleDescription": "Bind to the columnreordered event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on(\"columnreordered\", function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // column text.\r\n    var columnText = args.columntext;\r\n    // column data field.\r\n    var dataField = args.datafield;\r\n    // old column index.\r\n    var oldIndex = args.oldindex;\r\n    // new column index.\r\n    var newIndex = args.newindex;\r\n});                       \r\n                        </CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\" @columnreordered=\"onColumnreordered($event)\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :columnsreorder=\"true\" :autoheight=\"true\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      onColumnreordered: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "columnclick",
            "description": "<P>This event is triggered when a column is clicked. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/sJh9j/",
            "exampleDescription": "Bind to the columnclick event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on(\"columnclick\", function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // column's settings.\r\n    var column = args.column;\r\n    // column data field.\r\n    var dataField = args.dataField;\r\n     // original event.\r\n    var ev = args.originalEvent;\r\n});                       \r\n                        </CODE></PRE>"
        },
        {
            "name": "cellclick",
            "description": "<P>This event is triggered when a cell is clicked. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/HB3Cb/",
            "exampleDescription": "Bind to the cellclick event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on(\"cellclick\", function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // row's bound index.\r\n    var rowBoundIndex = args.rowindex;\r\n    // row's visible index.\r\n    var rowVisibleIndex = args.visibleindex;\r\n    // right click.\r\n    var rightclick = args.rightclick; \r\n    // original event.\r\n    var ev = args.originalEvent;\r\n    // column index.\r\n    var columnindex = args.columnindex;\r\n    // column data field.\r\n    var dataField = args.datafield;\r\n    // cell value\r\n    var value = args.value;\r\n});                       \r\n                        </CODE></PRE>"
        },
        {
            "name": "celldoubleclick",
            "description": "<P>This event is triggered when a cell is double-clicked. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Mp7gL/",
            "exampleDescription": "Bind to the celldoubleclick event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on(\"celldoubleclick\", function (event)\r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // row's bound index.\r\n    var rowBoundIndex = args.rowindex;\r\n    // row's visible index.\r\n    var rowVisibleIndex = args.visibleindex;\r\n    // right click.\r\n    var rightClick = args.rightclick; \r\n    // original event.\r\n    var ev = args.originalEvent;\r\n    // column index.\r\n    var columnIndex = args.columnindex;\r\n    // column data field.\r\n    var dataField = args.datafield;\r\n    // cell value\r\n    var value = args.value;\r\n});                       \r\n                        </CODE></PRE>"
        },
        {
            "name": "cellselect",
            "description": "<P>This event is triggered when a cell is selected. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/6hnpZ/",
            "exampleDescription": "Bind to the cellselect event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on('cellselect', function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // get the column's text.\r\n    var column = $(\"#jqxGrid\").jqxGrid('getcolumn', event.args.datafield).text;\r\n    // column data field.\r\n    var dataField = event.args.datafield;\r\n    // row's bound index.\r\n    var rowBoundIndex = event.args.rowindex;\r\n    // cell value\r\n    var value = args.value;\r\n});\r\n                         </CODE></PRE>",
            "exampleInit": {
                "selectionmode": "'singlecell'"
            }
        },
        {
            "name": "cellunselect",
            "description": "<P>This event is triggered when a cell is unselected. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/qqVCM/",
            "exampleDescription": "Bind to the cellunselect event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on('cellunselect', function (event)\r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // get the column's text.\r\n    var column = $(\"#jqxGrid\").jqxGrid('getcolumn', event.args.datafield).text;\r\n    // column data field.\r\n    var dataField = event.args.datafield;\r\n    // row's bound index.\r\n    var rowBoundIndex = event.args.rowindex;\r\n    // cell value\r\n    var value = args.value;\r\n});\r\n                         </CODE></PRE>",
            "exampleInit": {
                "selectionmode": "'singlecell'"
            }
        },
        {
            "name": "cellvaluechanged",
            "description": "<P>This event is triggered when a cell's value is changed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ejvnb/",
            "exampleDescription": "Bind to the cellvaluechanged event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on('cellvaluechanged', function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // column data field.\r\n    var datafield = event.args.datafield;\r\n    // row's bound index.\r\n    var rowBoundIndex = args.rowindex;\r\n    // new cell value.\r\n    var value = args.newvalue;\r\n    // old cell value.\r\n    var oldvalue = args.oldvalue;\r\n});\r\n                         </CODE></PRE>",
            "exampleInit": {
                "editable": "true"
            }
        },
        {
            "name": "cellbeginedit",
            "description": "<P>This event is triggered when a cell's editor is displayed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/NEWud/",
            "exampleDescription": "Bind to the cellbeginedit event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on('cellbeginedit', function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // column data field.\r\n    var dataField = event.args.datafield;\r\n    // row's bound index.\r\n    var rowBoundIndex = event.args.rowindex;\r\n    // cell value\r\n    var value = args.value;\r\n    // row's data.\r\n    var rowData = args.row;\r\n});\r\n                         </CODE></PRE>",
            "exampleInit": {
                "editable": "true"
            }
        },
        {
            "name": "cellendedit",
            "description": "<P>This event is triggered when a cell's edit operation has ended. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/UEqup/",
            "exampleDescription": "Bind to the cellendedit event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on('cellendedit', function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // column data field.\r\n    var dataField = event.args.datafield;\r\n    // row's bound index.\r\n    var rowBoundIndex = event.args.rowindex;\r\n    // cell value\r\n    var value = args.value;\r\n    // cell old value.\r\n    var oldvalue = args.oldvalue;\r\n    // row's data.\r\n    var rowData = args.row;\r\n});\r\n                         </CODE></PRE>",
            "exampleInit": {
                "editable": "true"
            }
        },
        {
            "name": "filter",
            "description": "<P>This event is triggered when the Grid is filtered. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/YsNT2/",
            "exampleDescription": "Bind to the filter event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on(\"filter\", function (event) \r\n{\r\n    var filterinfo = $(\"#jqxgrid\").jqxGrid('getfilterinformation');\r\n});                       \r\n                        </CODE></PRE>",
            "exampleInit": {
                "filterable": "true"
            }
        },
        {
            "name": "groupschanged",
            "description": "<P>This event is triggered when a group is added, inserted or removed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Au8Vn/",
            "exampleDescription": "Bind to the groupschanged event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on(\"groupschanged\", \r\n    function (event) \r\n    {\r\n        // event arguments.\r\n        var args = event.args;\r\n        // type of change. Possible values: Add, Remove, Clear, Insert\r\n        var type = args.type;\r\n        // group index. The index of the added, removed or inserted group. If the type is \"Clear\", -1 is passed.\r\n        var groupIndex = args.index.\r\n        // groups array.\r\n        var groups = args.groups;\r\n    });                       \r\n                        </CODE></PRE>",
            "exampleInit": {
                "groupable": "true"
            }
        },
        {
            "name": "groupexpand",
            "description": "<P>This event is triggered when a group is expanded. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/keN2U/",
            "exampleDescription": "Bind to the groupexpand event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on('groupexpand', function (event) \r\n{\r\n   // event arguments.\r\n    var args = event.args;\r\n    // expanded group name.\r\n    var group = args.group;\r\n    // expanded group level.\r\n    var level = args.level;\r\n    // sub groups - contains an array of sub-level's groups.\r\n    var subGroups = args.subgroups;\r\n    // sub rows - contains an array of sub-level's data rows or null when there are only sub groups.\r\n    var subRows = args.subrows;\r\n});\r\n                        </CODE></PRE>",
            "exampleInit": {
                "groupable": "true"
            }
        },
        {
            "name": "groupcollapse",
            "description": "<P>This event is triggered when a group is collapsed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/pRfV7/",
            "exampleDescription": "Bind to the groupcollapse event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on('groupcollapse', function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // expanded group name.\r\n    var group = args.group;\r\n    // expanded group level.\r\n    var level = args.level;\r\n    // sub groups - contains an array of sub-level's groups.\r\n    var subGroups = args.subgroups;\r\n    // sub rows - contains an array of sub-level's data rows or null when there are only sub groups.\r\n    var subRows = args.subrows;\r\n});\r\n                        </CODE></PRE>",
            "exampleInit": {
                "groupable": "true"
            }
        },
        {
            "name": "pagechanged",
            "description": "<P>This event is triggered when the current page is changed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9s3LS/",
            "exampleDescription": "Bind to the pagechanged event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on(\"pagechanged\", function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // page number.\r\n    var pagenum = args.pagenum;\r\n    // page size.\r\n    var pagesize = args.pagesize;\r\n});                       \r\n                        </CODE></PRE>",
            "exampleInit": {
                "pageable": "true",
                "pagesize": "1"
            }
        },
        {
            "name": "pagesizechanged",
            "description": "<P>This event is triggered when the page size is changed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/B2sjB/",
            "exampleDescription": "Bind to the pagesizechanged event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on(\"pagesizechanged\", function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // page number.\r\n    var pagenum = args.pagenum;\r\n    // old page size.\r\n    var oldpagesize = args.oldpagesize;\r\n    // new page size.\r\n    var pagesize = args.pagesize;\r\n});                       \r\n                        </CODE></PRE>",
            "exampleInit": {
                "pageable": "true"
            }
        },
        {
            "name": "rowclick",
            "description": "<P>This event is triggered when a row is clicked. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/XLDU7/",
            "exampleDescription": "Bind to the rowclick event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$('#jqxGrid').on('rowclick', function (event) \r\n{\r\n    var args = event.args;\r\n    // row's bound index.\r\n    var boundIndex = args.rowindex;\r\n    // row's visible index.\r\n    var visibleIndex = args.visibleindex;\r\n    // right click.\r\n    var rightclick = args.rightclick; \r\n    // original event.\r\n    var ev = args.originalEvent;                                                                                   \r\n}); </CODE></PRE>"
        },
        {
            "name": "rowdoubleclick",
            "description": "<P>This event is triggered when a row is double clicked. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/CgvvZ/",
            "exampleDescription": "Bind to the rowdoubleclick event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$('#jqxGrid').on('rowdoubleclick', function (event) \r\n{ \r\n    var args = event.args;\r\n    // row's bound index.\r\n    var boundIndex = args.rowindex;\r\n    // row's visible index.\r\n    var visibleIndex = args.visibleindex;\r\n    // right click.\r\n    var rightclick = args.rightclick; \r\n    // original event.\r\n    var ev = args.originalEvent;\r\n});\r\n                         </CODE></PRE>"
        },
        {
            "name": "rowselect",
            "description": "<P>This event is triggered when a row is selected. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/G9KY5/",
            "exampleDescription": "Bind to the rowselect event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$('#jqxGrid').on('rowselect', function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // row's bound index.\r\n    var rowBoundIndex = args.rowindex;\r\n    // row's data. The row's data object or null(when all rows are being selected or unselected with a single action). If you have a datafield called \"firstName\", to access the row's firstName, use var firstName = rowData.firstName;\r\n    var rowData = args.row;\r\n});\r\n                         </CODE></PRE>"
        },
        {
            "name": "rowunselect",
            "description": "<P>This event is triggered when a row is unselected. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FCCXY/",
            "exampleDescription": "Bind to the rowunselect event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$('#jqxGrid').on('rowunselect', function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // row's bound index.\r\n    var rowBoundIndex = args.rowindex;\r\n    // row's data. The row's data object or null(when all rows are being selected or unselected with a single action). If you have a datafield called \"firstName\", to access the row's firstName, use var firstName = rowData.firstName;\r\n    var rowData = args.row;\r\n});\r\n                         </CODE></PRE>"
        },
        {
            "name": "rowexpand",
            "description": "<P>This event is triggered when a row with details is expanded. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/GL52a/",
            "exampleDescription": "Bind to the rowexpand event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$('#jqxGrid').on('rowexpand', function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // row details.\r\n    var details = args.details;\r\n    // row's bound index.\r\n    var rowBoundIndex = args.rowindex;\r\n});\r\n                         </CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\" @rowexpand=\"onRowexpand($event)\" :width=\"850\" :source=\"source\" :columns=\"columns\" \n       :rowdetails=\"true\" :initrowdetails=\"initrowdetails\" :rowdetailstemplate=\"rowdetailstemplate\" :autoheight=\"true\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        rowdetailstemplate: {\n          rowdetails: \"&lt;div style='margin: 10px;'>Row Details&lt;/div>\",\n          rowdetailsheight: 50\n        }\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      initrowdetails: function (index, parentElement, gridElement, datarecord) {\n        parentElement.children[0].innerHTML = 'Details: ' + index;\n      },\n      onRowexpand: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "rowcollapse",
            "description": "<P>This event is triggered when a row with details is collapsed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/VDjGU/",
            "exampleDescription": "Bind to the rowcollapse event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$('#jqxGrid').on('rowcollapse', function (event) \r\n{ \r\n    // event arguments.\r\n    var args = event.args;\r\n    // row details.\r\n    var details = args.details;\r\n    // row's bound index.\r\n    var rowBoundIndex = args.rowindex;\r\n});\r\n                         </CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\" @rowcollapse=\"onRowcollapse($event)\" :width=\"850\" :source=\"source\" :columns=\"columns\" \n       :rowdetails=\"true\" :initrowdetails=\"initrowdetails\" :rowdetailstemplate=\"rowdetailstemplate\" :autoheight=\"true\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        rowdetailstemplate: {\n          rowdetails: \"&lt;div style='margin: 10px;'>Row Details&lt;/div>\",\n          rowdetailsheight: 50\n        }\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      initrowdetails: function (index, parentElement, gridElement, datarecord) {\n        parentElement.children[0].innerHTML = 'Details: ' + index;\n      },\n      onRowcollapse: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "sort",
            "description": "<P>This event is triggered when the Grid is sorted. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/xcUA3/",
            "exampleDescription": "Bind to the sort event by type: jqxGrid.",
            "example": "<PRE><CODE>\r\n$(\"#jqxGrid\").on(\"sort\", function (event) \r\n{\r\n    // event arguments.\r\n    var args = event.args;\r\n    // sorting information.\r\n    var sortInfo = event.args.sortinformation;\r\n    // sort direction.\r\n    var sortdirection = sortInfo.sortdirection.ascending ? \"ascending\" : \"descending\";\r\n    // column data field.\r\n    var sortColumnDataField = sortInfo.sortcolumn;\r\n});                       \r\n                        </CODE></PRE>",
            "exampleInit": {
                "sortable": "true",
                "showsortmenuitems": "true"
            }
        }
    ],
    "methods": [
        {
            "name": "autoresizecolumns",
            "description": "<P>Auto-resizes all columns. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ZyaQF/",
            "exampleDescription": "resizes the columns in the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "type",
                    "dataType": "string",
                    "description": "\"all\", \"cells\" or \"column\"",
                    "optional": true
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n       :width=\"410\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"150\" @click=\"resizeColumns()\">Auto Resize Columns&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName', width: 50 },\n          { text: 'Contact Title', datafield: 'Title', width: 50 },\n          { text: 'City', datafield: 'City', width: 50 },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      resizeColumns: function () {\n        this.$refs.myGrid.autoresizecolumns();\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "autoresizecolumn",
            "description": "<P>Auto-resizes a column. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/VLs2r/",
            "exampleDescription": "resizes the column in the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "type",
                    "dataType": "string",
                    "description": "\"all\", \"cells\" or \"column\"",
                    "optional": true
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"500\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"200\" @click=\"resizeColumn()\">Auto Resize Second Column&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName', width: 150 },\n          { text: 'Contact Title', datafield: 'Title', width: 50 },\n          { text: 'City', datafield: 'City', width: 100 },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      resizeColumn: function () {\n        this.$refs.myGrid.autoresizecolumn('Title');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "beginupdate",
            "description": "<P>Starts an update operation. This is appropriate when calling multiple methods or set multiple properties at once. Optional boolean parameter: suspendAllActions. When you call beginupdate with parameter equal to <CODE>true</CODE>, the jqxGrid stops all rendering processes and when you call \"endupdate\", it will call the \"render\" method. Otherwise, it will try to resume its state with minimial performance impact. Use the suspendAllActions when you make multiple changes which require full-rerender such as changing the Grid's source, columns, groups. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/adS4S/",
            "exampleDescription": "Invoke the beginupdate method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :sortable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"beginUpdate()\">Begin Update&lt;/JqxButton>\n    &lt;JqxButton :width=\"100\" @click=\"endUpdate()\">End Update&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      beginUpdate: function () {\n        this.$refs.myGrid.beginupdate();\n      },\n      endUpdate: function () {\n        this.$refs.myGrid.endupdate();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "clear",
            "description": "<P>Clears the Grid contents. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/2dsfE/",
            "exampleDescription": "Invoke the clear method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "destroy",
            "description": "<P>Removes the Grid from the document and releases its resources. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Mv9Nj/",
            "exampleDescription": "destroy the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "endupdate",
            "description": "<P>Ends the update operation. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3v5Qg/",
            "exampleDescription": "Invoke the endupdate method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :sortable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"beginUpdate()\">Begin Update&lt;/JqxButton>\n    &lt;JqxButton :width=\"100\" @click=\"endUpdate()\">End Update&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      beginUpdate: function () {\n        this.$refs.myGrid.beginupdate();\n      },\n      endUpdate: function () {\n        this.$refs.myGrid.endupdate();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "ensurerowvisible",
            "description": "<P>Scrolls to a row. The parameter is a bound index. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hBM5L/",
            "exampleDescription": "Invoke the ensurerowvisible method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :height=\"70\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.ensurerowvisible(2);\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "focus",
            "description": "<P>Sets the keyboard Focus to the jqxGrid widget. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/UbK74/",
            "exampleDescription": "focus the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getcolumnindex",
            "description": "<P>Gets the index of a column in the columns collection. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/yKNu5/",
            "exampleDescription": "gets a column index in the jqxGrid.",
            "returnDataType": "number",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'Title'" ]
            }
        },
        {
            "name": "getcolumn",
            "description": "<P>Gets a column by datafield value.Column's fields: </P>\n<UL><LI>datafield - column's datafield. To get the cells labels and values from the data source, the Grid uses the \"datafield\" and \"displayfield\" properties. If the \"displayfield\" is not set, the \"displayfield\" is equal to the \"datafield'. \r\n<LI>text - column's text. \r\n<LI>displayfield - column's displayfield. To get the cells labels and values from the data source, the Grid uses the \"datafield\" and \"displayfield\" properties. If the \"displayfield\" is not set, the \"displayfield\" is equal to the \"datafield'. \r\n<LI>sortable - determines whether the column is sortable. \r\n<LI>filterable - determines whether the column is filterable. \r\n<LI>exportable - determines whether the column will be exported through the \"exportdata\" method. \r\n<LI>editable - determines whether the column is editable. \r\n<LI>groupable - determines whether the column is groupable. \r\n<LI>resizable - determines whether the column is resizable. \r\n<LI>draggable - determines whether the column is draggable. \r\n<LI>classname - determines the column's header classname. \r\n<LI>cellclassname - determines the column's cells classname. \r\n<LI>width - determines the column's width. \r\n<LI>menu - determines whether the column has an associated popup menu or not. </LI></UL>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/HDz7p/",
            "exampleDescription": "Invoke the getcolumn method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "GridGetColumn",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'Title'" ]
            }
        },
        {
            "name": "getcolumnproperty",
            "description": "<P>Gets a property of a column. Possible property names: 'text', 'hidden', 'hideable', 'renderer', 'cellsrenderer', 'align', 'cellsalign', 'cellsformat', 'pinned', 'contenttype', 'resizable', 'filterable', 'editable', 'cellclassname', 'classname', 'width', 'minwidth', 'maxwidth' </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/jUVLk/",
            "exampleDescription": "Invoke the getcolumnproperty method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "propertyName",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'Title'", "'text'" ]
            }
        },
        {
            "name": "getrowid",
            "description": "<P>Gets the id of a row. The returned value is a 'string' or 'number' depending on the id's type. The parameter is the row's bound index. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/H8d4f/",
            "exampleDescription": "Invoke the getrowid method of the jqxGrid.",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "0" ]
            }
        },
        {
            "name": "getrowdata",
            "description": "<P>Gets the data of a row. The returned value is a JSON object. The parameter is the row's bound index. Note: If you pass a bound index of a row which is not visible in the Grid, the method returns null. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/7pdyg/",
            "exampleDescription": "Invoke the getrowdata method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "0" ]
            }
        },
        {
            "name": "getrowdatabyid",
            "description": "<P>Gets the data of a row. The returned value is a JSON object. The parameter is the row's id. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/E3JrB/",
            "exampleDescription": "Invoke the getrowdatabyid method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "rowID",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "0" ]
            }
        },
        {
            "name": "getrowboundindexbyid",
            "description": "<P>Gets the index of a row in the array returned by the <CODE>getboundrows</CODE> method. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hWWqW/",
            "exampleDescription": "Invoke the getrowboundindexbyid method of the jqxGrid.",
            "returnDataType": "number",
            "arguments": [
                {
                    "name": "rowID",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "0" ]
            }
        },
        {
            "name": "getrowboundindex",
            "description": "<P>Gets the index of a row in the array returned by the <CODE>getboundrows</CODE> method. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/gcrjx/",
            "exampleDescription": "Invoke the getrowboundindex method of the jqxGrid.",
            "returnDataType": "number",
            "arguments": [
                {
                    "name": "rowDisplayIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "0" ]
            }
        },
        {
            "name": "getrows",
            "description": "<P>Gets all rows. Returns an array of all rows loaded in the Grid. If the Grid is filtered, the returned value is an array of the filtered records. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/q44HB/",
            "exampleDescription": "Invoke the getrows method of the jqxGrid.",
            "returnDataType": "Array",
            "ts_returnDataType": "Array<any>",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getboundrows",
            "description": "<P>Gets all rows loaded from the data source. The method returns an Array of all rows. The Grid's sorting, filtering, grouping and paging will not affect the result of this method. It will always return the rows collection loaded from the data source. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3LLVW/",
            "exampleDescription": "Invoke the getboundrows method of the jqxGrid.",
            "returnDataType": "Array",
            "ts_returnDataType": "Array<any>",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getdisplayrows",
            "description": "<P>Gets all rows that are currently displayed in the Grid. The method returns an Array of the displayed rows. The Grid's sorting, filtering, grouping and paging will affect the result of this method. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/g6RXf/",
            "exampleDescription": "Invoke the getdisplayrows method of the jqxGrid.",
            "returnDataType": "Array",
            "ts_returnDataType": "Array<any>",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getdatainformation",
            "description": "<P>Gets bound data information. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/AzT4J/",
            "exampleDescription": "Invoke the getdatainformation method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "GridGetDataInformation",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "pageable": "true",
                "sortable": "true"
            }
        },
        {
            "name": "getsortinformation",
            "description": "<P>Gets the sort information. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hkRXX/",
            "exampleDescription": "Invoke the getsortinformation method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "GridGetSortInformation",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "sortable": "true"
            }
        },
        {
            "name": "getpaginginformation",
            "description": "<P>Gets the paging information. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/SgbXd/",
            "exampleDescription": "Invoke the getpaginginformation method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "GridGetPagingInformation",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "pageable": "true"
            }
        },
        {
            "name": "hidecolumn",
            "description": "<P>Hides a column. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/5YtCm/",
            "exampleDescription": "Hides a column in the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"showColumn()\">Show Column&lt;/JqxButton>\n    &lt;JqxButton :width=\"100\" @click=\"hideColumn()\">Hide Column&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName'},\n          { text: 'Contact Title', datafield: 'Title'},\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      showColumn: function () {\n        this.$refs.myGrid.showcolumn('ContactName');\n      },\n      hideColumn: function () {\n        this.$refs.myGrid.hidecolumn('ContactName');\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "hideloadelement",
            "description": "<P>Hides the data loading image. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/kZh6F/",
            "exampleDescription": "hide the data loading image in the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"150\" @click=\"showElement()\">Show Load Element&lt;/JqxButton>\n    &lt;JqxButton :width=\"150\" @click=\"hideElement()\">Hide Load Element&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      showElement: function () {\n        this.$refs.myGrid.showloadelement();\n      },\n      hideElement: function () {\n        this.$refs.myGrid.hideloadelement();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "hiderowdetails",
            "description": "<P>Hides the details of a row. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/pyGV6/",
            "exampleDescription": "hide row details in the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n         :rowdetails=\"true\" :initrowdetails=\"initrowdetails\" :rowdetailstemplate=\"rowdetailstemplate\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"150\" @click=\"showDetails()\">Show Row Details&lt;/JqxButton>\n    &lt;JqxButton :width=\"150\" @click=\"hideDetails()\">Hide Row Details&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        rowdetailstemplate: {\n          rowdetails: \"&lt;div style='margin: 10px;'>Row Details&lt;/div>\",\n          rowdetailsheight: 50\n        }\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      initrowdetails: function (index, parentElement, gridElement, datarecord) {\n        parentElement.children[0].innerHTML = 'Details: ' + index;\n      },\n      showDetails: function () {\n        this.$refs.myGrid.showrowdetails(0);\n      },\n      hideDetails: function () {\n        this.$refs.myGrid.hiderowdetails(0);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "iscolumnvisible",
            "description": "<P>Gets whether a column is visible. Returns a boolean value. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/G7tjU/",
            "exampleDescription": "Invoke the iscolumnvisible method of the jqxGrid.",
            "returnDataType": "boolean",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'ContactName'" ]
            }
        },
        {
            "name": "iscolumnpinned",
            "description": "<P>Gets whether a column is pinned. Returns a boolean value. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/gPEec/",
            "exampleDescription": "Invoke the iscolumnpinned method of the jqxGrid.",
            "returnDataType": "boolean",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'ContactName'" ]
            }
        },
        {
            "name": "localizestrings",
            "description": "<P>Localizes the grid strings. This method allows you to change the valus of all Grid strings and also to change the cells formatting settings. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ENbB6/",
            "exampleDescription": "Invoke the localizestrings method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "localizationobject",
                    "dataType": "object",
                    "ts_dataType": "GridLocalizationobject",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleName": "jqxgrid_localization",
            "exampleInit": {
                "args": [ "getLocalization('de')" ]
            },
            "extraData": {
                "pageable": "true"
            }
        },
        {
            "name": "pincolumn",
            "description": "<P>Pins the column. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/SLfHr/",
            "exampleDescription": "pin a column in the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"pinColumn()\">Pin Column&lt;/JqxButton>\n    &lt;JqxButton :width=\"100\" @click=\"unpinColumn()\">Unpin Column&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      pinColumn: function () {\n        this.$refs.myGrid.pincolumn('ContactName');\n      },\n      unpinColumn: function () {\n        this.$refs.myGrid.unpincolumn('ContactName');\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "refreshdata",
            "description": "<P>Refreshes the data. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/CMu3p/",
            "exampleDescription": "Invoke the refreshdata method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "refresh",
            "description": "<P>Repaints the Grid View. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FeT8L/",
            "exampleDescription": "Invoke the refresh method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "render",
            "description": "<P>Renders the Grid contents. This method completely refreshes the Grid cells, columns, layout and repaints the view. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/RuSjf/",
            "exampleDescription": "Invoke the render method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "scrolloffset",
            "description": "<P>Scrolls the grid contents. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8jdpA/",
            "exampleDescription": "Invoke the scrolloffset method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "top",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "left",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"400\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName', width: 150 },\n          { text: 'Contact Title', datafield: 'Title', width: 150 },\n          { text: 'City', datafield: 'City', width: 150 },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.scrolloffset(0, 100);\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "scrollposition",
            "description": "<P>Returns the scrollbars position. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/cWADt/",
            "exampleDescription": "Invoke the scrollposition method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "GridScrollPosition",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"400\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName', width: 150 },\n          { text: 'Contact Title', datafield: 'Title', width: 150 },\n          { text: 'City', datafield: 'City', width: 150 },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      let position = this.$refs.myGrid.scrollposition();\n      let left = position.left;\n      let top = position.top;\n      alert('Left: ' + left + \", Top: \" + top);\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "showloadelement",
            "description": "<P>Shows the data loading image. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/g7zEL/",
            "exampleDescription": "shows the data loading image in the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"150\" @click=\"showElement()\">Show Load Element&lt;/JqxButton>\n    &lt;JqxButton :width=\"150\" @click=\"hideElement()\">Hide Load Element&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      showElement: function () {\n        this.$refs.myGrid.showloadelement();\n      },\n      hideElement: function () {\n        this.$refs.myGrid.hideloadelement();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "showrowdetails",
            "description": "<P>Shows the details of a row. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/84jBX/",
            "exampleDescription": "shows row details in the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n         :rowdetails=\"true\" :initrowdetails=\"initrowdetails\" :rowdetailstemplate=\"rowdetailstemplate\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"150\" @click=\"showDetails()\">Show Row Details&lt;/JqxButton>\n    &lt;JqxButton :width=\"150\" @click=\"hideDetails()\">Hide Row Details&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        rowdetailstemplate: {\n          rowdetails: \"&lt;div style='margin: 10px;'>Row Details&lt;/div>\",\n          rowdetailsheight: 50\n        }\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      initrowdetails: function (index, parentElement, gridElement, datarecord) {\n        parentElement.children[0].innerHTML = 'Details: ' + index;\n      },\n      showDetails: function () {\n        this.$refs.myGrid.showrowdetails(0);\n      },\n      hideDetails: function () {\n        this.$refs.myGrid.hiderowdetails(0);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "setcolumnindex",
            "description": "n<P>Sets the index of a column in the columns collection. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9ePBx/",
            "exampleDescription": "sets a column index in the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'Title'", "0" ]
            }
        },
        {
            "name": "setcolumnproperty",
            "description": "<P>Sets a property of a column.Possible property names: 'text', 'hidden', 'hideable', 'renderer', 'cellsrenderer', 'align', 'cellsalign', 'cellsformat', 'pinned', 'contenttype', 'resizable', 'filterable', 'editable', 'cellclassname', 'classname', 'width', 'minwidth', 'maxwidth' </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/XSKXc/",
            "exampleDescription": "Invoke the setcolumnproperty method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "propertyName",
                    "dataType": "string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "propertyValue",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'Title'", "'text'", "'New Name'" ]
            }
        },
        {
            "name": "showcolumn",
            "description": "<P>Shows a column. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/YC8qJ/",
            "exampleDescription": "show the hidden column in the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"showColumn()\">Show Column&lt;/JqxButton>\n    &lt;JqxButton :width=\"100\" @click=\"hideColumn()\">Hide Column&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName'},\n          { text: 'Contact Title', datafield: 'Title'},\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      showColumn: function () {\n        this.$refs.myGrid.showcolumn('ContactName');\n      },\n      hideColumn: function () {\n        this.$refs.myGrid.hidecolumn('ContactName');\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "unpincolumn",
            "description": "<P>Unpins the column. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/WkvKY/",
            "exampleDescription": "unpin a column in the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"pinColumn()\">Pin Column&lt;/JqxButton>\n    &lt;JqxButton :width=\"100\" @click=\"unpinColumn()\">Unpin Column&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      pinColumn: function () {\n        this.$refs.myGrid.pincolumn('ContactName');\n      },\n      unpinColumn: function () {\n        this.$refs.myGrid.unpincolumn('ContactName');\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "updatebounddata",
            "description": "<P>Updates the bound data and refreshes the grid. You can pass 'filter' or 'sort' as parameter, if the update reason is change in 'filtering' or 'sorting'. To update only the data without the columns, use the 'data' parameter. To make a quick update of the cells, pass \"cells\" as parameter. Passing \"cells\" will refresh only the cells values when the new rows count is equal to the previous rows count. To make a full update, do not pass any parameter. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dRbAE/",
            "exampleDescription": "Invoke the updatebounddata method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "type",
                    "dataType": "string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": true
                }
            ]
        },
        {
            "name": "updating",
            "description": "<P>Gets the updating operation state. Returns a boolean value. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/PUGJW/",
            "exampleDescription": "Invoke the updating of the jqxGrid.",
            "returnDataType": "boolean",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getsortcolumn",
            "description": "<P>Gets the sort column. Returns the column's datafield or null, if sorting is not applied. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/M9Bxj/",
            "exampleDescription": "Invoke the getsortcolumn method of the jqxGrid.",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "sortable": "true"
            }
        },
        {
            "name": "removesort",
            "description": "<P>Removes the sorting. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Ufgs8/",
            "exampleDescription": "Invoke the removesort method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"850\" :source=\"source\" :columns=\"columns\" :sortable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"150\" @click=\"removeSort()\">Remove Sort&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      removeSort: function () {\n        this.$refs.myGrid.removesort();\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "sortby",
            "description": "<P>Sorts the Grid data. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/7yWdu/",
            "exampleDescription": "Invoke the sortby method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "sortOrder",
                    "dataType": "string",
                    "description": "\"asc\", \"desc\" or null",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'ContactName'", "'asc'" ]
            },
            "extraData": {
                "sortable": "true"
            }
        },
        {
            "name": "addgroup",
            "description": "<P>Groups by a column. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/xZ4qU/",
            "exampleDescription": "Invoke the addgroup method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"addGroup()\">Add Group&lt;/JqxButton>\n    &lt;JqxButton :width=\"100\" @click=\"removeGroup()\">Remove Group&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      addGroup: function () {\n        this.$refs.myGrid.addgroup('ContactName');\n      },\n      removeGroup: function () {\n        this.$refs.myGrid.removegroup('ContactName');\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "cleargroups",
            "description": "<P>Clears all groups. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vn6nv/",
            "exampleDescription": "Invoke the cleargroups method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"clearGroups()\">Clear Groups&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      clearGroups: function () {\n        this.$refs.myGrid.cleargroups();\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "collapsegroup",
            "description": "<P>Collapses a group. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/6eXxT/",
            "exampleDescription": "Invoke the collapsegroup method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "group",
                    "dataType": "number/string",
                    "ts_dataType": "number | string",
                    "description": "number for root groups or string like \"1.1\" for sub groups",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :groups=\" ['ContactName'] \" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"expandGroup()\">Expand Group&lt;/JqxButton>\n    &lt;JqxButton :width=\"100\" @click=\"collapseGroup()\">Collapse Group&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      expandGroup: function () {\n        this.$refs.myGrid.expandgroup(0);\n      },\n      collapseGroup: function () {\n        this.$refs.myGrid.collapsegroup(0);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "collapseallgroups",
            "description": "<P>Collapses all groups. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tcq8u/",
            "exampleDescription": "Invoke the collapseallgroups method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :groups=\" ['ContactName'] \" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"110\" @click=\"expandGroup()\">Expand Groups&lt;/JqxButton>\n    &lt;JqxButton :width=\"110\" @click=\"collapseGroup()\">Collapse Groups&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      expandGroup: function () {\n        this.$refs.myGrid.expandallgroups();\n      },\n      collapseGroup: function () {\n        this.$refs.myGrid.collapseallgroups();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "expandallgroups",
            "description": "<P>Expands all groups. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/rS6AP/",
            "exampleDescription": "Invoke the expandallgroups method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :groups=\" ['ContactName'] \" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"110\" @click=\"expandGroup()\">Expand Groups&lt;/JqxButton>\n    &lt;JqxButton :width=\"110\" @click=\"collapseGroup()\">Collapse Groups&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      expandGroup: function () {\n        this.$refs.myGrid.expandallgroups();\n      },\n      collapseGroup: function () {\n        this.$refs.myGrid.collapseallgroups();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "expandgroup",
            "description": "<P>Expands a group. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/WLPCu/",
            "exampleDescription": "Invoke the expandgroup method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "group",
                    "dataType": "number/string",
                    "ts_dataType": "number | string",
                    "description": "number for root groups or string like \"1.1\" for sub groups",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :groups=\" ['ContactName'] \" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"expandGroup()\">Expand Group&lt;/JqxButton>\n    &lt;JqxButton :width=\"100\" @click=\"collapseGroup()\">Collapse Group&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      expandGroup: function () {\n        this.$refs.myGrid.expandgroup(0);\n      },\n      collapseGroup: function () {\n        this.$refs.myGrid.collapsegroup(0);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "getrootgroupscount",
            "description": "<P>Gets the number of root groups. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ZRe9R/",
            "exampleDescription": "Invoke the getrootgroupscount method of the jqxGrid.",
            "returnDataType": "number",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "groupable": "true",
                "groups": "['ContactName']"
            }
        },
        {
            "name": "getgroup",
            "description": "<P>Gets a group. The method returns an object with details about the Group. The object has the following fields: </P>\n<UL><LI>group - group's name. \r\n<LI>level - group's level in the group's hierarchy. \r\n<LI>expanded - group's expand state. \r\n<LI>subgroups - an array of sub groups or null. \r\n<LI>subrows - an array of rows or null. </LI></UL>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tbCwt/",
            "exampleDescription": "Invoke the getgroup method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "GridGetGroup",
            "arguments": [
                {
                    "name": "groupIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "0" ]
            },
            "extraData": {
                "groupable": "true",
                "groups": "['ContactName']"
            }
        },
        {
            "name": "insertgroup",
            "description": "<P>Groups by a column. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vTjs8/",
            "exampleDescription": "Invoke the insertgroup method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "groupIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "0", "'Title'" ]
            },
            "extraData": {
                "groupable": "true",
                "groups": "['ContactName']"
            }
        },
        {
            "name": "iscolumngroupable",
            "description": "<P>Gets whether the user can group by a column. Returns a boolean value. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/EH5fL/",
            "exampleDescription": "Invoke the iscolumngroupable method of the jqxGrid.",
            "returnDataType": "boolean",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'ContactName'" ]
            },
            "extraData": {
                "groupable": "true"
            }
        },
        {
            "name": "removegroupat",
            "description": "<P>Removes a group at specific index. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/UK7mF/",
            "exampleDescription": "Invoke the removegroupat method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "groupIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"150\" @click=\"removeGroupAt()\">Remove First Group&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      removeGroupAt: function () {\n        this.$refs.myGrid.removegroupat('0');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "removegroup",
            "description": "<P>Removes a group. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/PKyT3/",
            "exampleDescription": "Invoke the removegroup method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"addGroup()\">Add Group&lt;/JqxButton>\n    &lt;JqxButton :width=\"100\" @click=\"removeGroup()\">Remove Group&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      addGroup: function () {\n        this.$refs.myGrid.addgroup('ContactName');\n      },\n      removeGroup: function () {\n        this.$refs.myGrid.removegroup('ContactName');\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "addfilter",
            "description": "<P>Adds a filter to the Grid. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/P7BCs/",
            "exampleDescription": "Invoke the addfilter method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "filterGroup",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "refreshGrid",
                    "dataType": "boolean",
                    "description": "",
                    "optional": true
                }
            ],
            "exampleName": "jqxgrid_filtering",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :filterable=\"true\" :autoheight=\"true\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      let filtergroup = new jqx.filter();\n      let filter_or_operator = 1;\n      let filtervalue = 'Maria';\n      let filtercondition = 'contains';\n      let filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n      filtergroup.addfilter(filter_or_operator, filter);\n      this.$refs.myGrid.addfilter('ContactName', filtergroup);\n      this.$refs.myGrid.applyfilters();\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "applyfilters",
            "description": "<P>Applies all filters to the Grid. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Eeume/",
            "exampleDescription": "Invoke the applyfilters method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "exampleName": "jqxgrid_filtering",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :filterable=\"true\" :autoheight=\"true\" />\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      let filtergroup = new jqx.filter();\n      let filter_or_operator = 1;\n      let filtervalue = 'Maria';\n      let filtercondition = 'contains';\n      let filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n      filtergroup.addfilter(filter_or_operator, filter);\n      this.$refs.myGrid.addfilter('ContactName', filtergroup);\n      this.$refs.myGrid.applyfilters();\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "clearfilters",
            "description": "<P>Clears all filters from the Grid. You can call the method with optional boolean parameter. If the parameter is \"true\" or you call the method without parameter, the Grid will clear the filters and refresh the Grid(default behavior). If the parameter is \"false\", the method will clear the filters without refreshing the Grid. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4DMBV/",
            "exampleDescription": "Invoke the clearfilters method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :filterable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"clearFilters()\">Clear Filters&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      clearFilters: function () {\n        this.$refs.myGrid.clearfilters();\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "getfilterinformation",
            "description": "<P>Gets the information about the Grid filters. The method returns an array of the applied filters. The returned information includes the filter objects and filter columns. Each filter in the Array has the following fields: </P>\n<UL><LI>filter - a filter object which may contain one or more filters. <BR>Properties and Methods of the filter object. \r\n<UL>\r\n<LI>getfilters - returns an array of all filters in the filter object. Each filter in the Array has: \r\n<UL>\r\n<LI>value - filter's value. \r\n<LI>id - filter's id. \r\n<LI>condition - filter's operator. For string filter the value could be: 'EMPTY', 'NOT_EMPTY', 'CONTAINS', 'CONTAINS_CASE_SENSITIVE', 'DOES_NOT_CONTAIN', 'DOES_NOT_CONTAIN_CASE_SENSITIVE', 'STARTS_WITH', 'STARTS_WITH_CASE_SENSITIVE', 'ENDS_WITH', 'ENDS_WITH_CASE_SENSITIVE', 'EQUAL', 'EQUAL_CASE_SENSITIVE', 'NULL', 'NOT_NULL. For Date and number filter the value could be: 'EQUAL', 'NOT_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'NULL', 'NOT_NULL'. For boolean filter, the value could be: 'EQUAL', 'NOT_EQUAL' \r\n<LI>type - filter's type - 'stringfilter', 'numericfilter', 'booleanfilter' or 'datefilter'. </LI></UL>\r\n<LI>operator - 'and' or 'or'. Determines the connection between the filters in the group. </LI></UL>\r\n<LI>datafield - the column's datafield. \r\n<LI>displayfield - the column's display field. </LI></UL>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/uyvqL/",
            "exampleDescription": "Invoke the getfilterinformation method of the jqxGrid.",
            "returnDataType": "any",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "filterable": "true"
            }
        },
        {
            "name": "getcolumnat",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "3" ]
            }
        },
        {
            "name": "removefilter",
            "description": "<P>Removes a filter from the Grid. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4Q9PM/",
            "exampleDescription": "Invoke the removefilter method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "refreshGrid",
                    "dataType": "boolean",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :filterable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"200\" @click=\"removeFilter()\">Remove Contact Name Filter&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      removeFilter: function () {\n        this.$refs.myGrid.removefilter('ContactName');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "refreshfilterrow",
            "description": "<P>Refreshes the filter row and updates the filter widgets. The filter row's widgets are synchronized with the applied filters. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/CQye8/",
            "exampleDescription": "Invoke the refreshfilterrow method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :filterable=\"true\" :showfilterrow=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"200\" @click=\"refresh()\">Refresh filter row&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      addFilters: function() {\n        let filtergroup = new jqx.filter();\n        let filter_or_operator = 1;\n        let filtervalue = 'Maria';\n        let filtercondition = 'contains';\n        let filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n        filtergroup.addfilter(filter_or_operator, filter);\n        this.$refs.myGrid.addfilter('ContactName', filtergroup);\n        this.$refs.myGrid.applyfilters();\n      },\n      refresh: function () {\n        this.addFilters()\n        this.$refs.myGrid.refreshfilterrow();\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "gotopage",
            "description": "<P>Navigates to a page when the Grid paging is enabled i.e when the pageable property value is true. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tYPyV/",
            "exampleDescription": "Invoke the gotopage method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "pagenumber",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "2" ]
            },
            "extraData": {
                "pageable": "true",
                "pagesize": "1"
            }
        },
        {
            "name": "gotoprevpage",
            "description": "<P>Navigates to a previous page when the Grid paging is enabled i.e when the pageable property value is true. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8uCXc/",
            "exampleDescription": "Invoke the gotoprevpage method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :pageable=\"true\" :pagesize=\"1\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;margin-top: 20px;\" :width=\"100\" @click=\"prevPage()\">Previous Page&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"nextPage()\">Next Page&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      prevPage: function () {\n        this.$refs.myGrid.gotoprevpage();\n      },\n      nextPage: function () {\n        this.$refs.myGrid.gotonextpage();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "gotonextpage",
            "description": "<P>Navigates to a next page when the Grid paging is enabled i.e when the pageable property value is true. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hNhTF/",
            "exampleDescription": "Invoke the gotonextpage method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :pageable=\"true\" :pagesize=\"1\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;margin-top: 20px;\" :width=\"100\" @click=\"prevPage()\">Previous Page&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"nextPage()\">Next Page&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      prevPage: function () {\n        this.$refs.myGrid.gotoprevpage();\n      },\n      nextPage: function () {\n        this.$refs.myGrid.gotonextpage();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "addrow",
            "description": "<P>Adds a new row or multiple rows. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>addrow</CODE> method. Add a new row. </P>\n<PRE><CODE>\r\n// @param row id. Pass null, if you want the new id to be auto-generated or pass a row id.\r\n// @param row data. The expected value is a JSON object.\r\nvar value = $('#jqxGrid').jqxGrid('addrow', rowid, newdata);\r\n                        </CODE></PRE>\n<P>Invoke the <CODE>addrow</CODE> method. Add a new empty row. </P>\n<PRE><CODE>\r\n// @param row id. Pass null, if you want the new id to be auto-generated or pass a row id.\r\n// @param row data. The expected value is a JSON object.\r\nvar value = $('#jqxGrid').jqxGrid('addrow', rowid, {});\r\n                        </CODE></PRE>\n<P>Invoke the <CODE>addrow</CODE> method. Add several rows. In order to add several rows, you need to pass an Array of row ids and an array of rows as parameters. If you pass null as first parameter, the Grid will try to auto generate the row ids. </P>\n<PRE><CODE>\r\nvar rows = new Array();\r\nfor (var i = 0; i &lt; 10; i++) {\r\n    var datarow = generaterow();\r\n    rows.push(datarow);\r\n}\r\n$(\"#jqxgrid\").jqxGrid('addrow', null, rows);\r\n                        </CODE></PRE>\n<P>When you call the <CODE>addrow</CODE> method, the Grid will also call the source object's <CODE>addrow</CODE> callback function(if defined). You can use that callback function for server synchronization.</P>\n<PRE><CODE>\r\nvar source =\r\n{\r\n    url: url,\r\n    datatype: \"json\",\r\n    datafields:\r\n    [\r\n        { name: 'firstname', type: 'string' },\r\n        { name: 'lastname', type: 'string' },\r\n        { name: 'productname', type: 'string' },\r\n        { name: 'quantity', type: 'number' },\r\n        { name: 'price', type: 'number' },\r\n        { name: 'total', type: 'number' }\r\n    ],\r\n    addrow: function (rowid, rowdata, position, commit) {\r\n        // synchronize with the server - send insert command\r\n        // call commit with parameter true if the synchronization with the server was successful. \r\n        // and with parameter false if the synchronization has failed.\r\n        // you can pass additional argument to the commit callback which represents the new ID if it is generated from a Database. Example: commit(true, idInDB) where \"idInDB\" is the row's ID in the Database.\r\n        commit(true);\r\n    }\r\n};\r\n </CODE></PRE>\n<CODE>addrow</CODE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/fZhEc/",
            "exampleDescription": "Invoke the addrow method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowIds",
                    "dataType": "string/number/Array",
                    "ts_dataType": "any",
                    "description": "rowID or rowIds. You can use getrowid method for getting the ID of a row.",
                    "optional": false
                },
                {
                    "name": "data",
                    "dataType": "object/Array",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "rowPosition",
                    "dataType": "string",
                    "ts_dataType": "any",
                    "description": "\"first\" or \"last\"",
                    "optional": true
                }
            ],
            "exampleInit": {
                "args": [ "1", "{}" ]
            }
        },
        {
            "name": "begincelledit",
            "description": "<P>Shows the cell's editor. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/skzmE/",
            "exampleDescription": "Invoke the begincelledit method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :editable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;margin-top: 20px;\" :width=\"100\" @click=\"beginEdit()\">Begin Cell Edit&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"endEdit()\">End Cell Edit&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      beginEdit: function () {\n        this.$refs.myGrid.begincelledit(1, 'Title');\n      },\n      endEdit: function () {\n        this.$refs.myGrid.endcelledit(1, 'Title', true);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "beginrowedit",
            "description": "<P>Shows the cell editors for an entire row. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/nUc8P/",
            "exampleDescription": "Invoke the beginrowedit method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :editable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;margin-top: 20px;\" :width=\"100\" @click=\"beginEdit()\">Begin Row Edit&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"endEdit()\">End Row Edit&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      beginEdit: function () {\n        this.$refs.myGrid.beginrowedit(1);\n      },\n      endEdit: function () {\n        this.$refs.myGrid.endrowedit(1, true);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "closemenu",
            "description": "<P>Closes a column's menu. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/cczs8po6/",
            "exampleDescription": "Invoke the closemenu method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :filterable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px; margin-top: 20px;\" :width=\"100\" @click=\"openMenu()\">Open Menu&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"closeMenu()\">Close Menu&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      openMenu: function () {\n        this.$refs.myGrid.openmenu('ContactName');\n      },\n      closeMenu: function () {\n        this.$refs.myGrid.closemenu();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "deleterow",
            "description": "<P>Deletes a row or multiple rows. Returns a boolean value. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>deleterow</CODE> method. </P>\n<PRE><CODE>\r\n// @param row id. Use the 'getrowid' method to get the id of a row.\r\n$('#jqxGrid').jqxGrid('deleterow', rowid);\r\n                        </CODE></PRE>\n<P>Invoke the <CODE>deleterow</CODE> method with an Array of row ids. If you pass an array of row ids, the Grid will delete multiple rows. </P>\n<PRE><CODE>\r\n// get the rows loaded from the data source. Note that \"getboundrows\" method returns an array of rows loaded from the data source. The Grid's sorting, filtering, grouping and paging will not affect the result of the \"getboundrows\" method. If you want to get an array of the displayed rows, use the \"getdisplayrows\" method instead.\r\nvar rows = $(\"#jqxgrid\").jqxGrid('getboundrows');\r\n// populate an array with the first and second row ids. \"uid\" is the row's id. \r\nvar rowIDs = new Array();\r\nrowIDs.push(rows[0].uid);\r\nrowIDs.push(rows[1].uid);\r\n// delete the first and second rows.\r\n$(\"#jqxgrid\").jqxGrid('deleterow', rowIDs);\r\n</CODE></PRE>\n<P>When you call the <CODE>deleterow</CODE> method, the Grid will also call the source object's <CODE>deleterow</CODE> callback function(if defined). You can use that callback function for server synchronization.</P>\n<PRE><CODE>\r\nvar source =\r\n{\r\n    url: url,\r\n    datatype: \"json\",\r\n    datafields:\r\n    [\r\n        { name: 'firstname', type: 'string' },\r\n        { name: 'lastname', type: 'string' },\r\n        { name: 'productname', type: 'string' },\r\n        { name: 'quantity', type: 'number' },\r\n        { name: 'price', type: 'number' },\r\n        { name: 'total', type: 'number' }\r\n    ],\r\n    deleterow: function (rowid, commit) {\r\n        // synchronize with the server - send delete command\r\n        // call commit with parameter true if the synchronization with the server was successful \r\n        // and with parameter false if the synchronization has failed.\r\n        commit(true);\r\n    }\r\n};\r\n </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dS357/",
            "exampleDescription": "Invoke the deleterow method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowIds",
                    "dataType": "string/number/Array",
                    "ts_dataType": "string | number | Array<number | string>",
                    "description": "rowID or rowIds. You can use getrowid method for getting the ID of a row.",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "1" ]
            }
        },
        {
            "name": "endcelledit",
            "description": "<P>Hides the edit cell's editor and saves or cancels the changes. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Z6WHX/",
            "exampleDescription": "Invoke the endcelledit method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "confirmChanges",
                    "dataType": "boolean",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :editable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;margin-top: 20px;\" :width=\"100\" @click=\"beginEdit()\">Begin Cell Edit&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"endEdit()\">End Cell Edit&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      beginEdit: function () {\n        this.$refs.myGrid.begincelledit(1, 'Title');\n      },\n      endEdit: function () {\n        this.$refs.myGrid.endcelledit(1, 'Title', true);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "endrowedit",
            "description": "<P>Hides the edited row's editors and saves or cancels the changes. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/6Lm7S/",
            "exampleDescription": "Invoke the endrowedit method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "confirmChanges",
                    "dataType": "boolean",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :editable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;margin-top: 20px;\" :width=\"100\" @click=\"beginEdit()\">Begin Row Edit&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"endEdit()\">End Row Edit&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      beginEdit: function () {\n        this.$refs.myGrid.beginrowedit(1);\n      },\n      endEdit: function () {\n        this.$refs.myGrid.endrowedit(1, true);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "getcell",
            "description": "<P>Gets a cell. Returns an object with the following fields: </P>\n<UL><LI>value - cell's value. \r\n<LI>row - cell's row number. \r\n<LI>column - column's datafield. </LI></UL>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9KHrm/",
            "exampleDescription": "Invoke the getcell method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "GridGetCell",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "datafield",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "1", "'ContactName'" ]
            }
        },
        {
            "name": "getcellatposition",
            "description": "<P>Gets a cell at specific position. Returns an object with the following fields: </P>\n<UL><LI>value - cell's value. \r\n<LI>row - cell's row number. \r\n<LI>column - column's datafield. </LI></UL>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Q3RQG/",
            "exampleDescription": "Invoke the getcellatposition method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "GridGetCell",
            "arguments": [
                {
                    "name": "left",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "top",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "10", "100" ]
            }
        },
        {
            "name": "getcelltext",
            "description": "<P>Gets the text of a cell. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/m5Fkb/",
            "exampleDescription": "Invoke the getcelltext method of the jqxGrid.",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "1", "'ContactName'" ]
            }
        },
        {
            "name": "getcelltextbyid",
            "description": "<P>Gets the text of a cell. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FWdLv/",
            "exampleDescription": "Invoke the getcelltextbyid method of the jqxGrid.",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "rowID",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "1", "'ContactName'" ]
            }
        },
        {
            "name": "getcellvaluebyid",
            "description": "<P>Gets the value of a cell. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/2NmQW/",
            "exampleDescription": "Invoke the getcellvaluebyid method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "rowID",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "1", "'ContactName'" ]
            }
        },
        {
            "name": "getcellvalue",
            "description": "<P>Gets the value of a cell. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/pyE55/",
            "exampleDescription": "Invoke the getcellvalue method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "1", "'ContactName'" ]
            }
        },
        {
            "name": "isBindingCompleted",
            "description": "<P>Returns whether the binding is completed and if the result is true, this means that you can invoke methods and set properties. Otherwise, if the binding is not completed and you try to set a property or invoke a method, the widget will throw an exception. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/of827b7q/",
            "exampleDescription": "Invoke the isBindingCompleted method of the jqxGrid.",
            "returnDataType": "boolean",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "openmenu",
            "description": "<P>Displays a column's menu. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/cczs8po6/",
            "exampleDescription": "Invoke the openmenu method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :filterable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px; margin-top: 20px;\" :width=\"100\" @click=\"openMenu()\">Open Menu&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"closeMenu()\">Close Menu&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      openMenu: function () {\n        this.$refs.myGrid.openmenu('ContactName');\n      },\n      closeMenu: function () {\n        this.$refs.myGrid.closemenu();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "setcellvalue",
            "description": "<P>Sets a new value to a cell. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/uuW2H/",
            "exampleDescription": "Invoke the setcellvalue method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "value",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "1", "'ContactName'", "'New Name'" ]
            }
        },
        {
            "name": "setcellvaluebyid",
            "description": "<P>Sets a new value to a cell. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9Qhtg/",
            "exampleDescription": "Invoke the setcellvaluebyid method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowID",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "value",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "1", "'ContactName'", "'New Name'" ]
            }
        },
        {
            "name": "showvalidationpopup",
            "description": "<P>Displays a validation popup below a Grid cell. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8gUGD/",
            "exampleDescription": "Invoke the showvalidationpopup method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "validationMessage",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "1", "'ContactName'", "'Error message'" ]
            }
        },
        {
            "name": "updaterow",
            "description": "<P>Updates a row or multiple rows. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>updaterow</CODE> method. </P>\n<PRE><CODE>\r\n// @param row id. Use the 'getrowid' method to get the id of a row.\r\n// @param row data. The expected value is a JSON object.\r\n$('#jqxGrid').jqxGrid('updaterow', rowid, newdata);\r\n                        </CODE></PRE>\n<P>Invoke the <CODE>updaterow</CODE> method to update multiple rows at once.</P>\n<PRE><CODE>\r\nvar rows = $(\"#jqxgrid\").jqxGrid('getboundrows');\r\n// prepare an array with new rows.\r\nvar newRows = new Array();\r\nnewRows.push(generaterow());\r\nnewRows.push(generaterow());\r\n// prepare an array with row ids to update.\r\nvar rowIDs = new Array();\r\nrowIDs.push(rows[0].uid);\r\nrowIDs.push(rows[1].uid);\r\n$(\"#jqxgrid\").jqxGrid('updaterow', rowIDs, newRows);\r\n</CODE></PRE>\n<P>When you call the <CODE>updaterow</CODE> method, the Grid will also call the source object's <CODE>updaterow</CODE> callback function(if defined). You can use that callback function for server synchronization.</P>\n<PRE><CODE>\r\nvar source =\r\n{\r\n    url: url,\r\n    datatype: \"json\",\r\n    datafields:\r\n    [\r\n        { name: 'firstname', type: 'string' },\r\n        { name: 'lastname', type: 'string' },\r\n        { name: 'productname', type: 'string' },\r\n        { name: 'quantity', type: 'number' },\r\n        { name: 'price', type: 'number' },\r\n        { name: 'total', type: 'number' }\r\n    ],\r\n    updaterow: function (rowid, rowdata, commit) {\r\n        // synchronize with the server - send update command\r\n        // call commit with parameter true if the synchronization with the server was successful \r\n        // and with parameter false if the synchronization has failed.\r\n        commit(true);\r\n    }\r\n};\r\n </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/KCqqG/",
            "exampleDescription": "Invoke the updaterow method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowIds",
                    "dataType": "string/number/Array",
                    "ts_dataType": "string | number | Array<number | string>",
                    "description": "rowID or rowIds. You can use getrowid method for getting the ID of a row.",
                    "optional": false
                },
                {
                    "name": "data",
                    "dataType": "object/Array",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "1", "{ContactName: 'New Name'}" ]
            }
        },
        {
            "name": "clearselection",
            "description": "<P>Clears the selection. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/TsSmh/",
            "exampleDescription": "Invoke the clearselection method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :selectionmode=\"'multiplecells'\" :autoheight=\"true\" />\n    &lt;JqxButton :width=\"200\" @click=\"clearSelection()\">Clear Selection&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      clearSelection: function () {\n        this.$refs.myGrid.clearselection();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "getselectedrowindex",
            "description": "<P>The expected selection mode is 'singlerow', 'multiplerows' or 'multiplerowsextended'</P>\n<P>Gets the bound index of the selected row. Returns -1, if there's no selection. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/JMLRB/",
            "exampleDescription": "Invoke the getselectedrowindex method of the jqxGrid.",
            "returnDataType": "number",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"select()\">Select row&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"unselect()\">Unselect Row&lt;/JqxButton>\n    &lt;JqxButton :width=\"160\" @click=\"getSelected()\">Get selected row index&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      select: function () {\n        this.$refs.myGrid.selectrow(1);\n      },\n      unselect: function () {\n        this.$refs.myGrid.unselectrow(1);\n      },\n      getSelected: function () {\n        const selected = this.$refs.myGrid.getselectedrowindex();\n        console.log(selected);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "getselectedrowindexes",
            "description": "<P>The expected selection mode is 'singlerow', 'multiplerows' or 'multiplerowsextended'</P>\n<P>Gets the indexes of the selected rows. Returns an array of the selected rows. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Vus5k/",
            "exampleDescription": "Invoke the getselectedrowindexes method of the jqxGrid.",
            "returnDataType": "Array",
            "ts_returnDataType": "Array<number>",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :selectionmode=\"'multiplerows'\" :autoheight=\"true\" />\n    &lt;JqxButton :width=\"200\" @click=\"getSelectedRowIndexes()\">Get selected row indexes&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      getSelectedRowIndexes: function () {\n        const selected = this.$refs.myGrid.getselectedrowindexes();\n        console.log(selected);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "getselectedcell",
            "description": "<P>The expected selection mode is 'singlecell', 'multiplecells' or 'multiplecellsextended'</P>\n<P>Gets the selected cell. The returned value is an object with two fields: 'rowindex' - the row's bound index and 'datafield' - the column's datafield. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vFJ35/",
            "exampleDescription": "Invoke the getselectedcell method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "GridGetSelectedCell",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :selectionmode=\"'singlecell'\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"select()\">Select cell&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"unselect()\">Unselect Cell&lt;/JqxButton>\n    &lt;JqxButton :width=\"140\" @click=\"getSelected()\">Get selected cell&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      select: function () {\n        this.$refs.myGrid.selectcell(1, 'ContactName');\n      },\n      unselect: function () {\n        this.$refs.myGrid.unselectcell(1, 'ContactName');\n      },\n      getSelected: function () {\n        const selected = this.$refs.myGrid.getselectedcell();\n        console.log(selected);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "getselectedcells",
            "description": "<P>The expected selection mode is 'singlecell', 'multiplecells' or 'multiplecellsextended'</P>\n<P>Gets all selected cells. Returns an array of all selected cells. Each cell in the array is an object with two fields: 'rowindex' - the row's bound index and 'datafield' - the column's datafield. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/kBNWp/",
            "exampleDescription": "Invoke the getselectedcells method of the jqxGrid.",
            "returnDataType": "Array",
            "ts_returnDataType": "Array<GridGetSelectedCell>",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :selectionmode=\"'multiplecells'\" :autoheight=\"true\" />\n    &lt;JqxButton :width=\"200\" @click=\"getSelectedCells()\">Get selected cells&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      getSelectedCells: function () {\n        const selected = this.$refs.myGrid.getselectedcells();\n        console.log(selected);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "selectcell",
            "description": "<P>The expected selection mode is 'singlecell', 'multiplecells' or 'multiplecellsextended'</P>\n<P>Selects a cell. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Fwndr/",
            "exampleDescription": "Invoke the selectcell method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :selectionmode=\"'singlecell'\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"select()\">Select cell&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"unselect()\">Unselect Cell&lt;/JqxButton>\n    &lt;JqxButton :width=\"140\" @click=\"getSelected()\">Get selected cell&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      select: function () {\n        this.$refs.myGrid.selectcell(1, 'ContactName');\n      },\n      unselect: function () {\n        this.$refs.myGrid.unselectcell(1, 'ContactName');\n      },\n      getSelected: function () {\n        const selected = this.$refs.myGrid.getselectedcell();\n        console.log(selected);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "selectallrows",
            "description": "<P>The selection mode should be set to: 'multiplerows' or 'multiplerowsextended'</P>\n<P>Selects all Grid rows. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Jbsd8/",
            "exampleDescription": "Invoke the selectallrows method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "selectionmode": "'multiplerows'"
            }
        },
        {
            "name": "selectrow",
            "description": "<P>The expected selection mode is 'singlerow', 'multiplerows' or 'multiplerowsextended'</P>\n<P>Selects a row. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FQxrf/",
            "exampleDescription": "Invoke the selectrow method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"select()\">Select row&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"unselect()\">Unselect Row&lt;/JqxButton>\n    &lt;JqxButton :width=\"160\" @click=\"getSelected()\">Get selected row index&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      select: function () {\n        this.$refs.myGrid.selectrow(1);\n      },\n      unselect: function () {\n        this.$refs.myGrid.unselectrow(1);\n      },\n      getSelected: function () {\n        const selected = this.$refs.myGrid.getselectedrowindex();\n        console.log(selected);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "unselectrow",
            "description": "<P>The expected selection mode is 'singlerow', 'multiplerows' or 'multiplerowsextended'</P>\n<P>Unselects a row. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tQhCS/",
            "exampleDescription": "Invoke the unselectrow method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"select()\">Select row&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"unselect()\">Unselect Row&lt;/JqxButton>\n    &lt;JqxButton :width=\"160\" @click=\"getSelected()\">Get selected row index&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      select: function () {\n        this.$refs.myGrid.selectrow(1);\n      },\n      unselect: function () {\n        this.$refs.myGrid.unselectrow(1);\n      },\n      getSelected: function () {\n        const selected = this.$refs.myGrid.getselectedrowindex();\n        console.log(selected);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "unselectcell",
            "description": "<P>The expected selection mode is 'singlecell', 'multiplecells' or 'multiplecellsextended'</P>\n<P>Unselects a cell. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zxYc9/",
            "exampleDescription": "Invoke the uneslectcell method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "rowBoundIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :selectionmode=\"'singlecell'\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"select()\">Select cell&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"unselect()\">Unselect Cell&lt;/JqxButton>\n    &lt;JqxButton :width=\"140\" @click=\"getSelected()\">Get selected cell&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      select: function () {\n        this.$refs.myGrid.selectcell(1, 'ContactName');\n      },\n      unselect: function () {\n        this.$refs.myGrid.unselectcell(1, 'ContactName');\n      },\n      getSelected: function () {\n        const selected = this.$refs.myGrid.getselectedcell();\n        console.log(selected);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "getcolumnaggregateddata",
            "description": "<P>Gets the aggregated data of a Grid column. Returns a JSON object. Each field name is the aggregate's type('min', 'max', 'sum', etc.).</P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3y7RN/",
            "exampleDescription": "Invoke the getcolumnaggregateddata method of the jqxGrid.",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "description": "column's data field",
                    "optional": false
                },
                {
                    "name": "aggregates",
                    "dataType": "Array",
                    "ts_dataType": "Array<any>",
                    "description": "Array of aggregates 'min', 'max', 'sum', etc.",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :showaggregates=\"true\" :showstatusbar=\"true\" :autoheight=\"true\" />\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title', aggregates: ['count'] },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country', aggregates: ['count'] }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function() {\n      const data = this.$refs.myGrid.getcolumnaggregateddata('Country', ['count']);\n      console.log(data);\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "refreshaggregates",
            "description": "<P>Refreshes the Aggregates in the Grid's status bar.</P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/TLq9d/",
            "exampleDescription": "Invoke the refreshaggregates method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :showaggregates=\"true\" :showstatusbar=\"true\" :autoheight=\"true\" />\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title', aggregates: ['count'] },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country', aggregates: ['count'] }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function() {\n      this.$refs.myGrid.refreshaggregates();\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "renderaggregates",
            "description": "<P>Renders the aggregates in the Grid's status bar.</P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Ne5a9/",
            "exampleDescription": "Invoke the renderaggregates method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :showaggregates=\"true\" :showstatusbar=\"true\" :autoheight=\"true\" />\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title', aggregates: ['count'] },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country', aggregates: ['count'] }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function() {\n      this.$refs.myGrid.renderaggregates();\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "exportdata",
            "description": "<P>Exports all rows loaded within the Grid to Excel, XML, CSV, TSV, HTML or JSON. </P>\n<PRE><CODE>var data = $(\"#jqxgrid\").jqxGrid('exportdata', 'json');</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/qs5mr/",
            "exampleDescription": "Invoke the exportdata method of the jqxGrid.",
            "returnDataType": "any",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "dataType",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "fileName",
                    "dataType": "string",
                    "description": "",
                    "optional": true
                },
                {
                    "name": "exportHeader",
                    "dataType": "boolean",
                    "description": "",
                    "optional": true
                },
                {
                    "name": "rows",
                    "dataType": "Array",
                    "ts_dataType": "Array<number>",
                    "description": "",
                    "optional": true
                },
                {
                    "name": "exportHiddenColumns",
                    "dataType": "boolean",
                    "description": "",
                    "optional": true
                },
                {
                    "name": "serverURL",
                    "dataType": "string",
                    "description": "",
                    "optional": true
                },
                {
                    "name": "charSet",
                    "dataType": "string",
                    "description": "",
                    "optional": true
                }
            ],
            "exampleInit": {
                "args": [ "'xls'", "'grid'" ]
            }
        },
        {
            "name": "getstate",
            "description": "<P>Gets the Grid's state. the getstate method gets the following information: 'sort column, sort order, page number, page size, applied filters and filter row values, column widths and visibility, cells and rows selection and groups. </P>\n<UL><LI>width - the Grid's width. \r\n<LI>height - the Grid's height. \r\n<LI>pagenum - the Grid's page number. \r\n<LI>pagesize - the Grid's page size. \r\n<LI>pagesizeoptions - the Grid's page size options - an array of the available page sizes. \r\n<LI>sortcolumn - the Grid's sort column. The value is the column's datafield or null, if sorting is not applied. \r\n<LI>sortdirection - JSON object with two boolean fields: 'ascending' and 'descending'. \r\n<LI>filters - the applied filters. See the 'getfilterinformation' method. \r\n<LI>groups - the Grid's groups array which contains the grouped columns data fields. \r\n<LI>columns - an array of Columns. Each column in the array has the following fields: \r\n<UL>\r\n<LI>width - column's width. \r\n<LI>hidden - column's visible state. \r\n<LI>pinned - column's pinned state. \r\n<LI>groupable - column's groupable state. \r\n<LI>resizable - column's resizable state. \r\n<LI>draggable - column's draggable state. \r\n<LI>text - column's text. \r\n<LI>align - column's align. \r\n<LI>cellsalign - column's cells align. </LI></UL></LI></UL>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/WMD85/",
            "exampleDescription": "Invoke the getstate method of the jqxGrid.",
            "returnDataType": "object",
            "ts_returnDataType": "GridGetState",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :sortable=\"true\" :filterable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px; margin-top: 20px;\" :width=\"100\" @click=\"savestate()\">Save state&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-right: 20px; margin-top: 20px;\" :width=\"100\" @click=\"loadstate()\">Load State&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"getstate()\">Get state&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      savestate: function () {\n        this.$refs.myGrid.savestate();\n      },\n      loadstate: function () {\n        this.$refs.myGrid.loadstate();\n      },\n      getstate: function () {\n        const state = this.$refs.myGrid.getstate();\n        console.log(state);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "loadstate",
            "description": "<P>Loads the Grid's state. the loadstate method loads the following information: 'sort column, sort order, page number, page size, applied filters and filter row values, column widths and visibility, cells and rows selection and groups. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/nyPsV/",
            "exampleDescription": "Invoke the loadstate method of the jqxGrid.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "stateobject",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "description": "The state object returned by saveState method call.",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :sortable=\"true\" :filterable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px; margin-top: 20px;\" :width=\"100\" @click=\"savestate()\">Save state&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-right: 20px; margin-top: 20px;\" :width=\"100\" @click=\"loadstate()\">Load State&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"getstate()\">Get state&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      savestate: function () {\n        this.$refs.myGrid.savestate();\n      },\n      loadstate: function () {\n        this.$refs.myGrid.loadstate();\n      },\n      getstate: function () {\n        const state = this.$refs.myGrid.getstate();\n        console.log(state);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "savestate",
            "description": "<P>Saves the Grid's current state. the savestate method saves the following information: 'sort column, sort order, page number, page size, applied filters and filter row values, column widths and visibility, cells and rows selection and groups. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/L4L3P/",
            "exampleDescription": "Invoke the savestate method of the jqxGrid.",
            "returnDataType": "Object",
            "ts_returnDataType": "GridGetState",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :sortable=\"true\" :filterable=\"true\" :autoheight=\"true\" />\n    &lt;JqxButton style=\"margin-right: 20px; margin-top: 20px;\" :width=\"100\" @click=\"savestate()\">Save state&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-right: 20px; margin-top: 20px;\" :width=\"100\" @click=\"loadstate()\">Load State&lt;/JqxButton>\n    &lt;JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"getstate()\">Get state&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      savestate: function () {\n        this.$refs.myGrid.savestate();\n      },\n      loadstate: function () {\n        this.$refs.myGrid.loadstate();\n      },\n      getstate: function () {\n        const state = this.$refs.myGrid.getstate();\n        console.log(state);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n  }\n&lt;/style>"
            }
        }
    ]
}