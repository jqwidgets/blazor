{
    "widget": {
        "name": "jqxInput",
        "description": "Represents an Input with auto-complete capabilities.",
        "angular2": {
            "name": "jqxInputComponent",
            "selector": "jqxInput"
        }
    },
    "dataTypes": [
        {
            "name": "InputSearchMode",
            "ts_dataType": "enum",
            "enumOptions": [ "none", "contains", "containsignorecase", "equals", "equalsignorecase", "startswithignorecase", "startswith", "endswithignorecase", "endswith" ]
        }
    ],
    "exampleElementsInit": {
        "source": "countries"
    },
    "exampleInit": {
        "width": "250",
        "height": "25",
        "source": "source"
    },
    "exampledInitExtraData": {
        "properties": "source: [\n          'Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Antarctica', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Australia', 'Austria', 'Azerbaijan',\n          'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia', 'Bosnia and Herzegovina', 'Botswana', 'Brazil'\n        ]",
        "beforeCreate": "",
        "mounted": "",
        "methods": ""
    },
    "properties": [
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Enables or disables the jqxInput. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$('#jqxInput').jqxInput({disabled: false });</CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxInput').jqxInput('disabled');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/HqFkJ/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "dropDownWidth",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxInput's dropDown width. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>dropDownWidth</CODE> property. </P>\n<PRE><CODE>$('#jqxInput').jqxInput({dropDownWidth: 200 });</CODE></PRE>\n\r\n<P>Get the <CODE>dropDownWidth</CODE> property. </P>\n<PRE><CODE>var dropDownWidth = $('#jqxInput').jqxInput('dropDownWidth');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/YzxXN/",
            "exampleDescription": "dropDownWidth is set to 200",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "dropDownWidth": "200"
            }
        },
        {
            "name": "displayMember",
            "defaultValue": "\"\"",
            "description": "<P>Sets or gets the displayMember of the Items. The displayMember specifies the name of an object property to display. The name is contained in the collection specified by the 'source' property. </P>",
            "example": "<pre><CODE>$(\"#jqxInput\").jqxInput({displayMember: 'firstName'});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/nC7GR/",
            "exampleDescription": "displayMember is set to \"ContactName\"",
            "dataType": "string",
            "exampleInit": {
                "valueMember": "CompanyId",
                "displayMember": "CompanyName"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxInput ref=\"myInput\"\n       :width=\"250\" :height=\"25\" :source=\"source\" :displayMember=\"'ContactName'\"/>\n&lt;/template>\n\n&lt;script>\n  import JqxInput from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxinput.vue';\n\n  export default {\n    components: {\n      JqxInput\n    },\n    data: function () {\n      return {\n        source: [\n          { \"CompanyName\": \"Company 1\", \"ContactName\": \"Ana\" },\n          { \"CompanyName\": \"Company 2\", \"ContactName\": \"Maria\" }\n        ]\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "height",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxInput's height. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$('#jqxInput').jqxInput({height: 35 });</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxInput').jqxInput('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/HGZqD/",
            "exampleDescription": "height is set to 25",
            "dataType": "number",
            "ts_dataType": "string | number"
        },
        {
            "name": "items",
            "defaultValue": "8",
            "description": "<P>Sets or gets the maximum number of items to display in the popup menu. </P>",
            "example": "<pre><CODE>$(\"#jqxInput\").jqxInput({items: 10 });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Zz5GN/",
            "exampleDescription": "items is set to 10",
            "dataType": "number",
            "exampleInit": {
                "items": "10"
            }
        },
        {
            "name": "minLength",
            "defaultValue": "1",
            "description": "<P>Sets or gets the minimum character length needed before triggering auto-complete suggestions. </P>",
            "example": "<pre><CODE>$(\"#jqxInput\").jqxInput({minLength: 2 });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/xKQY9/",
            "exampleDescription": "minLength is set to 2",
            "dataType": "number",
            "exampleInit": {
                "minLength": "2"
            }
        },
        {
            "name": "maxLength",
            "defaultValue": "null",
            "description": "<P>Sets or gets the maximum character length of the input. </P>",
            "example": "<pre><CODE>$(\"#jqxInput\").jqxInput({maxLength: 10 });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/WK6c6/",
            "exampleDescription": "maxLength is set to 10",
            "dataType": "number",
            "exampleInit": {
                "maxLength": "10"
            }
        },
        {
            "name": "opened",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether the auto-suggest popup is opened.</P>",
            "example": "<pre><CODE>$('#jqxInput').jqxInput({opened : true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/NkkPY/",
            "exampleDescription": "opened is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "opened": "true"
            },
            "customExample": {
                "codeType": "get",
                "code": "&lt;template>\n  &lt;JqxInput ref=\"myInput\"\n       :width=\"250\" :height=\"25\" :source=\"source\"/>\n&lt;/template>\n\n&lt;script>\n  import JqxInput from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxinput.vue';\n\n  export default {\n    components: {\n      JqxInput\n    },\n    data: function () {\n      return {\n        source: [\n          'Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Antarctica', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Australia', 'Austria', 'Azerbaijan',\n          'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia', 'Bosnia and Herzegovina', 'Botswana', 'Brazil'\n        ]\n      }\n    },\n    mounted: function () {\n      let opened = this.$refs.myInput.opened;\n      alert('Opened: ' + opened);\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "placeHolder",
            "defaultValue": "\"\"",
            "description": "<P>Sets or gets the input's place holder. </P>",
            "example": "<pre><CODE>$(\"#jqxInput\").jqxInput({placeHolder: \"Enter text\" });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FvxaB/",
            "exampleDescription": "placeHolder is set to \"Enter a Country\"",
            "dataType": "string",
            "exampleInit": {
                "placeHolder": "Enter a Country"
            }
        },
        {
            "name": "popupZIndex",
            "defaultValue": "20000",
            "description": "<P>Sets or gets the auto-suggest popup's z-index. </P>",
            "example": "<pre><CODE>$(\"#jqxInput\").jqxInput({popupZIndex: 999999});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/SWQsU/",
            "exampleDescription": "popupZIndex is set to 99999",
            "dataType": "number",
            "exampleInit": {
                "popupZIndex": "99999"
            }
        },
        {
            "name": "query",
            "defaultValue": "\"\"",
            "description": "<P>Determines the input's query. </P>",
            "example": "<pre><CODE>$(\"#jqxInput\").jqxInput({query: \"un\" });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/BcYMU/",
            "exampleDescription": "query is set to item",
            "dataType": "string",
            "exampleInit": {
                "query": "item"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxInput ref=\"myInput\"\n    :width=\"250\" :height=\"25\" :source=\"source\"\n    :placeHolder=\"'Enter a Country'\" :renderer=\"renderer\" />\n&lt;/template>\n \n&lt;script>\n  import JqxInput from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxinput.vue';\n \n  export default {\n    components: {\n      JqxInput\n    },\n    data: function () {\n      return {\n        countries: ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Brazil', 'Brunei', 'Bulgaria']\n      }\n    },\n    methods: {\n      source: function (query, response) {\n        const item = query.split(/,\\s*/).pop();\n        // update the search query.\n        this.$refs.myInput.query = item;\n        response(this.countries);\n      },\n      renderer: function (itemValue, inputValue) {\n        const terms = inputValue.split(/,\\s*/);\n        // remove the current input\n        terms.pop();\n        // add the selected item\n        terms.push(itemValue);\n        // add placeholder to get the comma-and-space at the end\n        terms.push('');\n \n        return terms.join(', ');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "renderer",
            "defaultValue": "null",
            "description": "<P>Enables you to update the input's value, after a selection from the auto-complete popup. </P>",
            "example": "<pre><CODE>\r\nvar countries = new Array(\"Afghanistan\", \"Albania\", \"Algeria\", \"Andorra\", \"Angola\", \"Antarctica\", \"Antigua and Barbuda\", \"Argentina\", \"Armenia\", \"Australia\", \"Austria\", \"Azerbaijan\", \"Bahamas\", \"Bahrain\", \"Bangladesh\", \"Barbados\", \"Belarus\", \"Belgium\", \"Belize\", \"Benin\", \"Bermuda\", \"Bhutan\", \"Bolivia\", \"Bosnia and Herzegovina\", \"Botswana\", \"Brazil\", \"Brunei\", \"Bulgaria\", \"Burkina Faso\", \"Burma\", \"Burundi\", \"Cambodia\", \"Cameroon\", \"Canada\", \"Cape Verde\", \"Central African Republic\", \"Chad\", \"Chile\", \"China\", \"Colombia\", \"Comoros\", \"Congo, Democratic Republic\", \"Congo, Republic of the\", \"Costa Rica\", \"Cote d'Ivoire\", \"Croatia\", \"Cuba\", \"Cyprus\", \"Czech Republic\", \"Denmark\", \"Djibouti\", \"Dominica\", \"Dominican Republic\", \"East Timor\", \"Ecuador\", \"Egypt\", \"El Salvador\", \"Equatorial Guinea\", \"Eritrea\", \"Estonia\", \"Ethiopia\", \"Fiji\", \"Finland\", \"France\", \"Gabon\", \"Gambia\", \"Georgia\", \"Germany\", \"Ghana\", \"Greece\", \"Greenland\", \"Grenada\", \"Guatemala\", \"Guinea\", \"Guinea-Bissau\", \"Guyana\", \"Haiti\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"Iceland\", \"India\", \"Indonesia\", \"Iran\", \"Iraq\", \"Ireland\", \"Israel\", \"Italy\", \"Jamaica\", \"Japan\", \"Jordan\", \"Kazakhstan\", \"Kenya\", \"Kiribati\", \"Korea, North\", \"Korea, South\", \"Kuwait\", \"Kyrgyzstan\", \"Laos\", \"Latvia\", \"Lebanon\", \"Lesotho\", \"Liberia\", \"Libya\", \"Liechtenstein\", \"Lithuania\", \"Luxembourg\", \"Macedonia\", \"Madagascar\", \"Malawi\", \"Malaysia\", \"Maldives\", \"Mali\", \"Malta\", \"Marshall Islands\", \"Mauritania\", \"Mauritius\", \"Mexico\", \"Micronesia\", \"Moldova\", \"Mongolia\", \"Morocco\", \"Monaco\", \"Mozambique\", \"Namibia\", \"Nauru\", \"Nepal\", \"Netherlands\", \"New Zealand\", \"Nicaragua\", \"Niger\", \"Nigeria\", \"Norway\", \"Oman\", \"Pakistan\", \"Panama\", \"Papua New Guinea\", \"Paraguay\", \"Peru\", \"Philippines\", \"Poland\", \"Portugal\", \"Qatar\", \"Romania\", \"Russia\", \"Rwanda\", \"Samoa\", \"San Marino\", \" Sao Tome\", \"Saudi Arabia\", \"Senegal\", \"Serbia and Montenegro\", \"Seychelles\", \"Sierra Leone\", \"Singapore\", \"Slovakia\", \"Slovenia\", \"Solomon Islands\", \"Somalia\", \"South Africa\", \"Spain\", \"Sri Lanka\", \"Sudan\", \"Suriname\", \"Swaziland\", \"Sweden\", \"Switzerland\", \"Syria\", \"Taiwan\", \"Tajikistan\", \"Tanzania\", \"Thailand\", \"Togo\", \"Tonga\", \"Trinidad and Tobago\", \"Tunisia\", \"Turkey\", \"Turkmenistan\", \"Uganda\", \"Ukraine\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Uruguay\", \"Uzbekistan\", \"Vanuatu\", \"Venezuela\", \"Vietnam\", \"Yemen\", \"Zambia\", \"Zimbabwe\");\r\n$(\"#jqxInput\").jqxInput({ placeHolder: \"Enter a Country\", height: 25, width: 250, \r\n    source: function (query, response) {\r\n        var item = query.split(/,\\s*/).pop();\r\n        // update the search query.\r\n        $(\"#jqxInput\").jqxInput({ query: item });\r\n        response(countries);\r\n    },\r\n    renderer: function (itemValue, inputValue) {\r\n        var terms = inputValue.split(/,\\s*/);\r\n        // remove the current input\r\n        terms.pop();\r\n        // add the selected item\r\n        terms.push(itemValue);\r\n        // add placeholder to get the comma-and-space at the end\r\n        terms.push(\"\");\r\n        var value = terms.join(\", \");\r\n        return value;\r\n    }\r\n});                        \r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/rFCK6/",
            "exampleDescription": "renderer is set to a custom function",
            "dataType": "function",
            "ts_dataType": "(itemValue?: string, inputValue?: string) => string",
            "exampleInit": {
                "renderer": "renderer"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxInput ref=\"myInput\"\n    :width=\"250\" :height=\"25\" :source=\"source\"\n    :placeHolder=\"'Enter a Country'\" :renderer=\"renderer\" />\n&lt;/template>\n \n&lt;script>\n  import JqxInput from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxinput.vue';\n \n  export default {\n    components: {\n      JqxInput\n    },\n    data: function () {\n      return {\n        countries: ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Brazil', 'Brunei', 'Bulgaria']\n      }\n    },\n    methods: {\n      source: function (query, response) {\n        const item = query.split(/,\\s*/).pop();\n        // update the search query.\n        this.$refs.myInput.query = item;\n        response(this.countries);\n      },\n      renderer: function (itemValue, inputValue) {\n        const terms = inputValue.split(/,\\s*/);\n        // remove the current input\n        terms.pop();\n        // add the selected item\n        terms.push(itemValue);\n        // add placeholder to get the comma-and-space at the end\n        terms.push('');\n \n        return terms.join(', ');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts.</P>",
            "example": "<pre><CODE>$('#jqxInput').jqxInput({rtl : true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tuTrt/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "searchMode",
            "defaultValue": "'default'",
            "description": "<P>Sets or gets the search mode. When the user types into the edit field, the jqxInput widget tries to find the searched item using the entered text and the selected search mode. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'none'</CODE></PRE>\n<PRE><CODE>'contains'</CODE></PRE>\n<PRE><CODE>'containsignorecase'</CODE></PRE>\n<PRE><CODE>'equals'</CODE></PRE>\n<PRE><CODE>'equalsignorecase'</CODE></PRE>\n<PRE><CODE>'startswithignorecase'</CODE></PRE>\n<PRE><CODE>'startswith'</CODE></PRE>\n<PRE><CODE>'endswithignorecase'</CODE></PRE>\n<PRE><CODE>'endswith'</CODE></PRE>",
            "example": "<pre><CODE>$(\"#jqxInput\").jqxInput({searchMode: 'contains' }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8DJu8/",
            "exampleDescription": "searchMode is set to 'startswithignorecase'",
            "dataType": "string",
            "ts_dataType": "enum:InputSearchMode",
            "exampleInit": {
                "searchMode": "startswithignorecase"
            }
        },
        {
            "name": "source",
            "defaultValue": "[]",
            "description": "<P>Sets the widget's data source. The 'source' function is passed two arguments, the input field's value and a callback function. The 'source' function may be used synchronously by returning an array of items or asynchronously via the callback. </P>",
            "example": "<pre><CODE>\r\nvar countries = new Array(\"Afghanistan\", \"Albania\", \"Algeria\", \"Andorra\", \"Angola\", \"Antarctica\", \"Antigua and Barbuda\", \"Argentina\", \"Armenia\", \"Australia\", \"Austria\", \"Azerbaijan\", \"Bahamas\", \"Bahrain\", \"Bangladesh\", \"Barbados\", \"Belarus\", \"Belgium\", \"Belize\", \"Benin\", \"Bermuda\", \"Bhutan\", \"Bolivia\", \"Bosnia and Herzegovina\", \"Botswana\", \"Brazil\", \"Brunei\", \"Bulgaria\", \"Burkina Faso\", \"Burma\", \"Burundi\", \"Cambodia\", \"Cameroon\", \"Canada\", \"Cape Verde\", \"Central African Republic\", \"Chad\", \"Chile\", \"China\", \"Colombia\", \"Comoros\", \"Congo, Democratic Republic\", \"Congo, Republic of the\", \"Costa Rica\", \"Cote d'Ivoire\", \"Croatia\", \"Cuba\", \"Cyprus\", \"Czech Republic\", \"Denmark\", \"Djibouti\", \"Dominica\", \"Dominican Republic\", \"East Timor\", \"Ecuador\", \"Egypt\", \"El Salvador\", \"Equatorial Guinea\", \"Eritrea\", \"Estonia\", \"Ethiopia\", \"Fiji\", \"Finland\", \"France\", \"Gabon\", \"Gambia\", \"Georgia\", \"Germany\", \"Ghana\", \"Greece\", \"Greenland\", \"Grenada\", \"Guatemala\", \"Guinea\", \"Guinea-Bissau\", \"Guyana\", \"Haiti\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"Iceland\", \"India\", \"Indonesia\", \"Iran\", \"Iraq\", \"Ireland\", \"Israel\", \"Italy\", \"Jamaica\", \"Japan\", \"Jordan\", \"Kazakhstan\", \"Kenya\", \"Kiribati\", \"Korea, North\", \"Korea, South\", \"Kuwait\", \"Kyrgyzstan\", \"Laos\", \"Latvia\", \"Lebanon\", \"Lesotho\", \"Liberia\", \"Libya\", \"Liechtenstein\", \"Lithuania\", \"Luxembourg\", \"Macedonia\", \"Madagascar\", \"Malawi\", \"Malaysia\", \"Maldives\", \"Mali\", \"Malta\", \"Marshall Islands\", \"Mauritania\", \"Mauritius\", \"Mexico\", \"Micronesia\", \"Moldova\", \"Mongolia\", \"Morocco\", \"Monaco\", \"Mozambique\", \"Namibia\", \"Nauru\", \"Nepal\", \"Netherlands\", \"New Zealand\", \"Nicaragua\", \"Niger\", \"Nigeria\", \"Norway\", \"Oman\", \"Pakistan\", \"Panama\", \"Papua New Guinea\", \"Paraguay\", \"Peru\", \"Philippines\", \"Poland\", \"Portugal\", \"Qatar\", \"Romania\", \"Russia\", \"Rwanda\", \"Samoa\", \"San Marino\", \" Sao Tome\", \"Saudi Arabia\", \"Senegal\", \"Serbia and Montenegro\", \"Seychelles\", \"Sierra Leone\", \"Singapore\", \"Slovakia\", \"Slovenia\", \"Solomon Islands\", \"Somalia\", \"South Africa\", \"Spain\", \"Sri Lanka\", \"Sudan\", \"Suriname\", \"Swaziland\", \"Sweden\", \"Switzerland\", \"Syria\", \"Taiwan\", \"Tajikistan\", \"Tanzania\", \"Thailand\", \"Togo\", \"Tonga\", \"Trinidad and Tobago\", \"Tunisia\", \"Turkey\", \"Turkmenistan\", \"Uganda\", \"Ukraine\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Uruguay\", \"Uzbekistan\", \"Vanuatu\", \"Venezuela\", \"Vietnam\", \"Yemen\", \"Zambia\", \"Zimbabwe\");\r\n$(\"#input\").jqxInput({placeHolder: \"Enter a Country\", height: 25, width: 200, minLength: 1,  source: countries });\r\n                    </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/eDLAw/",
            "exampleDescription": "source is set to 'countries'",
            "dataType": "Array | Function | Object",
            "ts_dataType": "any"
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n<PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;\r\n</CODE></PRE>\r\n</CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/pbKgM/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "valueMember",
            "defaultValue": "\"\"",
            "description": "<P>Sets or gets the valueMember of the Items. The valueMember specifies the name of an object property to set as a 'value' of the list items. The name is contained in the collection specified by the 'source' property. </P>",
            "example": "<pre><CODE>$(\"#jqxInput\").jqxInput({valueMember: 'lastName'});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/GU3n6/",
            "exampleDescription": "valueMember is set to \"CompanyName\"",
            "dataType": "string",
            "exampleInit": {
                "valueMember": "CompanyId",
                "displayMember": "CompanyName"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxInput ref=\"myInput\"\n       :width=\"250\" :height=\"25\" :source=\"source\" :displayMember=\"'ContactName'\" :valueMember=\"'CompanyName'\"/>\n&lt;/template>\n\n&lt;script>\n  import JqxInput from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxinput.vue';\n\n  export default {\n    components: {\n      JqxInput\n    },\n    data: function () {\n      return {\n        source: [\n          { \"CompanyName\": \"Company 1\", \"ContactName\": \"Ana\" },\n          { \"CompanyName\": \"Company 2\", \"ContactName\": \"Maria\" }\n        ]\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "width",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxInput's width. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$('#jqxInput').jqxInput({width: 200 });</CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxInput').jqxInput('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/PDAJu/",
            "exampleDescription": "width is set to 200",
            "dataType": "number",
            "ts_dataType": "string | number"
        },
        {
            "name": "value",
            "defaultValue": "null",
            "description": "",
            "example": "",
            "exampleURL": "",
            "exampleDescription": "",
            "dataType": "number | string",
            "ts_dataType": "number | string",
            "exampleInit": {
                "value": "Brazil"
            }
        }
    ],
    "events": [
        {
            "name": "change",
            "description": "<P>This event is triggered when the value is changed. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>change</CODE> event by type: jqxInput. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Nbmbx/",
            "exampleDescription": "Bind to the change event by type: jqxInput.",
            "example": "<PRE><CODE>$('#jqxInput').on('change', \r\nfunction (event) { \r\n   var type = event.args.type; // keyboard, mouse or null depending on how the value was changed.\r\n   var value = $('#jqxInput').val(); \r\n}); \r\n                         </CODE></PRE>"
        },
        {
            "name": "close",
            "description": "<P>This event is triggered when the auto-suggest popup is closed. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>close</CODE> event by type: jqxInput. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/eLbuB/",
            "exampleDescription": "Bind to the close event by type: jqxInput.",
            "example": "<PRE><CODE>$('#jqxInput').on('close', \r\nfunction(){ // type your code here. });\r\n                        </CODE></PRE>"
        },
        {
            "name": "open",
            "description": "<P>This event is triggered when the auto-suggest popup is opened. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>select</CODE> event by type: jqxInput. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Ngudz/",
            "exampleDescription": "Bind to the open event by type: jqxInput.",
            "example": "<PRE><CODE>$('#jqxInput').on('open', \r\nfunction(){ // type your code here. });\r\n                        </CODE></PRE>"
        },
        {
            "name": "select",
            "description": "<P>This event is triggered when an item is selected from the auto-suggest popup. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>select</CODE> event by type: jqxInput. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ab9Vb/",
            "exampleDescription": "Bind to the select event by type: jqxInput.",
            "example": "<PRE><CODE>$('#jqxInput').on('select', \r\nfunction () { var value = $('#jqxInput').val(); });\r\n                        </CODE></PRE>"
        }
    ],
    "methods": [
        {
            "name": "destroy",
            "description": "<P>Destroys the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxInput').jqxInput('destroy'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Zdy3p/",
            "exampleDescription": "destroys the jqxInput",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "focus",
            "description": "<P>Focuses the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>focus</CODE> method. </P>\n<PRE><CODE>$('#jqxInput').jqxInput('focus'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/heGE6/",
            "exampleDescription": "focuses the jqxInput",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "selectAll",
            "description": "<P>Selects the text in the input field. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>selectAll</CODE> method. </P>\n<PRE><CODE>$('#jqxInput').jqxInput('selectAll'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/e36G9/",
            "exampleDescription": "selects all of the items in the jqxInput",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "value": "'text'"
            }
        },
        {
            "name": "val",
            "description": "<P>Sets or gets the value. </P>\n<H4>Code examples</H4>\n<P>Get the <CODE>value</CODE>: </P>\n<PRE><CODE>var value = $('#jqxInput').jqxInput('val'); or var value = $('#jqxInput').val();</CODE></PRE>\n<P>Set the <CODE>value</CODE>: </P>\n<PRE><CODE>$('#jqxInput').jqxInput('val', 'New Value'); or $('#jqxInput').val('New Value');</CODE></PRE>\n<PRE><CODE>$('#jqxInput').jqxInput('val', {label: \"Item 1\", value: \"1\"});</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/N622s/",
            "exampleDescription": "sets the jqxInput value",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "value",
                    "dataType": "string",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": true
                }
            ],
            "extraData": {
                "value": "'text'"
            }
        }
    ]
}