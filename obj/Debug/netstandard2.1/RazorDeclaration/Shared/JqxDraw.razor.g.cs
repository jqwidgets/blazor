#pragma checksum "/Users/ivozhulev/git/jqwidgets-blazor/Shared/JqxDraw.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ffb4f510f6f1e79318de76a385eef5334d4c9e93"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace blazor_web.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using blazor_web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using blazor_web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/Users/ivozhulev/git/jqwidgets-blazor/Shared/JqxDraw.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
    public partial class JqxDraw : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 6 "/Users/ivozhulev/git/jqwidgets-blazor/Shared/JqxDraw.razor"
       
    [Parameter]
    public object renderEngine {
        get { return getterProp<object>("renderEngine"); }
        set { setterProp("renderEngine", value); }
    }

    [Parameter]
    public object options {
        set { setOptions(value); }
    }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "ChildContent" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public void attr(object element, object attributes)
    {
        setterMethod("attr", element, attributes);
    }

    public object circle()
    {
        return getterMethod<object>("circle");
    }

    public void circle(double cx, double cy, double r, object attributes)
    {
        setterMethod("circle", cx, cy, r, attributes);
    }

    public void clear()
    {
        setterMethod("clear");
    }

    public string getAttr()
    {
        return getterMethod<string>("getAttr");
    }

    public void getAttr(object element, object attributes)
    {
        setterMethod("getAttr", element, attributes);
    }

    public object getSize()
    {
        return getterMethod<object>("getSize");
    }

    public object line()
    {
        return getterMethod<object>("line");
    }

    public void line(double x1, double y1, double x2, double y2, object attributes)
    {
        setterMethod("line", x1, y1, x2, y2, attributes);
    }

    public object measureText()
    {
        return getterMethod<object>("measureText");
    }

    public void measureText(string text, double angle, object attributes)
    {
        setterMethod("measureText", text, angle, attributes);
    }

    public void on(object element, string e, object func)
    {
        setterMethod("on", element, e, func);
    }

    public void off(object element, string e, object func)
    {
        setterMethod("off", element, e, func);
    }

    public object path()
    {
        return getterMethod<object>("path");
    }

    public void path(string path, object attributes)
    {
        setterMethod("path", path, attributes);
    }

    public object pieslice()
    {
        return getterMethod<object>("pieslice");
    }

    public void pieslice(double cx, double xy, object innerRadius, object outerRadius, double fromAngle, double endAngle, double centerOffset, object attributes)
    {
        setterMethod("pieslice", cx, xy, innerRadius, outerRadius, fromAngle, endAngle, centerOffset, attributes);
    }

    public void refresh()
    {
        setterMethod("refresh");
    }

    public object rect()
    {
        return getterMethod<object>("rect");
    }

    public void rect(double x, double y, object width, object height, object attributes)
    {
        setterMethod("rect", x, y, width, height, attributes);
    }

    public void saveAsJPEG(string image, string url)
    {
        setterMethod("saveAsJPEG", image, url);
    }

    public void saveAsPNG(string image, string url)
    {
        setterMethod("saveAsPNG", image, url);
    }

    public object text()
    {
        return getterMethod<object>("text");
    }

    public void text(string text, double x, double y, object width, object height, double angle, object attributes, bool clip, string halign, string valign, string rotateAround)
    {
        setterMethod("text", text, x, y, width, height, angle, attributes, clip, halign, valign, rotateAround);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxDraw", initialOptions);
            attachEvents();
        }
    }

    private void attachEvents()
    {
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    private void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitDrawEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
