#pragma checksum "/Users/ivozhulev/git/jqwidgets-blazor/Shared/JqxScheduler.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6e31ecbc0c0ac7978afb30b68f9df404cf412f0e"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace blazor_web.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using blazor_web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using blazor_web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/Users/ivozhulev/git/jqwidgets-blazor/Shared/JqxScheduler.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
    public partial class JqxScheduler : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 6 "/Users/ivozhulev/git/jqwidgets-blazor/Shared/JqxScheduler.razor"
       
    [Parameter]
    public double appointmentOpacity {
        get { return getterProp<double>("appointmentOpacity"); }
        set { setterProp("appointmentOpacity", value); }
    }

    [Parameter]
    public double appointmentsMinHeight {
        get { return getterProp<double>("appointmentsMinHeight"); }
        set { setterProp("appointmentsMinHeight", value); }
    }

    [Parameter]
    public object appointmentDataFields {
        get { return getterProp<object>("appointmentDataFields"); }
        set { setterProp("appointmentDataFields", value); }
    }

    [Parameter]
    public bool appointmentTooltips {
        get { return getterProp<bool>("appointmentTooltips"); }
        set { setterProp("appointmentTooltips", value); }
    }

    [Parameter]
    public double columnsHeight {
        get { return getterProp<double>("columnsHeight"); }
        set { setterProp("columnsHeight", value); }
    }

    [Parameter]
    public bool contextMenu {
        get { return getterProp<bool>("contextMenu"); }
        set { setterProp("contextMenu", value); }
    }

    [Parameter]
    public object contextMenuOpen {
        get { return getterProp<object>("contextMenuOpen"); }
        set { setterProp("contextMenuOpen", value); }
    }

    [Parameter]
    public object contextMenuClose {
        get { return getterProp<object>("contextMenuClose"); }
        set { setterProp("contextMenuClose", value); }
    }

    [Parameter]
    public object contextMenuItemClick {
        get { return getterProp<object>("contextMenuItemClick"); }
        set { setterProp("contextMenuItemClick", value); }
    }

    [Parameter]
    public object contextMenuCreate {
        get { return getterProp<object>("contextMenuCreate"); }
        set { setterProp("contextMenuCreate", value); }
    }

    [Parameter]
    public object changedAppointments {
        get { return getterProp<object>("changedAppointments"); }
        set { setterProp("changedAppointments", value); }
    }

    [Parameter]
    public bool disabled {
        get { return getterProp<bool>("disabled"); }
        set { setterProp("disabled", value); }
    }

    [Parameter]
    public object date {
        get { return getterProp<object>("date"); }
        set { setterProp("date", value); }
    }

    [Parameter]
    public string dayNameFormat {
        get { return getterProp<string>("dayNameFormat"); }
        set { setterProp("dayNameFormat", value); }
    }

    [Parameter]
    public bool enableHover {
        get { return getterProp<bool>("enableHover"); }
        set { setterProp("enableHover", value); }
    }

    [Parameter]
    public bool editDialog {
        get { return getterProp<bool>("editDialog"); }
        set { setterProp("editDialog", value); }
    }

    [Parameter]
    public string editDialogDateTimeFormatString {
        get { return getterProp<string>("editDialogDateTimeFormatString"); }
        set { setterProp("editDialogDateTimeFormatString", value); }
    }

    [Parameter]
    public string editDialogDateFormatString {
        get { return getterProp<string>("editDialogDateFormatString"); }
        set { setterProp("editDialogDateFormatString", value); }
    }

    [Parameter]
    public object editDialogOpen {
        get { return getterProp<object>("editDialogOpen"); }
        set { setterProp("editDialogOpen", value); }
    }

    [Parameter]
    public object editDialogCreate {
        get { return getterProp<object>("editDialogCreate"); }
        set { setterProp("editDialogCreate", value); }
    }

    [Parameter]
    public object editDialogKeyDown {
        get { return getterProp<object>("editDialogKeyDown"); }
        set { setterProp("editDialogKeyDown", value); }
    }

    [Parameter]
    public object editDialogClose {
        get { return getterProp<object>("editDialogClose"); }
        set { setterProp("editDialogClose", value); }
    }

    [Parameter]
    public object exportSettings {
        get { return getterProp<object>("exportSettings"); }
        set { setterProp("exportSettings", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public string legendPosition {
        get { return getterProp<string>("legendPosition"); }
        set { setterProp("legendPosition", value); }
    }

    [Parameter]
    public double legendHeight {
        get { return getterProp<double>("legendHeight"); }
        set { setterProp("legendHeight", value); }
    }

    [Parameter]
    public object localization {
        get { return getterProp<object>("localization"); }
        set { setterProp("localization", value); }
    }

    [Parameter]
    public object min {
        get { return getterProp<object>("min"); }
        set { setterProp("min", value); }
    }

    [Parameter]
    public object max {
        get { return getterProp<object>("max"); }
        set { setterProp("max", value); }
    }

    [Parameter]
    public object ready {
        get { return getterProp<object>("ready"); }
        set { setterProp("ready", value); }
    }

    [Parameter]
    public object renderAppointment {
        get { return getterProp<object>("renderAppointment"); }
        set { setterProp("renderAppointment", value); }
    }

    [Parameter]
    public object rendering {
        get { return getterProp<object>("rendering"); }
        set { setterProp("rendering", value); }
    }

    [Parameter]
    public object rendered {
        get { return getterProp<object>("rendered"); }
        set { setterProp("rendered", value); }
    }

    [Parameter]
    public bool rtl {
        get { return getterProp<bool>("rtl"); }
        set { setterProp("rtl", value); }
    }

    [Parameter]
    public object resources {
        get { return getterProp<object>("resources"); }
        set { setterProp("resources", value); }
    }

    [Parameter]
    public double rowsHeight {
        get { return getterProp<double>("rowsHeight"); }
        set { setterProp("rowsHeight", value); }
    }

    [Parameter]
    public bool showToolbar {
        get { return getterProp<bool>("showToolbar"); }
        set { setterProp("showToolbar", value); }
    }

    [Parameter]
    public bool showLegend {
        get { return getterProp<bool>("showLegend"); }
        set { setterProp("showLegend", value); }
    }

    [Parameter]
    public double scrollBarSize {
        get { return getterProp<double>("scrollBarSize"); }
        set { setterProp("scrollBarSize", value); }
    }

    [Parameter]
    public object source {
        get { return getterProp<object>("source"); }
        set { setterProp("source", value); }
    }

    [Parameter]
    public object statuses {
        get { return getterProp<object>("statuses"); }
        set { setterProp("statuses", value); }
    }

    [Parameter]
    public double touchRowsHeight {
        get { return getterProp<double>("touchRowsHeight"); }
        set { setterProp("touchRowsHeight", value); }
    }

    [Parameter]
    public string theme {
        get { return getterProp<string>("theme"); }
        set { setterProp("theme", value); }
    }

    [Parameter]
    public double touchAppointmentsMinHeight {
        get { return getterProp<double>("touchAppointmentsMinHeight"); }
        set { setterProp("touchAppointmentsMinHeight", value); }
    }

    [Parameter]
    public double touchScrollBarSize {
        get { return getterProp<double>("touchScrollBarSize"); }
        set { setterProp("touchScrollBarSize", value); }
    }

    [Parameter]
    public string timeZone {
        get { return getterProp<string>("timeZone"); }
        set { setterProp("timeZone", value); }
    }

    [Parameter]
    public object touchDayNameFormat {
        get { return getterProp<object>("touchDayNameFormat"); }
        set { setterProp("touchDayNameFormat", value); }
    }

    [Parameter]
    public string toolBarRangeFormat {
        get { return getterProp<string>("toolBarRangeFormat"); }
        set { setterProp("toolBarRangeFormat", value); }
    }

    [Parameter]
    public string toolBarRangeFormatAbbr {
        get { return getterProp<string>("toolBarRangeFormatAbbr"); }
        set { setterProp("toolBarRangeFormatAbbr", value); }
    }

    [Parameter]
    public double toolbarHeight {
        get { return getterProp<double>("toolbarHeight"); }
        set { setterProp("toolbarHeight", value); }
    }

    [Parameter]
    public object[] views {
        get { return getterProp<object[]>("views"); }
        set { setterProp("views", value); }
    }

    [Parameter]
    public object view {
        get { return getterProp<object>("view"); }
        set { setterProp("view", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public object options {
        set { setOptions(value); }
    }

    [Parameter]
    public Action<IDictionary<string, object>> onAppointmentChange { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onAppointmentClick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onAppointmentDoubleClick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onAppointmentDelete { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onAppointmentAdd { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onBindingComplete { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCellClick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCellDoubleClick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onContextMenuOpen { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onContextMenuClose { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onContextMenuItemClick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onContextMenuCreate { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onDateChange { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onEditRecurrenceDialogOpen { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onEditRecurrenceDialogClose { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onEditDialogCreate { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onEditDialogOpen { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onEditDialogClose { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onViewChange { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "ChildContent", "onAppointmentChange", "onAppointmentClick", "onAppointmentDoubleClick", "onAppointmentDelete", "onAppointmentAdd", "onBindingComplete", "onCellClick", "onCellDoubleClick", "onContextMenuOpen", "onContextMenuClose", "onContextMenuItemClick", "onContextMenuCreate", "onDateChange", "onEditRecurrenceDialogOpen", "onEditRecurrenceDialogClose", "onEditDialogCreate", "onEditDialogOpen", "onEditDialogClose", "onViewChange" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public void addAppointment(object item)
    {
        setterMethod("addAppointment", item);
    }

    public void beginAppointmentsUpdate()
    {
        setterMethod("beginAppointmentsUpdate");
    }

    public void clearAppointmentsSelection()
    {
        setterMethod("clearAppointmentsSelection");
    }

    public void clearSelection()
    {
        setterMethod("clearSelection");
    }

    public void closeMenu()
    {
        setterMethod("closeMenu");
    }

    public void closeDialog()
    {
        setterMethod("closeDialog");
    }

    public void deleteAppointment(string appointmenId)
    {
        setterMethod("deleteAppointment", appointmenId);
    }

    public void destroy()
    {
        setterMethod("destroy");
    }

    public void endAppointmentsUpdate()
    {
        setterMethod("endAppointmentsUpdate");
    }

    public void ensureAppointmentVisible(string id)
    {
        setterMethod("ensureAppointmentVisible", id);
    }

    public void ensureVisible(object item, string resourceId)
    {
        setterMethod("ensureVisible", item, resourceId);
    }

    public object exportData()
    {
        return getterMethod<object>("exportData");
    }

    public void exportData(string format)
    {
        setterMethod("exportData", format);
    }

    public void focus()
    {
        setterMethod("focus");
    }

    public object getAppointmentProperty()
    {
        return getterMethod<object>("getAppointmentProperty");
    }

    public void getAppointmentProperty(string appointmentId, string name)
    {
        setterMethod("getAppointmentProperty", appointmentId, name);
    }

    public object getSelection()
    {
        return getterMethod<object>("getSelection");
    }

    public object getAppointments()
    {
        return getterMethod<object>("getAppointments");
    }

    public object[] getDataAppointments()
    {
        return getterMethod<object[]>("getDataAppointments");
    }

    public void hideAppointmentsByResource(string resourcesId)
    {
        setterMethod("hideAppointmentsByResource", resourcesId);
    }

    public void openMenu(double left, double top)
    {
        setterMethod("openMenu", left, top);
    }

    public void openDialog(double left, double top)
    {
        setterMethod("openDialog", left, top);
    }

    public void selectAppointment(string appointmentId)
    {
        setterMethod("selectAppointment", appointmentId);
    }

    public void setAppointmentProperty(string appointmentId, string name, object value)
    {
        setterMethod("setAppointmentProperty", appointmentId, name, value);
    }

    public void selectCell(object date, bool allday, string resourceId)
    {
        setterMethod("selectCell", date, allday, resourceId);
    }

    public void showAppointmentsByResource(string resourceId)
    {
        setterMethod("showAppointmentsByResource", resourceId);
    }

    public double scrollWidth()
    {
        return getterMethod<double>("scrollWidth");
    }

    public double scrollHeight()
    {
        return getterMethod<double>("scrollHeight");
    }

    public void scrollLeft(double left)
    {
        setterMethod("scrollLeft", left);
    }

    public void scrollTop(double top)
    {
        setterMethod("scrollTop", top);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxScheduler", initialOptions);
            attachEvents();
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "appointmentChange", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onAppointmentChange)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "appointmentClick", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onAppointmentClick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "appointmentDoubleClick", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onAppointmentDoubleClick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "appointmentDelete", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onAppointmentDelete)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "appointmentAdd", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onAppointmentAdd)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "bindingComplete", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onBindingComplete)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "cellClick", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onCellClick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "cellDoubleClick", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onCellDoubleClick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "contextMenuOpen", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onContextMenuOpen)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "contextMenuClose", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onContextMenuClose)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "contextMenuItemClick", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onContextMenuItemClick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "contextMenuCreate", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onContextMenuCreate)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "dateChange", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onDateChange)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "editRecurrenceDialogOpen", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onEditRecurrenceDialogOpen)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "editRecurrenceDialogClose", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onEditRecurrenceDialogClose)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "editDialogCreate", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onEditDialogCreate)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "editDialogOpen", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onEditDialogOpen)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "editDialogClose", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onEditDialogClose)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "viewChange", "emitSchedulerEvent", DotNetObjectReference.Create(new EventsHandler(onViewChange)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    private void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitSchedulerEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
