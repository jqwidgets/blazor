#pragma checksum "/Users/ivozhulev/git/jqwidgets-blazor/Shared/JqxMenu.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3164c980451041e7d63702bccad924acf9c50a12"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace blazor_web.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using blazor_web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using blazor_web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/Users/ivozhulev/git/jqwidgets-blazor/Shared/JqxMenu.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
    public partial class JqxMenu : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 6 "/Users/ivozhulev/git/jqwidgets-blazor/Shared/JqxMenu.razor"
       
    [Parameter]
    public double animationShowDuration {
        get { return getterProp<double>("animationShowDuration"); }
        set { setterProp("animationShowDuration", value); }
    }

    [Parameter]
    public double animationHideDuration {
        get { return getterProp<double>("animationHideDuration"); }
        set { setterProp("animationHideDuration", value); }
    }

    [Parameter]
    public double animationHideDelay {
        get { return getterProp<double>("animationHideDelay"); }
        set { setterProp("animationHideDelay", value); }
    }

    [Parameter]
    public double animationShowDelay {
        get { return getterProp<double>("animationShowDelay"); }
        set { setterProp("animationShowDelay", value); }
    }

    [Parameter]
    public double autoCloseInterval {
        get { return getterProp<double>("autoCloseInterval"); }
        set { setterProp("autoCloseInterval", value); }
    }

    [Parameter]
    public bool autoSizeMainItems {
        get { return getterProp<bool>("autoSizeMainItems"); }
        set { setterProp("autoSizeMainItems", value); }
    }

    [Parameter]
    public bool autoCloseOnClick {
        get { return getterProp<bool>("autoCloseOnClick"); }
        set { setterProp("autoCloseOnClick", value); }
    }

    [Parameter]
    public bool autoOpenPopup {
        get { return getterProp<bool>("autoOpenPopup"); }
        set { setterProp("autoOpenPopup", value); }
    }

    [Parameter]
    public bool autoOpen {
        get { return getterProp<bool>("autoOpen"); }
        set { setterProp("autoOpen", value); }
    }

    [Parameter]
    public bool autoCloseOnMouseLeave {
        get { return getterProp<bool>("autoCloseOnMouseLeave"); }
        set { setterProp("autoCloseOnMouseLeave", value); }
    }

    [Parameter]
    public bool clickToOpen {
        get { return getterProp<bool>("clickToOpen"); }
        set { setterProp("clickToOpen", value); }
    }

    [Parameter]
    public bool disabled {
        get { return getterProp<bool>("disabled"); }
        set { setterProp("disabled", value); }
    }

    [Parameter]
    public bool enableHover {
        get { return getterProp<bool>("enableHover"); }
        set { setterProp("enableHover", value); }
    }

    [Parameter]
    public string easing {
        get { return getterProp<string>("easing"); }
        set { setterProp("easing", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public bool keyboardNavigation {
        get { return getterProp<bool>("keyboardNavigation"); }
        set { setterProp("keyboardNavigation", value); }
    }

    [Parameter]
    public object minimizeWidth {
        get { return getterProp<object>("minimizeWidth"); }
        set { setterProp("minimizeWidth", value); }
    }

    [Parameter]
    public object mode {
        get { return getterProp<object>("mode"); }
        set { setterProp("mode", value); }
    }

    [Parameter]
    public object popupZIndex {
        get { return getterProp<object>("popupZIndex"); }
        set { setterProp("popupZIndex", value); }
    }

    [Parameter]
    public bool rtl {
        get { return getterProp<bool>("rtl"); }
        set { setterProp("rtl", value); }
    }

    [Parameter]
    public bool showTopLevelArrows {
        get { return getterProp<bool>("showTopLevelArrows"); }
        set { setterProp("showTopLevelArrows", value); }
    }

    [Parameter]
    public object source {
        get { return getterProp<object>("source"); }
        set { setterProp("source", value); }
    }

    [Parameter]
    public string theme {
        get { return getterProp<string>("theme"); }
        set { setterProp("theme", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public object options {
        set { setOptions(value); }
    }

    [Parameter]
    public Action<IDictionary<string, object>> onClosed { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onItemclick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onShown { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "ChildContent", "onClosed", "onItemclick", "onShown" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public void closeItem(object itemID)
    {
        setterMethod("closeItem", itemID);
    }

    public void close()
    {
        setterMethod("close");
    }

    public void disable(object itemID, bool value)
    {
        setterMethod("disable", itemID, value);
    }

    public void destroy()
    {
        setterMethod("destroy");
    }

    public void focus()
    {
        setterMethod("focus");
    }

    public void minimize()
    {
        setterMethod("minimize");
    }

    public void open(double left, double top)
    {
        setterMethod("open", left, top);
    }

    public void openItem(object itemID)
    {
        setterMethod("openItem", itemID);
    }

    public void restore()
    {
        setterMethod("restore");
    }

    public void setItemOpenDirection(object item, string horizontaldirection, string verticaldirection)
    {
        setterMethod("setItemOpenDirection", item, horizontaldirection, verticaldirection);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxMenu", initialOptions);
            attachEvents();
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "closed", "emitMenuEvent", DotNetObjectReference.Create(new EventsHandler(onClosed)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "itemclick", "emitMenuEvent", DotNetObjectReference.Create(new EventsHandler(onItemclick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "shown", "emitMenuEvent", DotNetObjectReference.Create(new EventsHandler(onShown)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    private void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitMenuEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
