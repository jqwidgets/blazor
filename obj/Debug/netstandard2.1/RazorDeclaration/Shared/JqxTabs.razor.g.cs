#pragma checksum "/Users/ivozhulev/git/jqwidgets-blazor/Shared/JqxTabs.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8eed77d0cebe77608d761acf807d4af38e4dac7d"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace blazor_web.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using blazor_web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/ivozhulev/git/jqwidgets-blazor/_Imports.razor"
using blazor_web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/Users/ivozhulev/git/jqwidgets-blazor/Shared/JqxTabs.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
    public partial class JqxTabs : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 6 "/Users/ivozhulev/git/jqwidgets-blazor/Shared/JqxTabs.razor"
       
    [Parameter]
    public object animationType {
        get { return getterProp<object>("animationType"); }
        set { setterProp("animationType", value); }
    }

    [Parameter]
    public bool autoHeight {
        get { return getterProp<bool>("autoHeight"); }
        set { setterProp("autoHeight", value); }
    }

    [Parameter]
    public double closeButtonSize {
        get { return getterProp<double>("closeButtonSize"); }
        set { setterProp("closeButtonSize", value); }
    }

    [Parameter]
    public bool collapsible {
        get { return getterProp<bool>("collapsible"); }
        set { setterProp("collapsible", value); }
    }

    [Parameter]
    public double contentTransitionDuration {
        get { return getterProp<double>("contentTransitionDuration"); }
        set { setterProp("contentTransitionDuration", value); }
    }

    [Parameter]
    public bool disabled {
        get { return getterProp<bool>("disabled"); }
        set { setterProp("disabled", value); }
    }

    [Parameter]
    public bool enabledHover {
        get { return getterProp<bool>("enabledHover"); }
        set { setterProp("enabledHover", value); }
    }

    [Parameter]
    public bool enableScrollAnimation {
        get { return getterProp<bool>("enableScrollAnimation"); }
        set { setterProp("enableScrollAnimation", value); }
    }

    [Parameter]
    public bool enableDropAnimation {
        get { return getterProp<bool>("enableDropAnimation"); }
        set { setterProp("enableDropAnimation", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public object initTabContent {
        get { return getterProp<object>("initTabContent"); }
        set { setterProp("initTabContent", value); }
    }

    [Parameter]
    public bool keyboardNavigation {
        get { return getterProp<bool>("keyboardNavigation"); }
        set { setterProp("keyboardNavigation", value); }
    }

    [Parameter]
    public object next {
        get { return getterProp<object>("next"); }
        set { setterProp("next", value); }
    }

    [Parameter]
    public object previous {
        get { return getterProp<object>("previous"); }
        set { setterProp("previous", value); }
    }

    [Parameter]
    public object position {
        get { return getterProp<object>("position"); }
        set { setterProp("position", value); }
    }

    [Parameter]
    public bool reorder {
        get { return getterProp<bool>("reorder"); }
        set { setterProp("reorder", value); }
    }

    [Parameter]
    public bool rtl {
        get { return getterProp<bool>("rtl"); }
        set { setterProp("rtl", value); }
    }

    [Parameter]
    public double scrollAnimationDuration {
        get { return getterProp<double>("scrollAnimationDuration"); }
        set { setterProp("scrollAnimationDuration", value); }
    }

    [Parameter]
    public double selectedItem {
        get { return getterProp<double>("selectedItem"); }
        set { setterProp("selectedItem", value); }
    }

    [Parameter]
    public bool selectionTracker {
        get { return getterProp<bool>("selectionTracker"); }
        set { setterProp("selectionTracker", value); }
    }

    [Parameter]
    public bool scrollable {
        get { return getterProp<bool>("scrollable"); }
        set { setterProp("scrollable", value); }
    }

    [Parameter]
    public object scrollPosition {
        get { return getterProp<object>("scrollPosition"); }
        set { setterProp("scrollPosition", value); }
    }

    [Parameter]
    public double scrollStep {
        get { return getterProp<double>("scrollStep"); }
        set { setterProp("scrollStep", value); }
    }

    [Parameter]
    public bool showCloseButtons {
        get { return getterProp<bool>("showCloseButtons"); }
        set { setterProp("showCloseButtons", value); }
    }

    [Parameter]
    public object toggleMode {
        get { return getterProp<object>("toggleMode"); }
        set { setterProp("toggleMode", value); }
    }

    [Parameter]
    public string theme {
        get { return getterProp<string>("theme"); }
        set { setterProp("theme", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public object options {
        set { setOptions(value); }
    }

    [Parameter]
    public Action<IDictionary<string, object>> onAdd { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCollapsed { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onDragStart { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onDragEnd { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onExpanded { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRemoved { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onSelecting { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onSelected { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onTabclick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onUnselecting { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onUnselected { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "ChildContent", "onAdd", "onCollapsed", "onDragStart", "onDragEnd", "onExpanded", "onRemoved", "onSelecting", "onSelected", "onTabclick", "onUnselecting", "onUnselected" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public void addAt(double index, string title, string content)
    {
        setterMethod("addAt", index, title, content);
    }

    public void addFirst(object htmlElement1, object htmlElement2)
    {
        setterMethod("addFirst", htmlElement1, htmlElement2);
    }

    public void addLast(object htmlElement1, object htmlElement2)
    {
        setterMethod("addLast", htmlElement1, htmlElement2);
    }

    public void collapse()
    {
        setterMethod("collapse");
    }

    public void disable()
    {
        setterMethod("disable");
    }

    public void disableAt(double index)
    {
        setterMethod("disableAt", index);
    }

    public void destroy()
    {
        setterMethod("destroy");
    }

    public void ensureVisible(double index)
    {
        setterMethod("ensureVisible", index);
    }

    public void enableAt(double index)
    {
        setterMethod("enableAt", index);
    }

    public void expand()
    {
        setterMethod("expand");
    }

    public void enable()
    {
        setterMethod("enable");
    }

    public void focus()
    {
        setterMethod("focus");
    }

    public string getTitleAt()
    {
        return getterMethod<string>("getTitleAt");
    }

    public void getTitleAt(double index)
    {
        setterMethod("getTitleAt", index);
    }

    public object getContentAt()
    {
        return getterMethod<object>("getContentAt");
    }

    public void getContentAt(double index)
    {
        setterMethod("getContentAt", index);
    }

    public object getDisabledTabsCount()
    {
        return getterMethod<object>("getDisabledTabsCount");
    }

    public void hideCloseButtonAt(double index)
    {
        setterMethod("hideCloseButtonAt", index);
    }

    public void hideAllCloseButtons()
    {
        setterMethod("hideAllCloseButtons");
    }

    public double length()
    {
        return getterMethod<double>("length");
    }

    public void removeAt(double index)
    {
        setterMethod("removeAt", index);
    }

    public void removeFirst()
    {
        setterMethod("removeFirst");
    }

    public void removeLast()
    {
        setterMethod("removeLast");
    }

    public void select(double index)
    {
        setterMethod("select", index);
    }

    public void setContentAt(double index, string htmlElement)
    {
        setterMethod("setContentAt", index, htmlElement);
    }

    public void setTitleAt(double index, string htmlElement)
    {
        setterMethod("setTitleAt", index, htmlElement);
    }

    public void showCloseButtonAt(double index)
    {
        setterMethod("showCloseButtonAt", index);
    }

    public void showAllCloseButtons()
    {
        setterMethod("showAllCloseButtons");
    }

    public string val()
    {
        return getterMethod<string>("val");
    }

    public void val(string value)
    {
        setterMethod("val", value);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxTabs", initialOptions);
            attachEvents();
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "add", "emitTabsEvent", DotNetObjectReference.Create(new EventsHandler(onAdd)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "collapsed", "emitTabsEvent", DotNetObjectReference.Create(new EventsHandler(onCollapsed)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "dragStart", "emitTabsEvent", DotNetObjectReference.Create(new EventsHandler(onDragStart)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "dragEnd", "emitTabsEvent", DotNetObjectReference.Create(new EventsHandler(onDragEnd)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "expanded", "emitTabsEvent", DotNetObjectReference.Create(new EventsHandler(onExpanded)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "removed", "emitTabsEvent", DotNetObjectReference.Create(new EventsHandler(onRemoved)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "selecting", "emitTabsEvent", DotNetObjectReference.Create(new EventsHandler(onSelecting)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "selected", "emitTabsEvent", DotNetObjectReference.Create(new EventsHandler(onSelected)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "tabclick", "emitTabsEvent", DotNetObjectReference.Create(new EventsHandler(onTabclick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "unselecting", "emitTabsEvent", DotNetObjectReference.Create(new EventsHandler(onUnselecting)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "unselected", "emitTabsEvent", DotNetObjectReference.Create(new EventsHandler(onUnselected)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    private void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitTabsEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
