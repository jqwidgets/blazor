@using System.Text.Json;
@inject IJSRuntime JSRuntime;

<div id="@componentID">@ChildContent</div>

@code {
    [Parameter]
    public double animationDuration {
        get { return getterProp<double>("animationDuration"); }
        set { setterProp("animationDuration", value); }
    }

    [Parameter]
    public string backgroundColor {
        get { return getterProp<string>("backgroundColor"); }
        set { setterProp("backgroundColor", value); }
    }

    [Parameter]
    public double barSpacing {
        get { return getterProp<double>("barSpacing"); }
        set { setterProp("barSpacing", value); }
    }

    [Parameter]
    public double baseValue {
        get { return getterProp<double>("baseValue"); }
        set { setterProp("baseValue", value); }
    }

    [Parameter]
    public string colorScheme {
        get { return getterProp<string>("colorScheme"); }
        set { setterProp("colorScheme", value); }
    }

    [Parameter]
    public object customColorScheme {
        get { return getterProp<object>("customColorScheme"); }
        set { setterProp("customColorScheme", value); }
    }

    [Parameter]
    public bool disabled {
        get { return getterProp<bool>("disabled"); }
        set { setterProp("disabled", value); }
    }

    [Parameter]
    public double endAngle {
        get { return getterProp<double>("endAngle"); }
        set { setterProp("endAngle", value); }
    }

    [Parameter]
    public object formatFunction {
        get { return getterProp<object>("formatFunction"); }
        set { setterProp("formatFunction", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public object labels {
        get { return getterProp<object>("labels"); }
        set { setterProp("labels", value); }
    }

    [Parameter]
    public object max {
        get { return getterProp<object>("max"); }
        set { setterProp("max", value); }
    }

    [Parameter]
    public double min {
        get { return getterProp<double>("min"); }
        set { setterProp("min", value); }
    }

    [Parameter]
    public object relativeInnerRadius {
        get { return getterProp<object>("relativeInnerRadius"); }
        set { setterProp("relativeInnerRadius", value); }
    }

    [Parameter]
    public object rendered {
        get { return getterProp<object>("rendered"); }
        set { setterProp("rendered", value); }
    }

    [Parameter]
    public double startAngle {
        get { return getterProp<double>("startAngle"); }
        set { setterProp("startAngle", value); }
    }

    [Parameter]
    public object title {
        get { return getterProp<object>("title"); }
        set { setterProp("title", value); }
    }

    [Parameter]
    public object tooltip {
        get { return getterProp<object>("tooltip"); }
        set { setterProp("tooltip", value); }
    }

    [Parameter]
    public bool useGradient {
        get { return getterProp<bool>("useGradient"); }
        set { setterProp("useGradient", value); }
    }

    [Parameter]
    public double[] values {
        get { return getterProp<double[]>("values"); }
        set { setterProp("values", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public object options {
        set { setOptions(value); }
    }

    [Parameter]
    public Action<IDictionary<string, object>> onDrawEnd { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onDrawStart { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onInitialized { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onTooltipClose { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onTooltipOpen { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onValueChanged { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "ChildContent", "onDrawEnd", "onDrawStart", "onInitialized", "onTooltipClose", "onTooltipOpen", "onValueChanged" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public void refresh()
    {
        setterMethod("refresh");
    }

    public void render()
    {
        setterMethod("render");
    }

    public double[] val()
    {
        return getterMethod<double[]>("val");
    }

    public void val(double[] value)
    {
        setterMethod("val", value);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxBarGauge", initialOptions);
            attachEvents();
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "drawEnd", "emitBarGaugeEvent", DotNetObjectReference.Create(new EventsHandler(onDrawEnd)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "drawStart", "emitBarGaugeEvent", DotNetObjectReference.Create(new EventsHandler(onDrawStart)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "initialized", "emitBarGaugeEvent", DotNetObjectReference.Create(new EventsHandler(onInitialized)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "tooltipClose", "emitBarGaugeEvent", DotNetObjectReference.Create(new EventsHandler(onTooltipClose)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "tooltipOpen", "emitBarGaugeEvent", DotNetObjectReference.Create(new EventsHandler(onTooltipOpen)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "valueChanged", "emitBarGaugeEvent", DotNetObjectReference.Create(new EventsHandler(onValueChanged)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    private void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitBarGaugeEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }
}
