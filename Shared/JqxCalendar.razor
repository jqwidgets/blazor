@using System.Text.Json;
@inject IJSRuntime JSRuntime;

<div id="@componentID">@ChildContent</div>

@code {
    [Parameter]
    public string backText {
        get { return getterProp<string>("backText"); }
        set { setterProp("backText", value); }
    }

    [Parameter]
    public double columnHeaderHeight {
        get { return getterProp<double>("columnHeaderHeight"); }
        set { setterProp("columnHeaderHeight", value); }
    }

    [Parameter]
    public string clearString {
        get { return getterProp<string>("clearString"); }
        set { setterProp("clearString", value); }
    }

    [Parameter]
    public string culture {
        get { return getterProp<string>("culture"); }
        set { setterProp("culture", value); }
    }

    [Parameter]
    public object dayNameFormat {
        get { return getterProp<object>("dayNameFormat"); }
        set { setterProp("dayNameFormat", value); }
    }

    [Parameter]
    public bool disabled {
        get { return getterProp<bool>("disabled"); }
        set { setterProp("disabled", value); }
    }

    [Parameter]
    public bool enableWeekend {
        get { return getterProp<bool>("enableWeekend"); }
        set { setterProp("enableWeekend", value); }
    }

    [Parameter]
    public bool enableViews {
        get { return getterProp<bool>("enableViews"); }
        set { setterProp("enableViews", value); }
    }

    [Parameter]
    public bool enableOtherMonthDays {
        get { return getterProp<bool>("enableOtherMonthDays"); }
        set { setterProp("enableOtherMonthDays", value); }
    }

    [Parameter]
    public bool enableFastNavigation {
        get { return getterProp<bool>("enableFastNavigation"); }
        set { setterProp("enableFastNavigation", value); }
    }

    [Parameter]
    public bool enableHover {
        get { return getterProp<bool>("enableHover"); }
        set { setterProp("enableHover", value); }
    }

    [Parameter]
    public bool enableAutoNavigation {
        get { return getterProp<bool>("enableAutoNavigation"); }
        set { setterProp("enableAutoNavigation", value); }
    }

    [Parameter]
    public bool enableTooltips {
        get { return getterProp<bool>("enableTooltips"); }
        set { setterProp("enableTooltips", value); }
    }

    [Parameter]
    public string forwardText {
        get { return getterProp<string>("forwardText"); }
        set { setterProp("forwardText", value); }
    }

    [Parameter]
    public double firstDayOfWeek {
        get { return getterProp<double>("firstDayOfWeek"); }
        set { setterProp("firstDayOfWeek", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public object min {
        get { return getterProp<object>("min"); }
        set { setterProp("min", value); }
    }

    [Parameter]
    public object max {
        get { return getterProp<object>("max"); }
        set { setterProp("max", value); }
    }

    [Parameter]
    public double navigationDelay {
        get { return getterProp<double>("navigationDelay"); }
        set { setterProp("navigationDelay", value); }
    }

    [Parameter]
    public object rowHeaderWidth {
        get { return getterProp<object>("rowHeaderWidth"); }
        set { setterProp("rowHeaderWidth", value); }
    }

    [Parameter]
    public bool readOnly {
        get { return getterProp<bool>("readOnly"); }
        set { setterProp("readOnly", value); }
    }

    [Parameter]
    public object restrictedDates {
        get { return getterProp<object>("restrictedDates"); }
        set { setterProp("restrictedDates", value); }
    }

    [Parameter]
    public bool rtl {
        get { return getterProp<bool>("rtl"); }
        set { setterProp("rtl", value); }
    }

    [Parameter]
    public double stepMonths {
        get { return getterProp<double>("stepMonths"); }
        set { setterProp("stepMonths", value); }
    }

    [Parameter]
    public bool showWeekNumbers {
        get { return getterProp<bool>("showWeekNumbers"); }
        set { setterProp("showWeekNumbers", value); }
    }

    [Parameter]
    public bool showDayNames {
        get { return getterProp<bool>("showDayNames"); }
        set { setterProp("showDayNames", value); }
    }

    [Parameter]
    public bool showOtherMonthDays {
        get { return getterProp<bool>("showOtherMonthDays"); }
        set { setterProp("showOtherMonthDays", value); }
    }

    [Parameter]
    public bool showFooter {
        get { return getterProp<bool>("showFooter"); }
        set { setterProp("showFooter", value); }
    }

    [Parameter]
    public object selectionMode {
        get { return getterProp<object>("selectionMode"); }
        set { setterProp("selectionMode", value); }
    }

    [Parameter]
    public object[] specialDates {
        get { return getterProp<object[]>("specialDates"); }
        set { setterProp("specialDates", value); }
    }

    [Parameter]
    public string theme {
        get { return getterProp<string>("theme"); }
        set { setterProp("theme", value); }
    }

    [Parameter]
    public double titleHeight {
        get { return getterProp<double>("titleHeight"); }
        set { setterProp("titleHeight", value); }
    }

    [Parameter]
    public object titleFormat {
        get { return getterProp<object>("titleFormat"); }
        set { setterProp("titleFormat", value); }
    }

    [Parameter]
    public string todayString {
        get { return getterProp<string>("todayString"); }
        set { setterProp("todayString", value); }
    }

    [Parameter]
    public object value {
        get { return getterProp<object>("value"); }
        set { setterProp("value", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public object options {
        set { setOptions(value); }
    }

    [Parameter]
    public Action<IDictionary<string, object>> onBackButtonClick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onChange { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onNextButtonClick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onViewChange { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "ChildContent", "onBackButtonClick", "onChange", "onNextButtonClick", "onViewChange" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public void clear()
    {
        setterMethod("clear");
    }

    public void destroy()
    {
        setterMethod("destroy");
    }

    public void focus()
    {
        setterMethod("focus");
    }

    public void addSpecialDate(object date, object specialDateClass, object text)
    {
        setterMethod("addSpecialDate", date, specialDateClass, text);
    }

    public object getMinDate()
    {
        return getterMethod<object>("getMinDate");
    }

    public object getMaxDate()
    {
        return getterMethod<object>("getMaxDate");
    }

    public object getDate()
    {
        return getterMethod<object>("getDate");
    }

    public object getRange()
    {
        return getterMethod<object>("getRange");
    }

    public void navigateForward(double months)
    {
        setterMethod("navigateForward", months);
    }

    public void navigateBackward(double months)
    {
        setterMethod("navigateBackward", months);
    }

    public void render()
    {
        setterMethod("render");
    }

    public void refresh()
    {
        setterMethod("refresh");
    }

    public void setMinDate(object date)
    {
        setterMethod("setMinDate", date);
    }

    public void setMaxDate(object date)
    {
        setterMethod("setMaxDate", date);
    }

    public void setDate(object date)
    {
        setterMethod("setDate", date);
    }

    public void setRange(object date, object date2)
    {
        setterMethod("setRange", date, date2);
    }

    public void today()
    {
        setterMethod("today");
    }

    public object val()
    {
        return getterMethod<object>("val");
    }

    public void val(object value, object value2)
    {
        setterMethod("val", value, value2);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxCalendar", initialOptions);
            attachEvents();
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "backButtonClick", "emitCalendarEvent", DotNetObjectReference.Create(new EventsHandler(onBackButtonClick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "change", "emitCalendarEvent", DotNetObjectReference.Create(new EventsHandler(onChange)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "nextButtonClick", "emitCalendarEvent", DotNetObjectReference.Create(new EventsHandler(onNextButtonClick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "viewChange", "emitCalendarEvent", DotNetObjectReference.Create(new EventsHandler(onViewChange)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    private void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitCalendarEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }
}
