@using System.Text.Json;
@inject IJSRuntime JSRuntime;

<div id="@componentID">@ChildContent</div>

@code {
    [Parameter]
    public string baseColor {
        get { return getterProp<string>("baseColor"); }
        set { setterProp("baseColor", value); }
    }

    [Parameter]
    public object colorRanges {
        get { return getterProp<object>("colorRanges"); }
        set { setterProp("colorRanges", value); }
    }

    [Parameter]
    public double colorRange {
        get { return getterProp<double>("colorRange"); }
        set { setterProp("colorRange", value); }
    }

    [Parameter]
    public object colorMode {
        get { return getterProp<object>("colorMode"); }
        set { setterProp("colorMode", value); }
    }

    [Parameter]
    public string displayMember {
        get { return getterProp<string>("displayMember"); }
        set { setterProp("displayMember", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public bool hoverEnabled {
        get { return getterProp<bool>("hoverEnabled"); }
        set { setterProp("hoverEnabled", value); }
    }

    [Parameter]
    public double headerHeight {
        get { return getterProp<double>("headerHeight"); }
        set { setterProp("headerHeight", value); }
    }

    [Parameter]
    public string legendLabel {
        get { return getterProp<string>("legendLabel"); }
        set { setterProp("legendLabel", value); }
    }

    [Parameter]
    public object legendPosition {
        get { return getterProp<object>("legendPosition"); }
        set { setterProp("legendPosition", value); }
    }

    [Parameter]
    public object legendScaleCallback {
        get { return getterProp<object>("legendScaleCallback"); }
        set { setterProp("legendScaleCallback", value); }
    }

    [Parameter]
    public object renderCallbacks {
        get { return getterProp<object>("renderCallbacks"); }
        set { setterProp("renderCallbacks", value); }
    }

    [Parameter]
    public bool selectionEnabled {
        get { return getterProp<bool>("selectionEnabled"); }
        set { setterProp("selectionEnabled", value); }
    }

    [Parameter]
    public bool showLegend {
        get { return getterProp<bool>("showLegend"); }
        set { setterProp("showLegend", value); }
    }

    [Parameter]
    public object source {
        get { return getterProp<object>("source"); }
        set { setterProp("source", value); }
    }

    [Parameter]
    public string theme {
        get { return getterProp<string>("theme"); }
        set { setterProp("theme", value); }
    }

    [Parameter]
    public string valueMember {
        get { return getterProp<string>("valueMember"); }
        set { setterProp("valueMember", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public object options {
        set { setOptions(value); }
    }

    [Parameter]
    public Action<IDictionary<string, object>> onBindingComplete { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "ChildContent", "onBindingComplete" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public void destroy()
    {
        setterMethod("destroy");
    }

    public void render()
    {
        setterMethod("render");
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxTreeMap", initialOptions);
            attachEvents();
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "bindingComplete", "emitTreeMapEvent", DotNetObjectReference.Create(new EventsHandler(onBindingComplete)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    private void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitTreeMapEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }
}
