{
    "widget": {
        "name": "jqxForm",
        "description": "Form component displaying one or more input elements. The Form component is highly configurable and offers flexible and customize layout options.",
        "angular2": {
            "name": "jqxFormComponent",
            "selector": "jqxForm",
            "function_call_ngOnChanges": "this.refresh();"
        }
    },
    "dataTypes": [
        {
            "name": "FormPadding",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "left",
                    "ts_dataType": "number | string",
                    "optional": "false",
                    "displayName": "Left",
                    "defaultValue": "5"
                },
                {
                    "name": "right",
                    "ts_dataType": "number | string",
                    "optional": "false",
                    "displayName": "Right",
                    "defaultValue": "5"
                },
                {
                    "name": "top",
                    "ts_dataType": "number | string",
                    "optional": "false",
                    "displayName": "Top",
                    "defaultValue": "5"
                },
                {
                    "name": "bottom",
                    "ts_dataType": "number | string",
                    "optional": "false",
                    "displayName": "Bottom",
                    "defaultValue": "5"
                }
            ]
        },
        {
            "name": "FormTemplateItem",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "name",
                    "dataType": "string",
                    "optional": "true"
                },
                {
                    "name": "text",
                    "dataType": "string",
                    "optional": "true"
                },
                {
                    "name": "type",
                    "ts_dataType": "string",
                    "optional": "true",
                    "enumOptions": [ "label", "text", "number", "password", "datetime", "date", "time", "option", "boolean", "custom" ]
                },
                {
                    "name": "bind",
                    "dataType": "string",
                    "optional": "true"
                },
                {
                    "name": "submit",
                    "ts_dataType": "boolean",
                    "optional": "true",
                    "defaultValue": "true"
                },
                {
                    "name": "required",
                    "ts_dataType": "boolean",
                    "optional": "true",
                    "defaultValue": "false"
                },
                {
                    "name": "requiredPosition",
                    "ts_dataType": "string",
                    "optional": "true",
                    "enumOptions": [ "left", "right" ]
                },
                {
                    "name": "info",
                    "ts_dataType": "string",
                    "optional": "true",
                    "defaultValue": ""
                },
                {
                    "name": "infoPosition",
                    "ts_dataType": "string",
                    "optional": "true",
                    "enumOptions": [ "left", "right" ]
                },
                {
                    "name": "component",
                    "dataType": "string",
                    "optional": "true"
                },
                {
                    "name": "init",
                    "ts_dataType": "(value: any) => void",
                    "optional": "true",
                    "displayName": "Component initialization custom function"
                },
                {
                    "name": "label",
                    "dataType": "string",
                    "optional": "true"
                },
                {
                    "name": "labelPosition",
                    "ts_dataType": "string",
                    "optional": "true",
                    "enumOptions": [ "left", "right", "above", "below" ],
                    "defaultValue": "left"
                },
                {
                    "name": "labelAlign",
                    "ts_dataType": "string",
                    "optional": "true",
                    "enumOptions": [ "left", "right", "center" ],
                    "defaultValue": "left"
                },
                {
                    "name": "align",
                    "ts_dataType": "string",
                    "optional": "true",
                    "enumOptions": [ "left", "right", "center" ],
                    "defaultValue": "left"
                },
                {
                    "name": "valign",
                    "ts_dataType": "string",
                    "optional": "true",
                    "enumOptions": [ "top", "middle", "bottom" ],
                    "defaultValue": "middle"
                },
                {
                    "name": "labelValign",
                    "ts_dataType": "string",
                    "optional": "true",
                    "enumOptions": [ "top", "middle", "bottom" ],
                    "defaultValue": "middle"
                },
                {
                    "name": "height",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true"
                },
                {
                    "name": "rowHeight",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true"
                },
                {
                    "name": "width",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true"
                },
                {
                    "name": "columnWidth",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true"
                },
                {
                    "name": "labelWidth",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true"
                },
                {
                    "name": "labelHeight",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true"
                },
                {
                    "name": "padding",
                    "ts_dataType": "FormPadding",
                    "optional": "true",
                    "displayName": "Padding",
                    "defaultValue": "{left: 5, top: 5, right: 5, bottom: 5}"
                },
                {
                    "name": "labelPadding",
                    "ts_dataType": "FormPadding",
                    "optional": "true",
                    "displayName": "Label Padding",
                    "defaultValue": "{left: 5, top: 5, right: 5, bottom: 5}"
                },
                {
                    "name": "columns",
                    "ts_dataType": "Array<FormTemplateItem>",
                    "optional": "true",
                    "displayName": "Columns",
                    "defaultValue": "[]"
                },
                {
                    "name": "optionsLayout",
                    "ts_dataType": "string",
                    "optional": "true",
                    "enumOptions": [ "horizontal", "vertical" ],
                    "defaultValue": "vertical"
                },
                {
                    "name": "options",
                    "ts_dataType": "Array<any>",
                    "optional": "true"
                }

            ]
        }
    ],
    "exampleInit": {
        "template": "template",
        "value": "value"
    },
    "exampleElementsInit": {
        "showLegend": true,
        "enableAnimations": true,
        "padding": "padding",
        "backgroundColor": "#F5F5F5",
        "color": "#E5E5E5",
        "value": "{aTextField: 'value of a text field', aNumberField: 5}"
    },
    "exampledInitExtraData": {
        "properties": "template:\n        [{\n            bind: 'textBoxValue',\n            type: 'text',\n            label: 'Text input',\n            labelPosition: 'left',\n            labelWidth: '30%',\n            align: 'left',\n            width: '250px',\n            required: true\n        },\n        {\n            bind: 'passwordBoxValue',\n            type: 'password',\n            label: 'Password input',\n            labelPosition: 'left',\n            labelWidth: '30%',\n            align: 'left',\n            width: '250px',\n            required: true\n        },\n        {\n            bind: 'numberBoxValue',\n            type: 'number',\n            label: 'Number input',\n            labelPosition: 'left',\n            labelWidth: '30%',\n            align: 'left',\n            width: '250px',\n            required: true\n        },\n        {\n            name: 'submitButton',\n            type: 'button',\n            text: 'Submit Form Data',\n            align: 'right',\n            padding: { left: 0, top: 5, bottom: 5, right: 40 }\n        }],\n        value: {\n            'textBoxValue': 'text box value',\n            'passwordBoxValue': 'password box',\n            'numberBoxValue': 67.44\n        }",
        "beforeCreate": "",
        "mounted": "",
        "methods": "onButtonClick: function (event) {\n      alert('Button Clicked...');\n    }"
    },
    "properties": [
        {
            "name": "padding",
            "description": "Gets or sets the jqxForm's padding.",
            "dataType": "object",
            "ts_dataType": "FormPadding",
            "optional": "true",
            "defaultValue": "{ left: 5, top: 5, right: 5, bottom: 5 }",
            "exampleInit": {
                "padding": "{ left: 10, top: 10, right: 10, bottom: 10 }"
            }
        },
        {
            "name": "backgroundColor",
            "dataType": "string",
            "optional": "true",
            "defaultValue": "#F5F5F5",
            "description": "Gets or sets the jqxForm's backgroundColor.",
            "exampleInit": {
                "backgroundColor": "lightblue"
            }
        },
        {
            "name": "borderColor",
            "dataType": "string",
            "optional": "true",
            "defaultValue": "#E5E5E5",
            "description": "Gets or sets the jqxForm's borderColor.",
            "exampleInit": {
                "borderColor": "red"
            }
        },
        {
            "name": "value",
            "dataType": "object",
            "ts_dataType": "any",
            "defaultValue": "{}",
            "description": "Gets or sets the jqxForm's value."
        },
        {
            "name": "template",
            "dataType": "array",
            "ts_dataType": "Array<FormTemplateItem>",
            "optional": "false",
            "description": "<p>Gets or sets the jqxForm's template. Each object in the template, represents a Form row. Each row can have one field with label or multiple fields(if the current object's columns property is defined).</p> <p>Template options:</p> <ul> <li>bind - Sets a template's member Name.</li> <li>type - Sets a template member's type. Possible values: 'text', 'option', 'blank', 'button', 'color', 'number', 'boolean', 'password', 'label', 'time', 'date', 'datetime', 'custom'. </li> <li>label - Sets the label displayed next to the field.</li> <li>labelWidth - Sets the with o label displayed next to the field.</li> <li>required - Sets whether the field is optional or not.</li> <li>info - Sets the field information icon's tooltip.</li> <li>infoPosition - Sets the information icon's position. </li> <li>component - Sets the component's type. 'jqxDropDownList' when type is 'option'. By default, the component type is jqxRadioButton for the 'option' type.</li> <li>options - Sets the 'option' type's options.</li> <li>init - Sets the callback function for 'custom' type initialization.</li> <li>rowHeight - Sets the row's height.</li> <li>width - Sets the row's width.</li> <li>columns - Sets the row's columns.</li> <li>align - Sets the alignment of the field. Possible values: 'right', 'center', 'left'</li> <li>valign - Sets the vertical alignment of the field. Possible values: 'top', 'center', 'bottom'</li> <li>columnWidth - Sets the column's width.</li> </ul> <pre><code> const template = [ { bind: 'firstName', type: 'text', label: 'First name', required: true, labelWidth: '80px', width: '250px', info: 'Enter first name', infoPosition: 'right' }, { bind: 'lastName', type: 'text', label: 'Last name', required: true, labelWidth: '80px', width: '250px', info: 'Enter last name' }, { bind: 'company', type: 'text', label: 'Company', required: false, labelWidth: '80px', width: '250px' }, { bind: 'address', type: 'text', label: 'Address', required: true, labelWidth: '80px', width: '250px' }, { bind: 'city', type: 'text', label: 'City', required: true, labelWidth: '80px', width: '250px' }, { bind: 'state', type: 'option', label: 'State', required: true, labelWidth: '80px', width: '250px', component: 'jqxDropDownList', options: [ { value: 'California' }, { value: 'New York'}, { value: 'Oregon'}, { value: 'Illinois'}, { value: 'Texas'} ] }, { bind: 'zip', type: 'text', label: 'Zip code', required: true, labelWidth: '80px', width: '250px' }, { type: 'blank', rowHeight: '10px' }, { columns: [ { type: 'button', text: 'Sign up', width: '90px', height: '30px', rowHeight: '40px', columnWidth: '50%', align: 'right' }, { type: 'button', text: 'Cancel', width: '90px', height: '30px', rowHeight: '40px', columnWidth: '50%' } ] } ]; var sampleValue = { firstName: 'John', lastName: 'Scott', address: '1st Ave SW', company: 'N/A', city: 'San Antonio', state: 'Texas', zip: '78209' }; $('#sampleForm').jqxForm({ template: template, value: sampleValue, backgroundColor: '#fafafa', padding: { left: 10, top: 10, right: 10, bottom: 10 } }); </code></pre>"
        }
    ],
    "events": [
        {
            "name": "formDataChange"
        },
        {
            "name": "buttonClick"
        }
    ],
    "methods": [
        {
            "name": "getInstance",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": []
        },
        {
            "name": "refresh",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Refreshes the Form Component",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": []
        },
        {
            "name": "destroy",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Destroys the Form Component",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": []
        },
        {
            "name": "hideComponent",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Hides a form element component from the list specified in the template . ",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": [
                {
                    "name": "name",
                    "dataType": "string",
                    "description": "",
                    "optional": "false"
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxForm ref=\"myForm\" style=\"width: 450px; height: auto;\"\n             :template=\"template\" :value=\"value\" />\n&lt;/template>\n\n&lt;script>\n    import JqxForm from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxform.vue';\n\n    export default {\n        components: {\n            JqxForm\n        },\n        data: function () {\n            return {\n                template:\n                    [{\n                        bind: 'textBoxValue',\n                        type: 'text',\n                        label: 'Text input',\n                        labelPosition: 'left',\n                        labelWidth: '30%',\n                        align: 'left',\n                        width: '250px',\n                        required: true\n                    },\n                    {\n                        bind: 'passwordBoxValue',\n                        type: 'password',\n                        label: 'Password input',\n                        labelPosition: 'left',\n                        labelWidth: '30%',\n                        align: 'left',\n                        width: '250px',\n                        required: true\n                    },\n                    {\n                        bind: 'numberBoxValue',\n                        type: 'number',\n                        label: 'Number input',\n                        labelPosition: 'left',\n                        labelWidth: '30%',\n                        align: 'left',\n                        width: '250px',\n                        required: true\n                    },\n                    {\n                        name: 'submitButton',\n                        type: 'button',\n                        text: 'Submit Form Data',\n                        align: 'right',\n                        padding: { left: 0, top: 5, bottom: 5, right: 40 }\n                    }],\n                value: {\n                    'textBoxValue': 'text box value',\n                    'passwordBoxValue': 'password box',\n                    'numberBoxValue': 67.44\n                }\n            }\n        },\n        methods: {\n            onButtonClick: function (event) {\n                alert('Button Clicked...');\n            }\n        },\n        mounted: function () {\n            this.$refs.myForm.hideComponent('submitButton');\n\n            setTimeout(_ => this.$refs.myForm.showComponent('submitButton'), 1000);\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "showComponent",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Shows a hidden form element component from the list specified in the template . ",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": [
                {
                    "name": "name",
                    "dataType": "string",
                    "description": "",
                    "optional": "false"
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxForm ref=\"myForm\" style=\"width: 450px; height: auto;\"\n             :template=\"template\" :value=\"value\" />\n&lt;/template>\n\n&lt;script>\n    import JqxForm from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxform.vue';\n\n    export default {\n        components: {\n            JqxForm\n        },\n        data: function () {\n            return {\n                template:\n                    [{\n                        bind: 'textBoxValue',\n                        type: 'text',\n                        label: 'Text input',\n                        labelPosition: 'left',\n                        labelWidth: '30%',\n                        align: 'left',\n                        width: '250px',\n                        required: true\n                    },\n                    {\n                        bind: 'passwordBoxValue',\n                        type: 'password',\n                        label: 'Password input',\n                        labelPosition: 'left',\n                        labelWidth: '30%',\n                        align: 'left',\n                        width: '250px',\n                        required: true\n                    },\n                    {\n                        bind: 'numberBoxValue',\n                        type: 'number',\n                        label: 'Number input',\n                        labelPosition: 'left',\n                        labelWidth: '30%',\n                        align: 'left',\n                        width: '250px',\n                        required: true\n                    },\n                    {\n                        name: 'submitButton',\n                        type: 'button',\n                        text: 'Submit Form Data',\n                        align: 'right',\n                        padding: { left: 0, top: 5, bottom: 5, right: 40 }\n                    }],\n                value: {\n                    'textBoxValue': 'text box value',\n                    'passwordBoxValue': 'password box',\n                    'numberBoxValue': 67.44\n                }\n            }\n        },\n        methods: {\n            onButtonClick: function (event) {\n                alert('Button Clicked...');\n            }\n        },\n        mounted: function () {\n            this.$refs.myForm.hideComponent('submitButton');\n\n            setTimeout(_ => this.$refs.myForm.showComponent('submitButton'), 1000);\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "val",
            "description": "<P>Sets or gets the value of the object to bind to the form.",
            "exampleDescription": "Gets or sets the value of the form component",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "value",
                    "dataType": "object",
                    "ts_dataType": "any"
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxForm ref=\"myForm\" style=\"width: 450px; height: auto;\"\n             :template=\"template\" :value=\"value\" />\n&lt;/template>\n\n&lt;script>\n    import JqxForm from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxform.vue';\n\n    export default {\n        components: {\n            JqxForm\n        },\n        data: function () {\n            return {\n                template:\n                    [{\n                        bind: 'textBoxValue',\n                        type: 'text',\n                        label: 'Text input',\n                        labelPosition: 'left',\n                        labelWidth: '30%',\n                        align: 'left',\n                        width: '250px',\n                        required: true\n                    },\n                    {\n                        bind: 'passwordBoxValue',\n                        type: 'password',\n                        label: 'Password input',\n                        labelPosition: 'left',\n                        labelWidth: '30%',\n                        align: 'left',\n                        width: '250px',\n                        required: true\n                    },\n                    {\n                        bind: 'numberBoxValue',\n                        type: 'number',\n                        label: 'Number input',\n                        labelPosition: 'left',\n                        labelWidth: '30%',\n                        align: 'left',\n                        width: '250px',\n                        required: true\n                    },\n                    {\n                        name: 'submitButton',\n                        type: 'button',\n                        text: 'Submit Form Data',\n                        align: 'right',\n                        padding: { left: 0, top: 5, bottom: 5, right: 40 }\n                    }],\n                value: {\n                    'textBoxValue': 'text box value',\n                    'passwordBoxValue': 'password box',\n                    'numberBoxValue': 67.44\n                }\n            }\n        },\n        methods: {\n            onButtonClick: function (event) {\n                alert('Button Clicked...');\n            }\n        },\n        mounted: function () {\n            const value = this.$refs.myForm.getInstance().val();\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "submit",
            "description": "<P>Submits the form.",
            "exampleDescription": "Submits the form in a way similar to standard HTML forms",
            "returnDataType": "void",
            "ts_returnDataType": "void",
            "arguments": [
                {
                    "name": "action",
                    "dataType": "string"
                },
                {
                    "name": "target",
                    "dataType": "string"
                },
                {
                    "name": "method",
                    "dataType": "string"
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxForm ref=\"myForm\" style=\"width: 450px; height: auto;\"\n             :template=\"template\" :value=\"value\" />\n&lt;/template>\n\n&lt;script>\n    import JqxForm from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxform.vue';\n\n    export default {\n        components: {\n            JqxForm\n        },\n        data: function () {\n            return {\n                template:\n                    [{\n                        bind: 'textBoxValue',\n                        type: 'text',\n                        label: 'Text input',\n                        labelPosition: 'left',\n                        labelWidth: '30%',\n                        align: 'left',\n                        width: '250px',\n                        required: true\n                    },\n                    {\n                        bind: 'passwordBoxValue',\n                        type: 'password',\n                        label: 'Password input',\n                        labelPosition: 'left',\n                        labelWidth: '30%',\n                        align: 'left',\n                        width: '250px',\n                        required: true\n                    },\n                    {\n                        bind: 'numberBoxValue',\n                        type: 'number',\n                        label: 'Number input',\n                        labelPosition: 'left',\n                        labelWidth: '30%',\n                        align: 'left',\n                        width: '250px',\n                        required: true\n                    },\n                    {\n                        name: 'submitButton',\n                        type: 'button',\n                        text: 'Submit Form Data',\n                        align: 'right',\n                        padding: { left: 0, top: 5, bottom: 5, right: 40 }\n                    }],\n                value: {\n                    'textBoxValue': 'text box value',\n                    'passwordBoxValue': 'password box',\n                    'numberBoxValue': 67.44\n                }\n            }\n        },\n        methods: {\n            onButtonClick: function (event) {\n                // this.$refs.myForm.submit('URL', 'Target', 'Method');\n                // this.$refs.myForm.submit('https://www.jqwidgets.com/form_demo/', '_blank', 'Post');\n            }\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "getComponentByName",
            "description": "<P>Gets a form input element by name.",
            "returnDataType": "Object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "name",
                    "dataType": "string"
                }
            ],
            "exampleInit": {
                "args": [ "'submitButton'" ]
            }
        }

    ]
}