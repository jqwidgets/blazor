{
    "widget": {
        "name": "jqxListMenu",
        "description": "Displays a collection of Unordered and Ordered Lists. By nesting child ul or ol inside list items, you can create nested lists.",
        "angular2": {
            "name": "jqxListMenuComponent",
            "selector": "jqxListMenu"
        }
    },
    "dataTypes": [
        {
            "name": "ListMenuAnimationType",
            "ts_dataType": "enum",
            "enumOptions": [ "slide", "fade" ]
        },
        {
            "name": "ListMenuFilterCallback",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "text",
                    "dataType": "string",
                    "ts_dataType": "string",
                    "optional": "true",
                    "displayName": "Text",
                    "defaultValue": ""
                },
                {
                    "name": "searchValue",
                    "dataType": "string",
                    "ts_dataType": "string | number",
                    "optional": "true",
                    "displayName": "SearchValue",
                    "defaultValue": ""
                }
            ]
        }
    ],
    "exampleExtraTemplate": "<ul data-role=\"listmenu\">\n      <li>OSI\n        <ul data-role=\"listmenu\">\n          <li>Application Layer\n            <ol data-role=\"listmenu\">\n                <li>SIP</li>\n                <li>DNS</li>\n            </ol>\n          </li>\n          <li>Presentation Layer\n            <ol data-role=\"listmenu\">\n                <li>SSL</li>\n                <li>TLS</li>\n            </ol>\n          </li>\n          <li>Session Layer\n            <ol data-role=\"listmenu\">\n                <li>NetBIOS</li>\n                <li>SPDY</li>\n            </ol>\n          </li> \n        </ul>\n    </li>\n    <li>TCP/IP\n      <ul data-role=\"listmenu\">\n        <li>Application layer\n          <ol data-role=\"listmenu\">\n            <li>DHCP</li>\n            <li>DNS</li>\n            <li>FTP</li>\n          </ol>\n        </li>\n        <li>Transport layer\n          <ol data-role=\"listmenu\">\n            <li>TCP</li>\n            <li>UDP</li>\n            <li>SCTP</li>\n          </ol>\n        </li>\n        <li>Internet layer\n          <ol data-role=\"listmenu\">\n            <li>IP</li>\n            <li>ICMP</li>\n            <li>ECN</li>\n          </ol>\n        </li>\n      </ul>\n    </li>\n  </ul>",
    "exampleInit": {
        "width": "300"
    },
    "exampleElementsInit": {
        "autoSeparators": true,
        "enableScrolling": true,
        "showHeader": true,
        "placeHolder": "Find Contact"
    },
    "properties": [
        {
            "name": "alwaysShowNavigationArrows",
            "defaultValue": "false",
            "description": "<P>Sets or gets the jqxListMenu's alwaysShowNavigationArrows property. The alwaysShowNavigationArrows specifies whether navigation arrows are displayed for all items. </P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({ alwaysShowNavigationArrows: true }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/EVsjy/",
            "exampleDescription": "alwaysShowNavigationArrows is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "alwaysShowNavigationArrows": "true"
            }
        },
        {
            "name": "animationType",
            "defaultValue": "\"slide\"",
            "description": "<P>Sets or gets the animation's type. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'slide'</CODE></PRE>\n<PRE><CODE>'fade'</CODE></PRE>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({animationType: 'fade'});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/v3BSd/",
            "exampleDescription": "animationType is set to \"fade\"",
            "dataType": "string",
            "ts_dataType": "enum:ListMenuAnimationType",
            "exampleInit": {
                "animationType": "fade",
                "animationDuration": "1000"
            }
        },
        {
            "name": "animationDuration",
            "defaultValue": "0",
            "description": "<P>Sets or gets the animation duration in milliseconds. </P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({animationDuration: 130});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/gKF87/",
            "exampleDescription": "animationDuration is set to 500",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "animationDuration": "500"
            }
        },
        {
            "name": "autoSeparators",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether auto separators will be generated. Separator is generated for a sequence of list items with equal start character. The property is possible to be set through the attribute data-auto-separators=\"true\". Code Example: \n<PRE>                            <CODE>\r\n                            <PRE class=code style=\"MARGIN: 10px\"><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;ul data-role=<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"listmenu\" data-auto-separators=\"true\"</SPAN>&gt;</SPAN><DIV>            <SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;li&gt;</SPAN>Item 1<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/li&gt;</SPAN><DIV>            <SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;li&gt;</SPAN>Item 2<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/li&gt;</SPAN><DIV><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/ul&gt;</SPAN><DIV></DIV></DIV></DIV></DIV></PRE>\r\n                                </CODE>\r\n                            </PRE>\n\r\n<P></P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({ autoSeparators: true });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/HjsVS/",
            "exampleDescription": "autoSeparators is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "autoSeparators": "true"
            }
        },
        {
            "name": "backLabel",
            "defaultValue": "\"Back\"",
            "description": "<P>Sets or gets the BackButton's label. </P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({backLabel: 'Back'});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/DJFed/",
            "exampleDescription": "backLabel is set to \"Back button\"",
            "dataType": "string",
            "ts_dataType": "number | string",
            "exampleInit": {
                "backLabel": "Back Button"
            }
        },
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Sets or gets the jqxListMenu's disabled property. </P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({ disabled: true }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/fKtTA/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "enableScrolling",
            "defaultValue": "true",
            "description": "<P>When the jqxListMenu is created with the enableScrolling property set to true, vertical scrollbar automatically appears, if the items overflow the visible area. In order to use this feature, the following files should be included: jqxpanel.js and jqxscrollbar.js. </P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({ enableScrolling: false });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/MJEDM/",
            "exampleDescription": "enableScrolling is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "enableScrolling": "false"
            }
        },
        {
            "name": "filterCallback",
            "defaultValue": "function (text, searchValue){return text.toString().toLowerCase().indexOf(searchValue.toLowerCase()) >= 0;};",
            "description": "<P>Used for filtering the jqxListMenu using the filter input. </P>",
            "example": "<pre><CODE>$('#jqxListMenu').jqxListMenu({ filterCallback: function (text, searchValue) { return text.toString().toLowerCase().indexOf(searchValue.toLowerCase()) &gt;= 0;}});\r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vNfQ7/",
            "exampleDescription": "filterCallback is set to a custom function",
            "dataType": "Function",
            "ts_dataType": "(text:ListMenuFilterCallback['text'], searchValue:ListMenuFilterCallback['searchValue']) => boolean",
            "exampleInit": {
                "showFilter": "true",
                "filterCallback": "filterCallback",
                "exampleData": "return text.toString().toLowerCase().indexOf(searchValue.toLowerCase()) >= 0;"
            }
        },
        {
            "name": "height",
            "defaultValue": "auto",
            "description": "<P>Sets or gets the jqxListMenu's height. </P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({ height: '250px' }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/cJFQz/",
            "exampleDescription": "height is set to 500",
            "dataType": "string | number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "height": "500"
            }
        },
        {
            "name": "headerAnimationDuration",
            "defaultValue": "0",
            "description": "<P>Sets or gets the animation duration of the header. Header of a listmenu could be set whether the data-role attribute of a list item is set to 'header'. Example: \n<PRE>                            <CODE>\r\n<PRE class=code style=\"MARGIN: 10px\">    <SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;ul data-role=<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"listmenu\"</SPAN>&gt;</SPAN><DIV>        <SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;li data-role=<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"header\"</SPAN>&gt;</SPAN>Header<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/li&gt;</SPAN><DIV>        <SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;li&gt;</SPAN>Item<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/li&gt;</SPAN><DIV>    <SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/ul&gt;</SPAN><DIV></DIV></DIV></DIV></DIV></PRE>\r\n                                    </CODE>\r\n                                </PRE>\n\r\n<P></P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({ headerAnimationDuration: 250 });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/r9E4u/",
            "exampleDescription": "headerAnimationDuration is set to 500",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "headerAnimationDuration": "500"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxListMenu ref=\"myListMenu\" \n    :width=\"300\" :headerAnimationDuration=\"500\"> \n    &lt;ul data-role=\"listmenu\"> \n      &lt;li> \n        OSI\n        &lt;ul data-role=\"listmenu\">\n          &lt;li data-role=\"header\">\n            Application Layer\n            &lt;ol data-role=\"listmenu\">\n              &lt;li>SIP&lt;/li>\n              &lt;li>DNS&lt;/li> \n            &lt;/ol>\n          &lt;/li> \n          &lt;li> \n            Presentation Layer \n            &lt;ol data-role=\"listmenu\"> \n              &lt;li>SSL&lt;/li>\n              &lt;li>TLS&lt;/li> \n            &lt;/ol>\n          &lt;/li> \n          &lt;li> \n            Session Layer \n            &lt;ol data-role=\"listmenu\"> \n              &lt;li>NetBIOS&lt;/li>\n              &lt;li>SPDY&lt;/li> \n            &lt;/ol>\n          &lt;/li> \n        &lt;/ul>\n      &lt;/li>\n      &lt;li> \n        TCP/IP \n        &lt;ul data-role=\"listmenu\"> \n          &lt;li> \n            Application layer \n            &lt;ol data-role=\"listmenu\"> \n              &lt;li>DHCP&lt;/li> \n              &lt;li>DNS&lt;/li> \n              &lt;li>FTP&lt;/li> \n            &lt;/ol> \n          &lt;/li>\n          &lt;li>\n            Transport layer\n            &lt;ol data-role=\"listmenu\">\n              &lt;li>TCP&lt;/li>\n              &lt;li>UDP&lt;/li>\n              &lt;li>SCTP&lt;/li> \n            &lt;/ol> \n          &lt;/li> \n          &lt;li> \n            Internet layer \n            &lt;ol data-role=\"listmenu\">\n              &lt;li>IP&lt;/li>\n              &lt;li>ICMP&lt;/li>\n              &lt;li>ECN&lt;/li>\n            &lt;/ol>\n          &lt;/li>\n        &lt;/ul>\n      &lt;/li>\n    &lt;/ul>\n  &lt;/JqxListMenu> \n&lt;/template>\n \n&lt;script>\n  import JqxListMenu from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistmenu.vue'; \n \n  export default {\n    components: {\n      JqxListMenu\n    },\n    methods: {\n      filterCallback: function (text, searchValue) {\n        return text.toString().toLowerCase().indexOf(searchValue.toLowerCase()) >= 0;\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "placeHolder",
            "defaultValue": "'Filter list items...'",
            "description": "<P>Sets or gets the filter input field's place holder. </P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({ placeHolder: 'Search items...' }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/6hcz4/",
            "exampleDescription": "placeHolder is set to \"Search items...\"",
            "dataType": "string",
            "ts_dataType": "number | string",
            "exampleInit": {
                "showFilter": "true",
                "placeHolder": "Search items..."
            }
        },
        {
            "name": "readOnly",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the list will be read-only. In readOnly mode, items are not clickable. </P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({ readOnly: false });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Pz4my/",
            "exampleDescription": "readOnly is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "readOnly": "true"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts.</P>",
            "example": "<pre><CODE>$('#jqxListMenu').jqxListMenu({rtl : true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/CWuEY/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "roundedCorners",
            "defaultValue": "true",
            "description": "<P>Sets or gets the jqxListMenu's roundedCorners property. </P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({ roundedCorners: false }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tHpJH/",
            "exampleDescription": "roundedCorners is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "roundedCorners": "false"
            }
        },
        {
            "name": "showNavigationArrows",
            "defaultValue": "true",
            "description": "<P>Sets or gets the jqxListMenu's showNavigationArrows property. The showNavigationArrows specifies whether navigation arrows are displayed only for list items with nested Lists </P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({ showNavigationArrows: false }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/RFeFv/",
            "exampleDescription": "showNavigationArrows is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showNavigationArrows": "false"
            }
        },
        {
            "name": "showFilter",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the filter input field is visible. </P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({ showFilter: true }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ZuL3x/",
            "exampleDescription": "showFilter is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "showFilter": "true"
            }
        },
        {
            "name": "showHeader",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether the header will be visible. </P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({showHeader: false});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4f4CS/",
            "exampleDescription": "showHeader is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showHeader": "false"
            }
        },
        {
            "name": "showBackButton",
            "defaultValue": "true",
            "description": "<P>Indicates whether the back button will be visible. </P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({showBackButton: true});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/a3Q3V/",
            "exampleDescription": "showBackButton is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showBackButton": "false"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n<PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;\r\n</CODE></PRE>\r\n</CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/NQM36/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "width",
            "defaultValue": "100%",
            "description": "<P>Sets or gets the jqxListMenu's width. </P>",
            "example": "<pre><CODE>$(\"#jqxListMenu\").jqxListMenu({ width: '250px' }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/p5zxH/",
            "exampleDescription": "width is set to 300",
            "dataType": "string",
            "ts_dataType": "string | number"
        }
    ],
    "methods": [
        {
            "name": "back",
            "description": "<P>Navigates to the previous page. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/NHxSd/",
            "exampleDescription": "goes back in the jqxListMenu",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListMenu ref=\"myListMenu\"\n           :width=\"300\">\n      &lt;ul data-role=\"listmenu\">\n        &lt;li>\n          OSI\n          &lt;ul data-role=\"listmenu\">\n            &lt;li>\n              Application Layer\n              &lt;ol data-role=\"listmenu\">\n                &lt;li>SIP&lt;/li>\n                &lt;li>DNS&lt;/li>\n              &lt;/ol>\n            &lt;/li>\n            &lt;li>\n              Presentation Layer\n              &lt;ol data-role=\"listmenu\">\n                &lt;li>SSL&lt;/li>\n                &lt;li>TLS&lt;/li>\n              &lt;/ol>\n            &lt;/li>\n            &lt;li>\n              Session Layer\n              &lt;ol data-role=\"listmenu\">\n                &lt;li>NetBIOS&lt;/li>\n                &lt;li>SPDY&lt;/li>\n              &lt;/ol>\n            &lt;/li>\n          &lt;/ul>\n        &lt;/li>\n        &lt;li>\n          TCP/IP\n          &lt;ul id=\"tcp\" data-role=\"listmenu\">\n            &lt;li>\n              Application layer\n              &lt;ol data-role=\"listmenu\">\n                &lt;li>DHCP&lt;/li>\n                &lt;li>DNS&lt;/li>\n                &lt;li>FTP&lt;/li>\n              &lt;/ol>\n            &lt;/li>\n            &lt;li>\n              Transport layer\n              &lt;ol data-role=\"listmenu\">\n                &lt;li>TCP&lt;/li>\n                &lt;li>UDP&lt;/li>\n                &lt;li>SCTP&lt;/li>\n              &lt;/ol>\n            &lt;/li>\n            &lt;li>\n              Internet layer\n              &lt;ol data-role=\"listmenu\">\n                &lt;li>IP&lt;/li>\n                &lt;li>ICMP&lt;/li>\n                &lt;li>ECN&lt;/li>\n              &lt;/ol>\n            &lt;/li>\n          &lt;/ul>\n        &lt;/li>\n      &lt;/ul>\n    &lt;/JqxListMenu>\n    &lt;JqxButton style=\"margin-top: 20px\" :width=\"60\" @click=\"back()\">Go Back&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListMenu from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistmenu.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListMenu,\n      JqxButton\n    },\n    methods: {\n      back: function () {\n        this.$refs.myListMenu.back();\n      }\n    }   \n  }\n&lt;/script>"
            }
        },
        {
            "name": "changePage",
            "description": "<P>Sets the displayed page. The page could be set using a selector or object. The page must be a child of the current list and it's data-role must be set to \"listmenu\". </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hane8/",
            "exampleDescription": "changes the page in the jqxListMenu",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Item",
                    "dataType": "object | string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxListMenu ref=\"myListMenu\"\n         :width=\"300\">\n    &lt;ul data-role=\"listmenu\">\n      &lt;li>\n        OSI\n        &lt;ul data-role=\"listmenu\">\n          &lt;li>\n            Application Layer\n            &lt;ol data-role=\"listmenu\">\n              &lt;li>SIP&lt;/li>\n              &lt;li>DNS&lt;/li>\n            &lt;/ol>\n          &lt;/li>\n          &lt;li>\n            Presentation Layer\n            &lt;ol data-role=\"listmenu\">\n              &lt;li>SSL&lt;/li>\n              &lt;li>TLS&lt;/li>\n            &lt;/ol>\n          &lt;/li>\n          &lt;li>\n            Session Layer\n            &lt;ol data-role=\"listmenu\">\n              &lt;li>NetBIOS&lt;/li>\n              &lt;li>SPDY&lt;/li>\n            &lt;/ol>\n          &lt;/li>\n        &lt;/ul>\n      &lt;/li>\n      &lt;li>\n        TCP/IP\n        &lt;ul id=\"tcp\" data-role=\"listmenu\">\n          &lt;li>\n            Application layer\n            &lt;ol data-role=\"listmenu\">\n              &lt;li>DHCP&lt;/li>\n              &lt;li>DNS&lt;/li>\n              &lt;li>FTP&lt;/li>\n            &lt;/ol>\n          &lt;/li>\n          &lt;li>\n            Transport layer\n            &lt;ol data-role=\"listmenu\">\n              &lt;li>TCP&lt;/li>\n              &lt;li>UDP&lt;/li>\n              &lt;li>SCTP&lt;/li>\n            &lt;/ol>\n          &lt;/li>\n          &lt;li>\n            Internet layer\n            &lt;ol data-role=\"listmenu\">\n              &lt;li>IP&lt;/li>\n              &lt;li>ICMP&lt;/li>\n              &lt;li>ECN&lt;/li>\n            &lt;/ol>\n          &lt;/li>\n        &lt;/ul>\n      &lt;/li>\n    &lt;/ul>\n  &lt;/JqxListMenu>\n&lt;/template>\n\n&lt;script>\n  import JqxListMenu from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistmenu.vue';\n\n  export default {\n    components: {\n      JqxListMenu\n    },\n    mounted: function () {\n      this.$refs.myListMenu.changePage('#tcp');\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "destroy",
            "description": "<P>Destroys the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxListMenu').jqxListMenu('destroy'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ujgQH/",
            "exampleDescription": "destroys the jqxListMenu",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        }
    ]
}