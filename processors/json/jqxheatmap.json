{
  "widget": {
    "description": "Displays a heatmap.",
    "name": "jqxHeatMap",
    "angular2": {
      "name": "jqxHeatMapComponent",
      "selector": "jqxHeatMap"
    }
  },
  "dataTypes": [
    {
      "name": "HeatMapLabelFormat",
      "ts_dataType": "enum",
      "enumOptions": [
        "numeric",
        "2-digit",
        "narrow",
        "short",
        "long"
      ]
    },
    {
      "name": "HeatMapPaletteType",
      "ts_dataType": "enum",
      "enumOptions": [
        "Gradient",
        "Fixed"
      ]
    },
    {
      "name": "HeatMapLegendPosition",
      "ts_dataType": "enum",
      "enumOptions": [
        "Top",
        "Bottom",
        "Left",
        "Right"
      ]
    },
    {
      "name": "HeatMapXAxis",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "labels",
          "ts_dataType": "any[]",
          "dataType": "Array",
          "optional": "true",
          "displayName": "Sets the x Axis labels",
          "defaultValue": "[]"
        },
        {
          "name": "opposedPosition",
          "dataType": "boolean",
          "optional": "true",
          "displayName": "Sets axis position",
          "defaultValue": "false"
        },
        {
          "name": "isInversed",
          "dataType": "boolean",
          "optional": "true",
          "displayName": "Sets axis inverse state",
          "defaultValue": "false"
        },
        {
          "name": "minimum",
          "dataType": "Date",
          "optional": "true",
          "displayName": "Sets the minimum date",
          "defaultValue": "null"
        },
        {
          "name": "maximum",
          "dataType": "Date",
          "optional": "true",
          "displayName": "Sets the maximum",
          "defaultValue": "null"
        },
        {
          "name": "labelFormat",
          "dataType": "string",
          "ts_dataType": "enum:HeatMapLabelFormat",
          "optional": "true",
          "displayName": "Sets the label format in calendar mode",
          "defaultValue": "short"
        }
      ]
    },
    {
      "name": "HeatMapYAxis",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "labels",
          "ts_dataType": "any[]",
          "dataType": "Array",
          "optional": "true",
          "displayName": "Sets the y Axis labels",
          "defaultValue": "[]"
        },
        {
          "name": "opposedPosition",
          "dataType": "boolean",
          "optional": "true",
          "displayName": "Sets axis position",
          "defaultValue": "false"
        },
        {
          "name": "isInversed",
          "dataType": "boolean",
          "optional": "true",
          "displayName": "Sets axis inverse state",
          "defaultValue": "false"
        }
      ]
    },
    {
      "name": "HeatMapPaletteSettings",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "palette",
          "dataType": "Array",
          "ts_dataType": "any[]",
          "optional": "true",
          "displayName": "Sets the heatmap's palette",
          "defaultValue": "[]"
        },
        {
          "name": "type",
          "dataType": "string",
          "ts_dataType": "enum:HeatMapPaletteType",
          "optional": "true",
          "displayName": "Sets palette's type",
          "defaultValue": "Gradient"
        },
        {
          "name": "emptyPointColor",
          "dataType": "string",
          "optional": "true",
          "displayName": "Sets empty cell's color",
          "defaultValue": "#eee"
        }
      ]
    },
    {
      "name": "HeatMapPalette",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "value",
          "dataType": "number",
          "optional": "false",
          "displayName": "Sets palette item value",
          "defaultValue": null
        },
        {
          "name": "color",
          "dataType": "string",
          "optional": "false",
          "displayName": "Sets palette item color",
          "defaultValue": null
        },
        {
          "name": "label",
          "dataType": "string",
          "optional": "true",
          "displayName": "Sets palette item label",
          "defaultValue": null
        }
      ]
    },
    {
      "name": "HeatMapLegendSettings",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "position",
          "dataType": "String",
          "ts_dataType": "enum:HeatMapLegendPosition",
          "optional": "true",
          "displayName": "Sets legend's position",
          "defaultValue": "Right"
        }
      ]
    },
    {
      "name": "HeatMapTooltipRender",
      "ts_dataType": "interface",
      "properties": [
        {
          "name": "xLabel",
          "ts_dataType": "any[]",
          "optional": "true",
          "displayName": "xLabel",
          "defaultValue": ""
        },
        {
          "name": "yLabel",
          "ts_dataType": "any[]",
          "optional": "true",
          "displayName": "yLabel",
          "defaultValue": ""
        },
        {
          "name": "value",
          "ts_dataType": "string",
          "optional": "true",
          "displayName": "value",
          "defaultValue": ""
        },
        {
          "name": "content",
          "ts_dataType": "string",
          "optional": "true",
          "displayName": "content",
          "defaultValue": ""
        },
        {
          "name": "date",
          "ts_dataType": "Date",
          "optional": "true",
          "displayName": "date",
          "defaultValue": ""
        }
      ]
    }
  ],
  "exampleInit": {
    "width": "auto"
  },
  "exampleTagName": "jqx-heatmap",
  "properties": [
    {
      "name": "xAxis",
      "defaultValue": "{}",
      "description": "<P>Sets the HeatMap x Axis. </P>",
      "example": "<pre><CODE>\r\n$(\"#jqxHeatMap\").jqxHeatMap(\r\n{\r\n    source: source,\r\n    xAxis: {\r\n        labels: ['Margaret', 'Michael', 'Robert', 'Andrew', 'John'],\r\n        opposedPosition: true,\r\n        isInversed: true\r\n});                        \r\n                        </CODE></pre>",
      "exampleDescription": "xAxis is set to a custom object",
      "dataType": "Object",
      "ts_dataType": "HeatMapXAxis",
      "exampleInit": {
        "xAxis": "xAxis",
        "exampleData": "{\n     labels: ['John', 'Marry', 'Alba', 'Steven', 'Josh', 'Alica', 'Robert', 'Kim', 'Ann', 'Paul', 'Regina', 'Dorothy'],\n     opposedPosition: false,\n     isInversed: false,\n     minimum: null,\n     maximum: null,\n     labelFormat: 'short'\n  }"
      },
      "subProperties": [
        {
          "name": "labels",
          "dataType": "Array",
          "defaultValue": []
        },
        {
          "name": "opposedPosition",
          "dataType": "boolean",
          "defaultValue": false
        },
        {
          "name": "isInversed",
          "dataType": "boolean",
          "defaultValue": false
        },
        {
          "name": "minimum",
          "dataType": "Date",
          "defaultValue": null
        },
        {
          "name": "maximum",
          "dataType": "Date",
          "defaultValue": null
        },
        {
          "name": "labelFormat",
          "dataType": "string",
          "ts_dataType": "enum:HeatMapLabelFormat",
          "defaultValue": "short"
        }
      ]
    },
    {
      "name": "yAxis",
      "defaultValue": "{}",
      "description": "<P>Sets the HeatMap y Axis. </P>",
      "example": "<pre><CODE>\r\n$(\"#jqxHeatMap\").jqxHeatMap(\r\n{\r\n    source: source,\r\n    yAxis: {\r\n        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],\r\n        opposedPosition: true,\r\n        isInversed: true\r\n});                        \r\n                        </CODE></pre>",
      "exampleDescription": "yAxis is set to a custom object",
      "dataType": "Object",
      "ts_dataType": "HeatMapYAxis",
      "exampleInit": {
        "yAxis": "yAxis",
        "exampleData": "{\n     labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],\n     opposedPosition: false,\n     isInversed: false\n  }"
      },
      "subProperties": [
        {
          "name": "labels",
          "dataType": "Array",
          "defaultValue": []
        },
        {
          "name": "opposedPosition",
          "dataType": "boolean",
          "defaultValue": false
        },
        {
          "name": "isInversed",
          "dataType": "boolean",
          "defaultValue": false
        }
      ]
    },
    {
      "name": "paletteSettings",
      "defaultValue": "{}",
      "description": "<P>Sets the HeatMap palette settings. </P>",
      "example": "<pre><CODE>\r\n$(\"#jqxHeatMap\").jqxHeatMap(\r\n{\r\n    source: source,\r\n    paletteSettings: {\r\n        type: 'Gradient',\r\n emptyPointColor: '#eee',\r\n palette: [\r\n { value: 0, color: '#5dc3f0', label: '' },\r\n { value: 50, color: '#4bb1de', label: '' },\r\n { value: 100, color: '#3885a6', label: '' },\r\n ],\r\n});                        \r\n                        </CODE></pre>",
      "exampleDescription": "paletteSettings is set to a custom object",
      "dataType": "Object",
      "ts_dataType": "HeatMapPaletteSettings",
      "exampleInit": {
        "paletteSettings": "paletteSettings",
        "exampleData": "{\n     palette: [\n       { value: 0, color: '#5dc3f0', label: '' },\n       { value: 50, color: '#4bb1de', label: '' },\n       { value: 100, color: '#3885a6', label: '' }\n     ],\n     type: 'Gradient',\n     emptyPointColor: '#eee'\n }"
      },
      "subProperties": [
        {
          "name": "palette",
          "defaultValue": "[]",
          "dataType": "Array",
          "ts_dataType": "Palette[]",
          "subProperties": [
            {
              "name": "value",
              "dataType": "number",
              "defaultValue": null
            },
            {
              "name": "color",
              "dataType": "string",
              "defaultValue": null
            },
            {
              "name": "label",
              "dataType": "string",
              "defaultValue": null
            }
          ]
        },
        {
          "name": "type",
          "dataType": "string",
          "ts_dataType": "enum:HeatMapPaletteType",
          "defaultValue": "Gradient"
        },
        {
          "name": "emptyPointColor",
          "dataType": "string",
          "defaultValue": "#eee"
        }
      ]
    },
    {
      "name": "legendSettings",
      "defaultValue": "{}",
      "description": "<P>Sets the HeatMap legend settings. </P>",
      "example": "<pre><CODE>\r\n$(\"#jqxHeatMap\").jqxHeatMap(\r\n{\r\n    source: source,\r\n    legendSettings: {\r\n        position: 'Right'\r\n});                        \r\n                        </CODE></pre>",
      "exampleDescription": "legendSettings is set to a custom object",
      "dataType": "Object",
      "ts_dataType": "HeatMapLegendSettings",
      "exampleInit": {
        "legendSettings": "legendSettings",
        "exampleData": "{\n      position: 'Right'\n  }"
      },
      "subProperties": [
        {
          "name": "position",
          "dataType": "string",
          "ts_dataType": "enum:HeatMapLegendPosition",
          "defaultValue": "Right"
        }
      ]
    },
    {
      "name": "source",
      "defaultValue": "[]",
      "description": "<P>Sets or gets the heatmap's source. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>title</CODE> property. </P>\n<PRE><CODE>$('#jqxHeatMap').jqxHeatMap({ title: 'Template Title' }); </CODE></PRE>\n\r\n<P>Get the <CODE>title</CODE> property. </P>\n<PRE><CODE>var title = $('#jqxHeatMap').jqxHeatMap('title');</CODE></PRE>",
      "example": "",
      "exampleDescription": "Sets heatmap source",
      "dataType": "Array",
      "ts_dataType": "any[]",
      "exampleInit": {
        "source": "source",
        "exampleData": "[\n    [89, 39, 94, 55, 3],\n    [53, 38, 26, 68, 33],\n    [22, 0, 66, 90, 78],\n    [97, 68, 68, 3, 99],\n    [47, 47, 88, 6, 1],\n    [73, 23, 3, 79, 100],\n    [21, 86, 13, 33, 0],\n    [53, 81, 95, 79, 66],\n    [74, 68, 88, 51, 43],\n    [10, 12, 78, 14, 21],\n    [55, 58, 12, 82, 99],\n    [88, 23, 86, 59, 53]\n  ]"
      }
    },
    {
      "name": "title",
      "defaultValue": "Title",
      "description": "<P>Sets or gets the heatmap's title. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>title</CODE> property. </P>\n<PRE><CODE>$('#jqxHeatMap').jqxHeatMap({ title: 'Template Title' }); </CODE></PRE>\n\r\n<P>Get the <CODE>title</CODE> property. </P>\n<PRE><CODE>var title = $('#jqxHeatMap').jqxHeatMap('title');</CODE></PRE>",
      "example": "",
      "exampleDescription": "title is set to 'Template Title'",
      "dataType": "string",
      "ts_dataType": "string",
      "exampleInit": {
        "title": "Template Title"
      }
    },
    {
      "name": "width",
      "defaultValue": "auto",
      "description": "<P>Sets or gets the heatmap's width. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$('#jqxHeatMap').jqxHeatMap({ width: '1000px' }); </CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxHeatMap').jqxHeatMap('width');</CODE></PRE>",
      "example": "",
      "exampleDescription": "width is set to 'auto'",
      "dataType": "string | number",
      "ts_dataType": "number | string",
      "exampleInit": {
        "width": "1000"
      }
    },
    {
      "name": "tooltipRender",
      "defaultValue": "null",
      "description": "<P>Set the content of the tooltip. It can be either plain text or HTML code. Args object is passed which contains five properties - xLabel, yLabel, value, content and date (if heatmap is in calendar mode).</P>",
      "example": "<pre><CODE>\r\n$('#jqxHeatMap').jqxHeatMap({ tooltipRender: function (args) {\r\n    args.content = args.xLabel + ' | ' + args.yLabel + ' : ' + '<strong>' + args.value + '</strong>'; \r\n                         </CODE></pre>",
      "exampleDescription": "tooltipRender is set to custom function",
      "dataType": "Function",
      "ts_dataType": "(args: HeatMapTooltipRender) => void",
      "exampleInit": {
        "tooltipRender": "tooltipRender",
        "exampleData": "args.content = 'On ' + args.yLabel + ', ' + args.xLabel + ' has made ' + args.value;"
      }
    }
  ],
  "events": [],
  "methods": [
    {
      "name": "destroy",
      "description": "<P>Destroys the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxHeatMap').jqxHeatMap('destroy'); </CODE></PRE>",
      "exampleDescription": "destroys the heatmap",
      "returnDataType": "None",
      "arguments": [
        {
          "name": "None",
          "dataType": null,
          "description": "",
          "optional": false
        }
      ]
    },
    {
      "name": "setLegendPosition",
      "description": "<P>Sets legend's position. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>setLegendPosition</CODE> method. </P>\n<PRE><CODE>$('#jqxHeatMap').jqxHeatMap('setLegendPosition', 'Top'); </CODE></PRE>",
      "exampleDescription": "set legend's position",
      "returnDataType": "None",
      "arguments": [
        {
          "name": "position",
          "dataType": "string",
          "description": "\"Top\", \"Bottom\", \"Left\" or \"Right\"",
          "optional": true
        }
      ],
      "exampleInit": {
        "args": [
          "'Bottom'"
        ]
      }
    },
    {
      "name": "setOpposedXAxisPosition",
      "description": "<P>Sets opposed x axis position. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>setOpposedXAxisPosition</CODE> method. </P>\n<PRE><CODE>$('#jqxHeatMap').jqxHeatMap('setOpposedXAxisPosition', true); </CODE></PRE>",
      "exampleDescription": "set opposed x axis position",
      "returnDataType": "None",
      "arguments": [
        {
          "name": "opposedPosition",
          "dataType": "boolean",
          "description": "",
          "optional": false
        }
      ],
      "exampleInit": {
        "args": [
          "true"
        ]
      }
    },
    {
      "name": "setOpposedYAxisPosition",
      "description": "<P>Sets opposed y axis position. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>setOpposedYAxisPosition</CODE> method. </P>\n<PRE><CODE>$('#jqxHeatMap').jqxHeatMap('setOpposedYAxisPosition', true); </CODE></PRE>",
      "exampleDescription": "set opposed y axis position",
      "returnDataType": "None",
      "arguments": [
        {
          "name": "opposedPosition",
          "dataType": "boolean",
          "description": "",
          "optional": false
        }
      ],
      "exampleInit": {
        "args": [
          "true"
        ]
      }
    },
    {
      "name": "reverseXAxisPosition",
      "description": "<P>Sets reversed x axis position. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>reverseXAxisPosition</CODE> method. </P>\n<PRE><CODE>$('#jqxHeatMap').jqxHeatMap('reverseXAxisPosition', true); </CODE></PRE>",
      "exampleDescription": "set reversed x axis position",
      "returnDataType": "None",
      "arguments": [
        {
          "name": "isInversed",
          "dataType": "boolean",
          "description": "",
          "optional": false
        }
      ],
      "exampleInit": {
        "args": [
          "true"
        ]
      }
    },
    {
      "name": "reverseYAxisPosition",
      "description": "<P>Sets reversed y axis position. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>reverseYAxisPosition</CODE> method. </P>\n<PRE><CODE>$('#jqxHeatMap').jqxHeatMap('reverseYAxisPosition', true); </CODE></PRE>",
      "exampleDescription": "set reversed y axis position",
      "returnDataType": "None",
      "arguments": [
        {
          "name": "isInversed",
          "dataType": "boolean",
          "description": "",
          "optional": false
        }
      ],
      "exampleInit": {
        "args": [
          "true"
        ]
      }
    },
    {
      "name": "setPaletteType",
      "description": "<P>Sets palette's type. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>setPaletteType</CODE> method. </P>\n<PRE><CODE>$('#jqxHeatMap').jqxHeatMap('setPaletteType', 'Fixed'); </CODE></PRE>",
      "exampleDescription": "set palette's type",
      "returnDataType": "None",
      "arguments": [
        {
          "name": "type",
          "dataType": "string",
          "description": "\"Gradient\", or \"Fixed\"",
          "optional": false
        }
      ],
      "exampleInit": {
        "args": [
          "'Fixed'"
        ]
      }
    }
  ]
}