{
    "widget": {
        "name": "jqxChart",
        "description": "Displays Lightweight and powerful chart widget written 100% in javascript. It offers many advanced features and supports three different rendering technologies - SVG, HTML5 Canvas & VML. You can use jqxChart to add interactive charts to your website, build custom dashboards, or use it in your mobile applications. jqxChart offers excellent cross-browser compatibility and works well with both desktop and mobile browsers. jqxChart is being used by thousands of individual developers, small companies as well as a significant percentage of the Furtune 100 companies.",
        "angular2": {
            "name": "jqxChartComponent",
            "selector": "jqxChart",
            "function_call_ngOnChanges": "this.refresh();"
        }
    },
    "dataTypes": [
        {
            "name": "ChartDraw",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "renderer",
                    "dataType": "object",
                    "optional": "true",
                    "displayName": "Renderer",
                    "defaultValue": "{}"
                },
                {
                    "name": "rect",
                    "dataType": "object",
                    "optional": "true",
                    "displayName": "Rect",
                    "defaultValue": "{}"
                }
            ]
        },
        {
            "name": "ChartDrawBefore",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "renderer",
                    "dataType": "object",
                    "optional": "true",
                    "displayName": "Renderer",
                    "defaultValue": "{}"
                },
                {
                    "name": "rect",
                    "dataType": "object",
                    "optional": "true",
                    "displayName": "Rect",
                    "defaultValue": "{}"
                }
            ]
        },
        {
            "name": "ChartOffset",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "x",
                    "dataType": "number",
                    "optional": "false",
                    "displayName": "Offset X",
                    "defaultValue": "0"
                },
                {
                    "name": "y",
                    "dataType": "number",
                    "optional": "false",
                    "displayName": "Offset Y",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "name": "ChartRect",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "x",
                    "dataType": "number",
                    "optional": "false",
                    "displayName": "x",
                    "defaultValue": "0"
                },
                {
                    "name": "y",
                    "dataType": "number",
                    "optional": "false",
                    "displayName": "y",
                    "defaultValue": "0"
                },
                {
                    "name": "width",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "false",
                    "displayName": "width",
                    "defaultValue": "100"
                },
                {
                    "name": "height",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "false",
                    "displayName": "height",
                    "defaultValue": "100"
                }
            ]
        },
        {
            "name": "ChartPadding",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "left",
                    "dataType": "number",
                    "optional": "false",
                    "displayName": "Left",
                    "defaultValue": "0"
                },
                {
                    "name": "right",
                    "dataType": "number",
                    "optional": "false",
                    "displayName": "Right",
                    "defaultValue": "0"
                },
                {
                    "name": "top",
                    "dataType": "number",
                    "optional": "false",
                    "displayName": "Top",
                    "defaultValue": "0"
                },
                {
                    "name": "bottom",
                    "dataType": "number",
                    "optional": "false",
                    "displayName": "Bottom",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "name": "ChartTickMarks",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "visible",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Visible",
                    "defaultValue": "true",
                    "designTypeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "color",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Color",
                    "defaultValue": "#888888",
                    "designTimeType": "color",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "step",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Step",
                    "defaultValue": "1",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "dashStyle",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Dash style",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "lineWidth",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Line width",
                    "defaultValue": "1",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "size",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Size",
                    "defaultValue": "1",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "interval",
                    "dataType": "number",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Interval",
                    "defaultValue": "1",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "custom",
                    "ts_dataType": "Array<ChartCustomOffset>",
                    "optional": "true",
                    "displayName": "Custom labels",
                    "designTimeFilterKeys": [ "gridlines" ]
                }
            ]
        },
        {
            "name": "ChartGridLines",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "visible",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Visible",
                    "defaultValue": "true",
                    "designTypeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "color",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Color",
                    "defaultValue": "#888888",
                    "designTimeType": "color",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "step",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Step",
                    "defaultValue": "1",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "dashStyle",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Dash style",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "lineWidth",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Line width",
                    "defaultValue": "1",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "interval",
                    "dataType": "number",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Interval",
                    "defaultValue": "1",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "custom",
                    "ts_dataType": "Array<ChartCustomOffset>",
                    "optional": "true",
                    "displayName": "Custom labels",
                    "designTimeFilterKeys": [ "gridlines" ]
                }
            ]
        },
        {
            "name": "ChartAxisLine",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "visible",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Visible",
                    "defaultValue": "true",
                    "designTypeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "color",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Color",
                    "defaultValue": "#888888",
                    "designTimeType": "color",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "dashStyle",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Dash style",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "lineWidth",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Line width",
                    "defaultValue": "1",
                    "designTimeFilterKeys": [ "gridlines" ]
                }
            ]
        },
        {
            "name": "ChartTextRotationPoint",
            "ts_dataType": "enum",
            "enumOptions": [ "topleft", "middleleft", "bottomleft", "topcenter", "middlecenter", "bottomcenter", "topright", "middleright", "bottomright" ]
        },
        {
            "name": "ChartHorizontalTextAlignment",
            "ts_dataType": "enum",
            "enumOptions": [ "left", "center", "right" ]
        },
        {
            "name": "ChartVerticalTextAlignment",
            "ts_dataType": "enum",
            "enumOptions": [ "top", "middle", "bottom" ]
        },
        {
            "name": "ChartAxisType",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "date", "basic" ]
        },
        {
            "name": "ChartDateAxisBaseUnit",
            "ts_dataType": "enum",
            "enumOptions": [ "year", "month", "day", "hour", "minute", "second", "millisecond" ]
        },
        {
            "name": "ChartAxisPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "left", "top", "right", "bottom" ]
        },
        {
            "name": "ChartSeriesSymbolType",
            "ts_dataType": "enum",
            "enumOptions": [ "none", "circle", "square", "diamond", "triangle_up", "triangle_down", "triangle_left", "triangle_right" ]
        },
        {
            "name": "ChartEmptyPointsDisplay",
            "ts_dataType": "enum",
            "enumOptions": [ "skip", "connect", "zero" ]
        },
        {
            "name": "ChartLinesUnselectMode",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "click" ]
        },
        {
            "name": "ChartSerieTypes",
            "ts_dataType": "enum",
            "enumOptions": [
                "line",
                "stackedline",
                "stackedline100",
                "spline",
                "stackedspline",
                "stackedspline100",
                "stepline",
                "stackedstepline",
                "stackedstepline100",
                "area",
                "stackedarea",
                "stackedarea100",
                "splinearea",
                "stackedsplinearea",
                "stackedsplinearea100",
                "steparea",
                "stackedsteparea",
                "stackedsteparea100",
                "rangearea",
                "splinerangearea",
                "steprangearea",
                "column",
                "stackedcolumn",
                "stackedcolumn100",
                "rangecolumn",
                "scatter",
                "stackedscatter",
                "stackedscatter100",
                "bubble",
                "stackedbubble",
                "stackedbubble100",
                "pie",
                "donut",
                "candlestick",
                "ohlc",
                "waterfall",
                "stackedwaterfall"
            ]
        },
        {
            "name": "ChartSerieGroupOrientations",
            "ts_dataType": "enum",
            "enumOptions": [ "vertical", "horizontal" ]
        },
        {
            "name": "ChartLegendFlow",
            "ts_dataType": "enum",
            "enumOptions": [ "vertical", "horizontal" ]
        },
        {
            "name": "ChartRenderEngine",
            "ts_dataType": "enum",
            "enumOptions": [ "auto", "SVG", "HTML5", "VML" ]
        },
        {
            "name": "ChartCustomOffset",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "value",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Value"
                },
                {
                    "name": "offset",
                    "ts_dataType": "number",
                    "optional": "true",
                    "displayName": "Offset"
                }
            ]
        },
        {
            "name": "ChartAxisLabels",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "visible",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Visible",
                    "defaultValue": "false",
                    "designTypeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "class",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "CSS class",
                    "defaultValue": "",
                    "designTypeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "step",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Step",
                    "defaultValue": "1",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "angle",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Rotation angle",
                    "defaultValue": "0",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "rotationPoint",
                    "ts_dataType": "enum:ChartTextRotationPoint",
                    "optional": "true",
                    "displayName": "Rotation point",
                    "defaultValue": "textRotationPoint.middlecenter",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "horizontalAlignment",
                    "ts_dataType": "enum:ChartHorizontalTextAlignment",
                    "optional": "true",
                    "displayName": "Horizontal alignment",
                    "defaultValue": "HorizontalTextAlignment.center",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "verticalAlignment",
                    "ts_dataType": "enum:ChartVerticalTextAlignment",
                    "optional": "true",
                    "displayName": "Vertical alignment",
                    "defaultValue": "VerticalTextAlignment.middle",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "offset",
                    "ts_dataType": "ChartOffset",
                    "optional": "true",
                    "displayName": "Offset",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "custom",
                    "ts_dataType": "Array<ChartCustomOffset>",
                    "optional": "true",
                    "displayName": "Custom labels",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "formatSettings",
                    "ts_dataType": "ChartFormatSettings",
                    "optional": "true",
                    "displayName": "Format settings",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "formatFunction",
                    "ts_dataType": "(value: any, itemIndex?: number, serieIndex?: number, groupIndex?: number, xAxisValue?: any, xAxis?: ChartXAxis) => string",
                    "optional": "true",
                    "displayName": "Format function",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "formatfunction" ]
                },
                {
                    "name": "autoRotate",
                    "ts_dataType": "boolean",
                    "optional": "true",
                    "displayName": "autoRotate",
                    "defaultValue": "false"
                }
            ]
        },
        {
            "name": "ChartFormatSettings",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "prefix",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Prefix",
                    "defaultValue": ""
                },
                {
                    "name": "sufix",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Sufix",
                    "defaultValue": ""
                },
                {
                    "name": "decimalSeparator",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Decimal separator",
                    "defaultValue": ""
                },
                {
                    "name": "thousandsSeparator",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Thousands separator",
                    "defaultValue": ""
                },
                {
                    "name": "decimalPlaces",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Decimal places",
                    "defaultValue": "2"
                },
                {
                    "name": "negativeWithBrackets",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Display negatives in brackets",
                    "defaultValue": "false"
                },
                {
                    "name": "dateFormat",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Date/time format",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "ChartSeriesLabels",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "visible",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Visible",
                    "defaultValue": "false",
                    "designTypeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "class",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "CSS class",
                    "defaultValue": "",
                    "designTypeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "angle",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Rotation angle",
                    "defaultValue": "0",
                    "designTimeFilterKeys": [ "textsettings" ]
                },

                {
                    "name": "horizontalAlignment",
                    "ts_dataType": "enum:ChartHorizontalTextAlignment",
                    "optional": "true",
                    "displayName": "Horizontal alignment",
                    "defaultValue": "HorizontalTextAlignment.center",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "verticalAlignment",
                    "ts_dataType": "enum:ChartVerticalTextAlignment",
                    "optional": "true",
                    "displayName": "Vertical alignment",
                    "defaultValue": "VerticalTextAlignment.middle",
                    "designTimeFilterKeys": [ "textsettings" ]
                },

                {
                    "name": "offset",
                    "ts_dataType": "ChartOffset",
                    "optional": "true",
                    "displayName": "Offset",
                    "designTimeFilterKeys": [ "textsettings" ]
                },

                {
                    "name": "backgroundColor",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Background color",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "backgroundOpacity",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Background opacity",
                    "defaultValue": "1.0",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "borderColor",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Border color",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "borderOpacity",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Border opacity",
                    "defaultValue": "1.0",
                    "designTimeFilterKeys": [ "textsettings" ]
                },

                {
                    "name": "padding",
                    "ts_dataType": "ChartPadding",
                    "optional": "true",
                    "displayName": "Padding",
                    "defaultValue": "{left: 1, top: 1, right: 1, bottom: 1}",
                    "designTimeFilterKeys": [ "textsettings" ]
                },

                {
                    "name": "linesEnabled",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Lines enabled",
                    "defaultValue": "true",
                    "designTypeFilterKeys": [ "piedonutsettings" ]
                },
                {
                    "name": "linesAngles",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Lines angles",
                    "defaultValue": "true",
                    "designTypeFilterKeys": [ "piedonutsettings" ]
                },
                {
                    "name": "autoRotate",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Auto rotate",
                    "defaultValue": "false",
                    "designTypeFilterKeys": [ "piedonutsettings", "polarsettings" ]
                },

                {
                    "name": "radius",
                    "dataType": "number",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Radius",
                    "defaultValue": "0",
                    "designTypeFilterKeys": [ "piedonutsettings", "polarsettings" ]
                }

            ]
        },
        {
            "name": "ChartAxisTitle",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "visible",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Visible",
                    "defaultValue": "false",
                    "designTypeFilterKeys": [ "basic", "textsettings" ]
                },
                {
                    "name": "text",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Text",
                    "defaultValue": "",
                    "designTypeFilterKeys": [ "basic", "textsettings" ]
                },
                {
                    "name": "class",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "CSS class",
                    "defaultValue": "",
                    "designTypeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "horizontalAlignment",
                    "ts_dataType": "enum:ChartHorizontalTextAlignment",
                    "optional": "true",
                    "displayName": "Horizontal alignment",
                    "defaultValue": "HorizontalTextAlignment.center",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "verticalAlignment",
                    "ts_dataType": "enum:ChartVerticalTextAlignment",
                    "optional": "true",
                    "displayName": "Vertical alignment",
                    "defaultValue": "VerticalTextAlignment.middle",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "angle",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Rotation angle",
                    "defaultValue": "0",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "rotationPoint",
                    "ts_dataType": "enum:ChartTextRotationPoint",
                    "optional": "true",
                    "displayName": "Rotation point",
                    "defaultValue": "textRotationPoint.middlecenter",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "offset",
                    "ts_dataType": "ChartOffset",
                    "optional": "true",
                    "displayName": "Offset",
                    "designTimeFilterKeys": [ "textsettings" ]
                }
            ]
        },
        {
            "name": "ChartColorBand",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "minValue",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Minimum value",
                    "defaultValue": "0"
                },
                {
                    "name": "maxValue",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Maximum value",
                    "defaultValue": "0"
                },
                {
                    "name": "fillColor",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Fill color",
                    "defaultValue": "#AAAAAA"
                },
                {
                    "name": "opacity",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Opacity",
                    "defaultValue": "1"
                },
                {
                    "name": "lineColor",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Line color",
                    "defaultValue": "#AAAAAA"
                },
                {
                    "name": "lineWidth",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Line width",
                    "defaultValue": "0"
                },
                {
                    "name": "dashStyle",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Dash style",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "ChartXAxis",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "visible",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Visible",
                    "defaultValue": "true",
                    "designTypeFilterKeys": [ "basic" ]
                },
                {
                    "name": "unitInterval",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Unit interval",
                    "defaultValue": "1",
                    "designTimeFilterKeys": [ "basic" ]
                },
                {
                    "name": "dataField",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Data field",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "basic" ]
                },
                {
                    "name": "displayText",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "basic" ]
                },
                {
                    "name": "type",
                    "ts_dataType": "enum:ChartAxisType",
                    "optional": "true",
                    "displayName": "Type",
                    "defaultValue": "default",
                    "designTimeFilterKeys": [ "basic" ]
                },
                {
                    "name": "baseUnit",
                    "ts_dataType": "enum:ChartDateAxisBaseUnit",
                    "optional": "true",
                    "displayName": "Base unit",
                    "defaultValue": "day",
                    "designTimeFilterKeys": [ "basic" ]
                },
                {
                    "name": "valuesOnTicks",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Values on ticks",
                    "defaultValue": "true",
                    "designTimeFilterKeys": [ "basic" ]
                },
                {
                    "name": "dateFormat",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Date/time format",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "basic" ]
                },
                {
                    "name": "axisSize",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Axis size",
                    "defaultValue": "40",
                    "designTimeFilterKeys": [ "layout" ]
                },
                {
                    "name": "customDraw",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Custom draw",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "basic" ]
                },
                {
                    "name": "flip",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Reverse direction",
                    "defaultValue": "false",
                    "designTimeFilterKeys": [ "layout" ]
                },
                {
                    "name": "position",
                    "ts_dataType": "enum:ChartAxisPosition",
                    "optional": "true",
                    "displayName": "Position",
                    "defaultValue": "bottom",
                    "designTimeFilterKeys": [ "layout" ]
                },
                {
                    "name": "padding",
                    "ts_dataType": "ChartPadding",
                    "optional": "true",
                    "displayName": "Padding",
                    "defaultValue": "{left: 0, top: 0, right: 0, bottom: 0}",
                    "designTimeFilterKeys": [ "layout" ]
                },
                {
                    "name": "title",
                    "ts_dataType": "ChartAxisTitle",
                    "optional": "true",
                    "displayName": "Title",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "tickMarks",
                    "ts_dataType": "ChartTickMarks",
                    "optional": "true",
                    "displayName": "Tick marks",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "gridLines",
                    "ts_dataType": "ChartGridLines",
                    "optional": "true",
                    "displayName": "Grid lines",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "line",
                    "ts_dataType": "ChartAxisLine",
                    "optional": "true",
                    "displayName": "Lines",
                    "defaultValue": "{}"
                },
                {
                    "name": "labels",
                    "ts_dataType": "ChartAxisLabels",
                    "optional": "true",
                    "displayName": "Labels",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "logarithmicScale",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Logarithmic scale",
                    "defaultValue": "false",
                    "designTypeFilterKeys": [ "basic" ]
                },
                {
                    "name": "logarithmicScaleBase",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Logarithmic base",
                    "defaultValue": "10"
                },
                {
                    "name": "minValue",
                    "dataType": "number",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Minimum value",
                    "defaultValue": "0"
                },
                {
                    "name": "maxValue",
                    "dataType": "number",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Maximum value",
                    "defaultValue": "0"
                },
                {
                    "name": "bands",
                    "ts_dataType": "Array<ChartColorBand>",
                    "optional": "true",
                    "displayName": "Color bands",
                    "defaultValue": "[]",
                    "designTimeFilterKeys": [ "misc" ]
                },
                {
                    "name": "alternatingBackgroundColor",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Alternating background color",
                    "defaultValue": "#AAAAAA",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "alternatingBackgroundColor2",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Alternating background color 2",
                    "defaultValue": "#AAAAAA",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "alternatingBackgroundOpacity",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Alternating background opacity",
                    "defaultValue": "1",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "formatSettings",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Format settings",
                    "defaultValue": "null"
                },
                {
                    "name": "formatFunction",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Format function",
                    "defaultValue": "null"
                },
                {
                    "name": "toolTipFormatSettings",
                    "ts_dataType": "ChartFormatSettings",
                    "optional": "true",
                    "displayName": "Tooltip format settings",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "tooltips", "textsettings" ]
                },
                {
                    "name": "toolTipFormatFunction",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Tooltip format function",
                    "defaultValue": "null",
                    "designTimeFilterKeys": [ "tooltips", "textsettings" ]
                },
                {
                    "name": "rangeSelector",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Range selector",
                    "defaultValue": "null"
                },
                {
                    "name": "textRotationAngle",
                    "dataType": "number",
                    "ts_dataType": "number",
                    "optional": "true",
                    "displayName": "Text Rotation Angle",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "name": "ChartSerie",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "dataField",
                    "dataType": "string",
                    "displayName": "Data field",
                    "defaultValue": "",
                    "filterKeys": [ "basic" ]
                },
                {
                    "name": "displayText",
                    "dataType": "string",
                    "displayName": "Display text",
                    "defaultValue": "",
                    "filterKeys": [ "basic" ]
                },

                {
                    "name": "dataFieldFrom",
                    "dataType": "string",
                    "displayName": "Data field from",
                    "defaultValue": "",
                    "filterKeys": [ "rangeseriessettings" ]
                },
                {
                    "name": "displayTextFrom",
                    "dataType": "string",
                    "displayName": "Display text from",
                    "defaultValue": "",
                    "filterKeys": [ "rangeseriessettings" ]
                },
                {
                    "name": "dataFieldTo",
                    "dataType": "string",
                    "displayName": "Data field to",
                    "defaultValue": "",
                    "filterKeys": [ "rangeseriessettings" ]
                },
                {
                    "name": "displayTextTo",
                    "dataType": "string",
                    "displayName": "Display text to",
                    "defaultValue": "",
                    "filterKeys": [ "rangeseriessettings" ]
                },

                {
                    "name": "dataFieldOpen",
                    "dataType": "string",
                    "displayName": "Data field open",
                    "defaultValue": "",
                    "filterKeys": [ "ohlcsettings" ]
                },
                {
                    "name": "displayTextOpen",
                    "dataType": "string",
                    "displayName": "Display text open",
                    "defaultValue": "",
                    "filterKeys": [ "ohlcsettings" ]
                },
                {
                    "name": "dataFieldLow",
                    "dataType": "string",
                    "displayName": "Data field low",
                    "defaultValue": "",
                    "filterKeys": [ "ohlcsettings" ]
                },
                {
                    "name": "displayTextLow",
                    "dataType": "string",
                    "displayName": "Display text low",
                    "defaultValue": "",
                    "filterKeys": [ "ohlcsettings" ]
                },
                {
                    "name": "dataFieldHigh",
                    "dataType": "string",
                    "displayName": "Data field high",
                    "defaultValue": "",
                    "filterKeys": [ "ohlcsettings" ]
                },
                {
                    "name": "displayTextHigh",
                    "dataType": "string",
                    "displayName": "Display text high",
                    "defaultValue": "",
                    "filterKeys": [ "ohlcsettings" ]
                },
                {
                    "name": "dataFieldClose",
                    "dataType": "string",
                    "displayName": "Data field close",
                    "defaultValue": "",
                    "filterKeys": [ "ohlcsettings" ]
                },
                {
                    "name": "displayTextClose",
                    "dataType": "string",
                    "displayName": "Display text close",
                    "defaultValue": "",
                    "filterKeys": [ "ohlcsettings" ]
                },


                {
                    "name": "lineWidth",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Line width",
                    "defaultValue": "0"
                },
                {
                    "name": "dashStyle",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Dash style",
                    "defaultValue": ""
                },

                {
                    "name": "symbolType",
                    "ts_dataType": "enum:ChartSeriesSymbolType",
                    "optional": "true",
                    "displayName": "Symbol type",
                    "defaultValue": "circle",
                    "designTimeFilterKeys": [ "linesettings" ]
                },
                {
                    "name": "symbolSize",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Symbol size",
                    "defaultValue": "8"
                },
                {
                    "name": "symbolSizeSelected",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Symbol size selected",
                    "defaultValue": "8"
                },

                {
                    "name": "emptyPointsDisplay",
                    "ts_dataType": "enum:ChartEmptyPointsDisplay",
                    "optional": "true",
                    "displayName": "Empty points display type",
                    "defaultValue": "skip",
                    "designTimeFilterKeys": [ "linesettings" ]
                },
                {
                    "name": "linesUnselectMode",
                    "ts_dataType": "enum:ChartLinesUnselectMode",
                    "optional": "true",
                    "displayName": "lines unselect mode",
                    "defaultValue": "default",
                    "designTimeFilterKeys": [ "linesettings" ]
                },

                {
                    "name": "opacity",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Opacity",
                    "defaultValue": "1",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "useGradientColors",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Use gradient colors",
                    "defaultValue": "true",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "greyScale",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Use grey scale colors",
                    "defaultValue": "false",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },

                {
                    "name": "lineColor",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Line color",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "lineColorSelected",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Line color selected",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "fillColor",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Fill color",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "fillColorSelected",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Fill color selected",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "lineColorSymbol",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Markers line color",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "lineColorSymbolSelected",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Markers line color selected",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "fillColorSymbol",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Markers fill color",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "fillColorSymbolSelected",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Markers fill color selected",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },

                {
                    "name": "fillColorAlt",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Markers alternating fill color",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "fillColorAltSelected",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Markers alternating fill color selected",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "colorFunction",
                    "ts_dataType": "(dataValue: any, itemIndex?: number, serie?: any, group?: any) => any",
                    "optional": "true",
                    "displayName": "Color Function",
                    "defaultValue": ""
                },
                {
                    "name": "labels",
                    "ts_dataType": "ChartSeriesLabels",
                    "optional": "true",
                    "displayName": "Labels",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "textsettings", "piedonutsettings", "polarsettings" ]
                },
                {
                    "name": "formatSettings",
                    "ts_dataType": "ChartFormatSettings",
                    "optional": "true",
                    "displayName": "Format settings",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "formatFunction",
                    "ts_dataType": "(value: any, itemIndex?: number, serieIndex?: number, groupIndex?: number, xAxisValue?: any, xAxis?: ChartXAxis) => string",
                    "optional": "true",
                    "displayName": "Format function",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "formatfunction" ]
                },

                {
                    "name": "legendFormatSettings",
                    "ts_dataType": "ChartFormatSettings",
                    "optional": "true",
                    "displayName": "Legend format settings",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "legend" ]
                },
                {
                    "name": "legendFormatFunction",
                    "ts_dataType": "(value: any, itemIndex?: number, serieIndex?: number, groupIndex?: number, xAxisValue?: any, xAxis?: ChartXAxis) => string",
                    "optional": "true",
                    "displayName": "Legend format function",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "legend" ]
                },
                {
                    "name": "legendLineColor",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Legend line color",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "legend" ]
                },
                {
                    "name": "legnedFillColor",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Legend fill color",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "legend" ]
                },


                {
                    "name": "toolTipFormatSettings",
                    "ts_dataType": "ChartFormatSettings",
                    "optional": "true",
                    "displayName": "Tooltip format settings",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "tooltips" ]
                },
                {
                    "name": "toolTipFormatFunction",
                    "ts_dataType": "(value: any, itemIndex?: number, serieIndex?: number, groupIndex?: number, xAxisValue?: any, xAxis?: ChartXAxis) => string",
                    "optional": "true",
                    "displayName": "Tooltip format function",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "tooltips" ]
                },
                {
                    "name": "toolTipLineColor",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Tooltip line color",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "tooltips" ]
                },
                {
                    "name": "toolTipBackground",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Tooltip background color",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "tooltips" ]
                },
                {
                    "name": "toolTipClass",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Tooltip CSS class",
                    "defaultValue": "",
                    "designTypeFilterKeys": [ "tooltips" ]
                },

                {
                    "name": "radius",
                    "dataType": "number",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Pie/Donut radius",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "piedonutsettings" ]
                },
                {
                    "name": "innerRadius",
                    "dataType": "number",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Pie/Donut inner radius",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "piedonutsettings" ]
                },
                {
                    "name": "startAngle",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Pie/Donut start angle",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "piedonutsettings" ]
                },
                {
                    "name": "endAngle",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Pie/Donut end angle",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "piedonutsettings" ]
                },
                {
                    "name": "offsetX",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Pie/Donut x-offset",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "piedonutsettings" ]
                },
                {
                    "name": "offsetY",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Pie/Donut y-offset",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "piedonutsettings" ]
                },
                {
                    "name": "hiddenPointsDisplay",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Display hidden slices",
                    "defaultValue": "false",
                    "designTimeFilterKeys": [ "piedonutsettings" ]
                },

                {
                    "name": "enableSeriesToggle",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Enable series toggle",
                    "defaultValue": "true",
                    "designTimeFilterKeys": [ "misc" ]
                },
                {
                    "name": "enableSelection",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Enable selection",
                    "defaultValue": "true",
                    "designTimeFilterKeys": [ "misc" ]
                },

                {
                    "name": "radiusDataField",
                    "dataType": "string",
                    "displayName": "Radius data field",
                    "defaultValue": "",
                    "filterKeys": [ "scattersettings" ]
                },
                {
                    "name": "minRadius",
                    "dataType": "number",
                    "ts_dataType": "any",
                    "displayName": "Minimum radius",
                    "defaultValue": "0",
                    "filterKeys": [ "scattersettings" ]
                },
                {
                    "name": "maxRadius",
                    "dataType": "number",
                    "ts_dataType": "any",
                    "displayName": "Maximum radius",
                    "defaultValue": "",
                    "filterKeys": [ "scattersettings" ]
                },

                {
                    "name": "summary",
                    "dataType": "string",
                    "displayName": "Summary data field",
                    "defaultValue": "",
                    "filterKeys": [ "waterfallsettings" ]
                },
                {
                    "name": "labelRadius",
                    "dataType": "number",
                    "ts_dataType": "any",
                    "displayName": "LabelRadius",
                    "defaultValue": "",
                    "filterKeys": [ "waterfallsettings" ]
                },
                {
                    "name": "initialAngle",
                    "dataType": "number",
                    "displayName": "InitialAngle",
                    "defaultValue": "",
                    "filterKeys": [ "waterfallsettings" ]
                },
                {
                    "name": "centerOffset",
                    "dataType": "number",
                    "displayName": "CenterOffset",
                    "defaultValue": "",
                    "filterKeys": [ "waterfallsettings" ]
                }
            ]
        },
        {
            "name": "ChartValueAxis",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "visible",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Visible",
                    "defaultValue": "true",
                    "designTypeFilterKeys": [ "basic" ]
                },
                {
                    "name": "flip",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Reverse direction",
                    "defaultValue": "false",
                    "designTimeFilterKeys": [ "layout" ]
                },
                {
                    "name": "position",
                    "ts_dataType": "enum:ChartAxisPosition",
                    "optional": "true",
                    "displayName": "Position",
                    "defaultValue": "bottom",
                    "designTimeFilterKeys": [ "layout" ]
                },
                {
                    "name": "axisSize",
                    "dataType": "number | string",
                    "optional": "true",
                    "displayName": "Axis size",
                    "defaultValue": "40",
                    "designTimeFilterKeys": [ "layout" ]
                },

                {
                    "name": "minValue",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Minimum value",
                    "defaultValue": ""
                },
                {
                    "name": "maxValue",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Maximum value",
                    "defaultValue": ""
                },
                {
                    "name": "baselineValue",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Baseline value",
                    "defaultValue": "0"
                },
                {
                    "name": "logarithmicScale",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Logarithmic scale",
                    "defaultValue": "false",
                    "designTypeFilterKeys": [ "basic" ]
                },
                {
                    "name": "logarithmicScaleBase",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Logarithmic base",
                    "defaultValue": "10"
                },

                {
                    "name": "valuesOnTicks",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Values on ticks",
                    "defaultValue": "true",
                    "designTimeFilterKeys": [ "basic" ]
                },
                {
                    "name": "unitInterval",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Unit interval",
                    "defaultValue": "1",
                    "designTimeFilterKeys": [ "basic" ]
                },

                {
                    "name": "title",
                    "ts_dataType": "ChartAxisTitle",
                    "optional": "true",
                    "displayName": "Title",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "labels",
                    "ts_dataType": "ChartAxisLabels",
                    "optional": "true",
                    "displayName": "Labels",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "textsettings" ]
                },
                {
                    "name": "gridLines",
                    "ts_dataType": "ChartGridLines",
                    "optional": "true",
                    "displayName": "Grid lines",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "gridlines" ]
                },
                {
                    "name": "tickMarks",
                    "ts_dataType": "ChartTickMarks",
                    "optional": "true",
                    "displayName": "Tick marks",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "gridlines" ]
                },

                {
                    "name": "padding",
                    "ts_dataType": "ChartPadding",
                    "optional": "true",
                    "displayName": "Padding",
                    "defaultValue": "{left: 0, top: 0, right: 0, bottom: 0}",
                    "designTimeFilterKeys": [ "layout" ]
                },

                {
                    "name": "bands",
                    "ts_dataType": "Array<ChartColorBand>",
                    "optional": "true",
                    "displayName": "Color bands",
                    "defaultValue": "[]",
                    "designTimeFilterKeys": [ "misc" ]
                },

                {
                    "name": "alternatingBackgroundColor",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Alternating background color",
                    "defaultValue": "#AAAAAA",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "alternatingBackgroundColor2",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Alternating background color 2",
                    "defaultValue": "#AAAAAA",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },
                {
                    "name": "alternatingBackgroundOpacity",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Alternating background opacity",
                    "defaultValue": "1",
                    "designTimeFilterKeys": [ "colorsettings" ]
                },

                {
                    "name": "toolTipFormatSettings",
                    "ts_dataType": "ChartFormatSettings",
                    "optional": "true",
                    "displayName": "Tooltip format settings",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "tooltips", "textsettings" ]
                },
                {
                    "name": "formatFunction",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Format function",
                    "defaultValue": "null"
                }
            ]
        },
        {
            "name": "ChartSeriesGroup",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "type",
                    "ts_dataType": "enum:ChartSerieTypes",
                    "optional": "false",
                    "displayName": "Type",
                    "defaultValue": "line",
                    "designTypeFilterKeys": [ "basic" ]
                },
                {
                    "name": "orientation",
                    "ts_dataType": "enum:ChartSerieGroupOrientations",
                    "optional": "true",
                    "displayName": "Orientation",
                    "defaultValue": "vertical",
                    "designTypeFilterKeys": [ "layout" ]
                },

                {
                    "name": "valueAxis",
                    "ts_dataType": "ChartValueAxis",
                    "optional": "true",
                    "displayName": "Value axis override",
                    "defaultValue": "{}",
                    "designTypeFilterKeys": [ "misc" ]
                },
                {
                    "name": "series",
                    "ts_dataType": "Array<ChartSerie>",
                    "optional": "false",
                    "displayName": "Series",
                    "defaultValue": "[]",
                    "designTypeFilterKeys": [ "basic" ]
                },
                {
                    "name": "formatSettings",
                    "ts_dataType": "ChartFormatSettings",
                    "optional": "true",
                    "displayName": "Format settings",
                    "defaultValue": "{}",
                    "designTimeFilterKeys": [ "legend" ]
                },
                {
                    "name": "toolTipFormatFunction",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Tooltip format function",
                    "defaultValue": "null",
                    "designTimeFilterKeys": [ "tooltips", "textsettings" ]
                },
                {
                    "name": "columnsGapPercent",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Columns gap percent",
                    "defaultValue": "25",
                    "designTimeFilterKeys": [ "columnssettings" ]
                },
                {
                    "name": "seriesGapPercent",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Series gap percent",
                    "defaultValue": "10",
                    "designTimeFilterKeys": [ "columnssettings" ]
                },
                {
                    "name": "columnsMinWidth",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Columns minimum width",
                    "defaultValue": "2",
                    "designTimeFilterKeys": [ "columnssettings" ]
                },
                {
                    "name": "columnsMaxWidth",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Columns maximum width",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "columnssettings" ]
                },
                {
                    "name": "columnsTopWidthPercent",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Columns top width percent",
                    "defaultValue": "100",
                    "designTimeFilterKeys": [ "columnssettings" ]
                },
                {
                    "name": "columnsBottomWidthPercent",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Columns bottom width percent",
                    "defaultValue": "100",
                    "designTimeFilterKeys": [ "columnssettings" ]
                },
                {
                    "name": "skipOverlappingPoints",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Skip overlapping points",
                    "defaultValue": "false",
                    "designTimeFilterKeys": [ "columnssettings" ]
                },

                {
                    "name": "polar",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Polar chart display",
                    "defaultValue": "false",
                    "designTimeFilterKeys": [ "polarsettings" ]
                },
                {
                    "name": "spider",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Spider chart display",
                    "defaultValue": "false",
                    "designTimeFilterKeys": [ "polarsettings" ]
                },
                {
                    "name": "radius",
                    "dataType": "number",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Polar chart radius",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "polarsettings" ]
                },
                {
                    "name": "startAngle",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Polar start angle",
                    "defaultValue": "0",
                    "designTimeFilterKeys": [ "polarsettings" ]
                },
                {
                    "name": "endAngle",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Polar end angle",
                    "defaultValue": "360",
                    "designTimeFilterKeys": [ "polarsettings" ]
                },
                {
                    "name": "offsetX",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Polar chart x-offset",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "polarsettings" ]
                },
                {
                    "name": "offsetY",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Polar chart y-offset",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "polarsettings" ]
                },
                {
                    "name": "source",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Source",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "polarsettings" ]
                },
                {
                    "name": "xAxis",
                    "dataType": "object",
                    "ts_dataType": "ChartXAxis",
                    "optional": "true",
                    "displayName": "xAxis",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "polarsettings" ]
                },
                {
                    "name": "colorScheme",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "colorScheme",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "polarsettings" ]
                },
                {
                    "name": "showLabels",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "showLabels",
                    "defaultValue": ""
                },
                {
                    "name": "alignEndPointsWithIntervals",
                    "dataType": "boolean",
                    "ts_dataType": "boolean",
                    "optional": "true",
                    "displayName": "alignEndPointsWithIntervals",
                    "defaultValue": "false"
                },
                {
                    "name": "annotations",
                    "dataType": "any",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Annotations",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "ChartLegendLayout",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "left",
                    "dataType": "number",
                    "optional": "false",
                    "displayName": "Offset left",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "legend" ]
                },
                {
                    "name": "top",
                    "dataType": "number",
                    "optional": "false",
                    "displayName": "Offset top",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "legend" ]
                },
                {
                    "name": "width",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "false",
                    "displayName": "Width",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "legend" ]
                },
                {
                    "name": "height",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "false",
                    "displayName": "Height",
                    "defaultValue": "",
                    "designTimeFilterKeys": [ "legend" ]
                },
                {
                    "name": "flow",
                    "ts_dataType": "enum:ChartLegendFlow",
                    "optional": "false",
                    "displayName": "Flow",
                    "defaultValue": "",
                    "designTypeFilterKeys": [ "legend" ]
                }
            ]
        }
    ],
    "exampleInit": {
        "title": "Fitness & Exercise Weekly Scorecard",
        "description": "Time Spent in Vigorous Exercise",
        "enableAnimations": true,
        "source": "source",
        "xAxis": "xAxis",
        "seriesGroups": "seriesGroups",
        "colorScheme": "scheme02"
    },
    "exampleElementsInit": {
        "title": "Top 5 most populated countries",
        "description": "Statistics for 2017",
        "showLegend": true,
        "enableAnimations": true,
        "padding": "padding",
        "titlePadding": "titlePadding",
        "source": "source",
        "xAxis": "xAxis",
        "valueAxis": "valueAxis",
        "colorScheme": "scheme01",
        "seriesGroups": "seriesGroups"
    },
    "exampledInitExtraData": {
        "properties": "source: [\n          { Day: 'Monday', Keith: 0, Erica: 20, George: 10 },\n          { Day: 'Tuesday', Keith: 20, Erica: 30, George: 40 }\n        ],\n        xAxis: { dataField: 'Day' },\n        seriesGroups: [{\n          type: 'column',\n          columnsGapPercent: 50,\n          seriesGapPercent: 0,\n          valueAxis: { minValue: 0, description: 'Time in minutes' },\n          series: [\n            { dataField: 'Keith', displayText: 'Keith' },\n            { dataField: 'Erica', displayText: 'Erica' },\n            { dataField: 'George', displayText: 'George' }\n          ]\n        }]",
        "beforeCreate": "",
        "mounted": "",
        "methods": ""
    },
    "properties": [
        {
            "name": "title",
            "dataType": "string",
            "optional": "true",
            "displayName": "Title",
            "defaultValue": "Chart title",
            "description": "<P>Sets or gets the jqxChart title.</P>",
            "designTimeFilterKeys": [ "basic", "textsettings" ],
            "exampleInit": { "title": "My Title" },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "description",
            "dataType": "string",
            "optional": "true",
            "displayName": "Sub title / description",
            "defaultValue": "Description",
            "description": "<P>Sets or gets the jqxChart description.</P>",
            "designTimeFilterKeys": [ "basic", "textsettings" ],
            "exampleInit": { "description": "My Description" },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "source",
            "ts_dataType": "any",
            "dataType": "array | object",
            "optional": "true",
            "displayName": "Data source",
            "defaultValue": "[]",
            "description": "<P>Sets the chart's data source.</P>",
            "designTimeFilterKeys": [ "basic" ],
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "showBorderLine",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "Show border line",
            "defaultValue": "true",
            "description": "<P>Determines whether to display the chart's border line.</P>",
            "designTimeFilterKeys": [ "linesettings" ],
            "exampleInit": { "showBorderLine": "false" },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "borderLineColor",
            "dataType": "string",
            "optional": "true",
            "displayName": "Border line color",
            "defaultValue": "#888888",
            "description": "<P>Sets or gets the chart's border line color.</P>",
            "designTimeFilterKeys": [ "linesettings", "colorsettings" ],
            "exampleInit": { "borderLineColor": "'#111888'" },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "borderLineWidth",
            "dataType": "number",
            "optional": "true",
            "displayName": "Border line width",
            "defaultValue": "1",
            "description": "<P>Sets or gets the chart's border line width.</P>",
            "designTimeFilterKeys": [ "linesettings" ],
            "exampleInit": { "borderLineWidth": "3" },
            "customExample": {
                "codeType": "get"
            }
        },

        {
            "name": "backgroundColor",
            "dataType": "string",
            "optional": "true",
            "displayName": "Background color",
            "defaultValue": "#FFFFFF",
            "designTimeFilterKeys": [ "colorsettings" ],
            "exampleInit": { "backgroundColor": "#FFFFFF" },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "backgroundImage",
            "dataType": "string",
            "optional": "true",
            "displayName": "Background image URL",
            "defaultValue": "''",
            "designTimeFilterKeys": [ "colorsettings" ],
            "exampleInit": { "backgroundImage": "'http://www.jqwidgets.com/jquery-widgets-demo/images/chart_background.jpg'" },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "showLegend",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "Show legend",
            "defaultValue": "true",
            "description": "Determines whether to show or hide the chart series legend.",
            "designTimeFilterKeys": [ "legend" ],
            "exampleInit": { "showLegend": "true" }
        },
        {
            "name": "legendLayout",
            "dataType": "object",
            "ts_dataType": "ChartLegendLayout",
            "optional": "true",
            "displayName": "Legend layout",
            "defaultValue": "{}",
            "description": "<P>Sets the legend's layout. The expected object is with the following fields:</P>\n\r\n<UL><LI>\"left\" - legend's X position.</LI><LI>\"top\" - legend's Y position.</LI><LI>\"width\" - legend's width.</LI><LI>\"height\" - legend's height.</LI><LI>\"flow\" - 'horizontal' or 'vertical'.</LI></UL>",
            "designTimeFilterKeys": [ "legend" ],
            "exampleInit": {
                "legendLayout": "legendLayout",
                "exampleData": "{ left: 500, top: 140, width: 300, height: 200, flow: 'vertical' }"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "padding",
            "dataType": "object",
            "ts_dataType": "ChartPadding",
            "optional": "true",
            "displayName": "Padding",
            "defaultValue": "{left: 5, top: 5, right: 5, bottom: 5}",
            "designTimeFilterKeys": [ "layout" ],
            "exampleInit": {
                "padding": "{ left: 10, top: 10, right: 10, bottom: 10 }"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "titlePadding",
            "dataType": "object",
            "ts_dataType": "ChartPadding",
            "optional": "true",
            "displayName": "Title padding",
            "defaultValue": "{left: 2, top: 2, right: 2, bottom: 2}",
            "designTimeFilterKeys": [ "layout" ],
            "exampleInit": {
                "titlePadding": "{ left: 10, top: 10, right: 10, bottom: 10 }"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "colorScheme",
            "dataType": "string",
            "optional": "true",
            "displayName": "Color scheme",
            "defaultValue": "scheme01",
            "designTimeFilterKeys": [ "colorsettings" ],
            "exampleInit": { "colorScheme": "scheme03" },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "greyScale",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "Use grey scale colors",
            "defaultValue": "false",
            "designTimeFilterKeys": [ "colorsettings" ],
            "exampleInit": { "greyScale": "true" },
            "customExample": {
                "codeType": "get"
            }
        },

        {
            "name": "showToolTips",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "Show tooltips",
            "defaultValue": "true",
            "designTimeFilterKeys": [ "tooltips" ],
            "exampleInit": { "showToolTips": "false" },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "toolTipShowDelay",
            "dataType": "number",
            "optional": "true",
            "displayName": "Tooltip show delay [ms]",
            "defaultValue": "500",
            "designTimeFilterKeys": [ "tooltips" ],
            "exampleInit": { "toolTipShowDelay": "300" },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "toolTipHideDelay",
            "dataType": "number",
            "optional": "true",
            "displayName": "Tooltip hide delay [ms]",
            "defaultValue": "4000",
            "designTimeFilterKeys": [ "tooltips" ],
            "exampleInit": { "toolTipHideDelay": "300" },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "toolTipMoveDuration",
            "dataType": "number",
            "optional": "true",
            "displayName": "Tooltip move duration [ms]",
            "defaultValue": "300",
            "designTimeFilterKeys": [ "tooltips" ],
            "exampleInit": { "toolTipMoveDuration": "200" },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "drawBefore",
            "dataType": "Function",
            "ts_dataType": "(renderer?: ChartDrawBefore['renderer'], rect?: ChartDrawBefore['rect']) => void",
            "optional": "true",
            "displayName": "drawBefore",
            "defaultValue": "null",
            "description": "function for custom drawing before the title and other chart elements",
            "exampleInit": {
                "drawBefore": "drawBefore",
                "exampleData": "renderer.rect(rect.x, rect.y, rect.width, rect.height, { fill: 'lightblue' });"
            }
        },
        {
            "name": "draw",
            "dataType": "Function",
            "ts_dataType": "(renderer?: ChartDraw['renderer'], rect?: ChartDraw['rect']) => void",
            "optional": "true",
            "displayName": "Draw",
            "defaultValue": "null",
            "description": "Determines the drawing function of jqxChart. When the property is set, you can override the jqxChart's drawing.",
            "exampleInit": {
                "draw": "draw",
                "exampleData": "// do something"
            }
        },
        {
            "name": "rtl",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "Right to left",
            "defaultValue": "false",
            "description": "Sets or gets a value indicating whether the Chart's layout is mirrored.",
            "designTimeFilterKeys": [ "layout" ],
            "exampleInit": { "rtl": "true" },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "enableCrosshairs",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "Enable crosshairs cursor",
            "defaultValue": "false",
            "description": "Enables or disables the crosshairs lines. The lines are displayed in line and area series when you move over a data point.",
            "designTimeFilterKeys": [ "tooltips" ],
            "exampleInit": {
                "enableCrosshairs": "false"
            },
            "customExample": {
                "codeType": "get",
                "code": "&lt;template>\n  &lt;JqxChart ref=\"myChart\" style=\"width: 850px; height: 500px;\"\n    :title=\"'Fitness & Exercise Weekly Scorecard'\" :description=\"'Time Spent in Vigorous Exercise'\"\n    :enableAnimations=\"true\" :source=\"source\" :xAxis=\"xAxis\" :seriesGroups=\"seriesGroups\"\n    :colorScheme=\"'scheme02'\" :enableCrosshairs=\"true\" :crosshairsDashStyle=\"'2,2'\"\n  />\n&lt;/template>\n \n&lt;script>\nimport JqxChart from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxchart.vue\";\n\nexport default {\n  components: {\n    JqxChart\n  },\n  data: function() {\n    return {\n      source: [\n        { Day: \"Monday\", Keith: 5, Erica: 25, George: 15 },\n        { Day: \"Tuesday\", Keith: 25, Erica: 35, George: 45 },\n        { Day: \"Wednesday\", Keith: 32, Erica: 25, George: 25 },\n        { Day: \"Thursday\", Keith: 35, Erica: 25, George: 45 }\n      ],\n      xAxis: { dataField: \"Day\", showGridLines: false },\n      seriesGroups: [\n        {\n          type: \"line\",\n          columnsGapPercent: 50,\n          seriesGapPercent: 0,\n          valueAxis: { minValue: 0, description: \"Time in minutes\" },\n          series: [\n            { dataField: \"Keith\", displayText: \"Keith\" },\n            { dataField: \"Erica\", displayText: \"Erica\" },\n            { dataField: \"George\", displayText: \"George\" }\n          ]\n        }\n      ]\n    };\n  }\n};\n&lt;/script>"
            }
        },
        {
            "name": "crosshairsColor",
            "dataType": "string",
            "optional": "true",
            "displayName": "Crosshairs color",
            "description": "Gets or sets the color of the crosshairs lines.",
            "defaultValue": "#888888",
            "designTimeFilterKeys": [ "tooltips" ],
            "exampleInit": {
                "crosshairsColor": "'#111888'"
            },
            "customExample": {
                "codeType": "get",
                "code": "&lt;template>\n  &lt;JqxChart ref=\"myChart\" style=\"width: 850px; height: 500px;\"\n    :title=\"'Fitness & Exercise Weekly Scorecard'\" :description=\"'Time Spent in Vigorous Exercise'\"\n    :enableAnimations=\"true\" :source=\"source\" :xAxis=\"xAxis\" :seriesGroups=\"seriesGroups\"\n    :colorScheme=\"'scheme02'\" :crosshairsColor=\"'#ff1888'\" :enableCrosshairs=\"true\"\n  />\n&lt;/template>\n \n&lt;script>\nimport JqxChart from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxchart.vue\";\n\nexport default {\n  components: {\n    JqxChart\n  },\n  data: function() {\n    return {\n      source: [\n        { Day: \"Monday\", Keith: 5, Erica: 25, George: 15 },\n        { Day: \"Tuesday\", Keith: 25, Erica: 35, George: 45 },\n        { Day: \"Wednesday\", Keith: 32, Erica: 25, George: 25 },\n        { Day: \"Thursday\", Keith: 35, Erica: 25, George: 45 }\n      ],\n      xAxis: { dataField: \"Day\", showGridLines: false },\n      seriesGroups: [\n        {\n          type: \"line\",\n          columnsGapPercent: 50,\n          seriesGapPercent: 0,\n          valueAxis: { minValue: 0, description: \"Time in minutes\", showGridLines: false },\n          series: [\n            { dataField: \"Keith\", displayText: \"Keith\" },\n            { dataField: \"Erica\", displayText: \"Erica\" },\n            { dataField: \"George\", displayText: \"George\" }\n          ]\n        }\n      ]\n    };\n  }\n};\n&lt;/script>"
            }
        },
        {
            "name": "crosshairsDashStyle",
            "dataType": "string",
            "optional": "true",
            "displayName": "Crosshairs dash style",
            "defaultValue": "2,2",
            "description": "Gets or sets the dash style of the crosshairs lines. The style is a series of numbers indicating line length followed by space length.",
            "designTimeFilterKeys": [ "tooltips" ],
            "exampleInit": { "crosshairsDashStyle": "'1,1'" },
            "customExample": {
                "codeType": "get",
                "code": "&lt;template>\n  &lt;JqxChart ref=\"myChart\" style=\"width: 850px; height: 500px;\"\n    :title=\"'Fitness & Exercise Weekly Scorecard'\" :description=\"'Time Spent in Vigorous Exercise'\"\n    :enableAnimations=\"true\" :source=\"source\" :xAxis=\"xAxis\" :seriesGroups=\"seriesGroups\"\n    :colorScheme=\"'scheme02'\" :enableCrosshairs=\"true\" :crosshairsDashStyle=\"'1,1'\"\n  />\n&lt;/template>\n \n&lt;script>\nimport JqxChart from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxchart.vue\";\n\nexport default {\n  components: {\n    JqxChart\n  },\n  data: function() {\n    return {\n      source: [\n        { Day: \"Monday\", Keith: 5, Erica: 25, George: 15 },\n        { Day: \"Tuesday\", Keith: 25, Erica: 35, George: 45 },\n        { Day: \"Wednesday\", Keith: 32, Erica: 25, George: 25 },\n        { Day: \"Thursday\", Keith: 35, Erica: 25, George: 45 }\n      ],\n      xAxis: { dataField: \"Day\", showGridLines: false },\n      seriesGroups: [\n        {\n          type: \"line\",\n          columnsGapPercent: 50,\n          seriesGapPercent: 0,\n          valueAxis: { minValue: 0, description: \"Time in minutes\", showGridLines: false },\n          series: [\n            { dataField: \"Keith\", displayText: \"Keith\" },\n            { dataField: \"Erica\", displayText: \"Erica\" },\n            { dataField: \"George\", displayText: \"George\" }\n          ]\n        }\n      ]\n    };\n  }\n};\n&lt;/script>"
            }
        },
        {
            "name": "crosshairsLineWidth",
            "dataType": "number",
            "optional": "true",
            "displayName": "Crosshairs line width",
            "defaultValue": "1",
            "description": "Gets or sets the width of the crosshairs lines.",
            "designTimeFilterKeys": [ "tooltips" ],
            "exampleInit": {
                "crosshairsDashStyle": "'6,2'",
                "crosshairsLineWidth": "2"
            },
            "customExample": {
                "codeType": "get",
                "code": "&lt;template>\n  &lt;JqxChart ref=\"myChart\" style=\"width: 850px; height: 500px;\"\n    :title=\"'Fitness & Exercise Weekly Scorecard'\" :description=\"'Time Spent in Vigorous Exercise'\"\n    :enableAnimations=\"true\" :source=\"source\" :xAxis=\"xAxis\" :seriesGroups=\"seriesGroups\"\n    :colorScheme=\"'scheme02'\" :enableCrosshairs=\"true\" :crosshairsDashStyle=\"'6,2'\" :crosshairsLineWidth=\"2\"\n  />\n&lt;/template>\n \n&lt;script>\nimport JqxChart from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxchart.vue\";\n\nexport default {\n  components: {\n    JqxChart\n  },\n  data: function() {\n    return {\n      source: [\n        { Day: \"Monday\", Keith: 5, Erica: 25, George: 15 },\n        { Day: \"Tuesday\", Keith: 25, Erica: 35, George: 45 },\n        { Day: \"Wednesday\", Keith: 32, Erica: 25, George: 25 },\n        { Day: \"Thursday\", Keith: 35, Erica: 25, George: 45 }\n      ],\n      xAxis: { dataField: \"Day\", showGridLines: false },\n      seriesGroups: [\n        {\n          type: \"line\",\n          columnsGapPercent: 50,\n          seriesGapPercent: 0,\n          valueAxis: { minValue: 0, description: \"Time in minutes\", showGridLines: false },\n          series: [\n            { dataField: \"Keith\", displayText: \"Keith\" },\n            { dataField: \"Erica\", displayText: \"Erica\" },\n            { dataField: \"George\", displayText: \"George\" }\n          ]\n        }\n      ]\n    };\n  }\n};\n&lt;/script>"
            }
        },
        {
            "name": "columnSeriesOverlap",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "Column series overlap",
            "defaultValue": "false",
            "designTimeFilterKeys": [ "columnssettings" ],
            "exampleInit": { "columnSeriesOverlap": "true" },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxChart ref=\"myChart\" style=\"width: 850px; height: 500px;\"\n    :title=\"'Columns spacing and padding'\"\n    :description=\"'Example with two series groups and three series in each group'\"\n    :showLegend=\"true\" :enableAnimations=\"false\"\n    :source=\"sampleData\" :xAxis=\"xAxis\" :valueAxis=\"valueAxis\"\n    :columnSeriesOverlap=\"true\" \n    :seriesGroups=\"seriesGroups\" :colorScheme=\"'scheme04'\"\n  />\n&lt;/template>\n \n&lt;script>\n  import JqxChart from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxchart.vue';\n \n  export default {\n    components: {\n      JqxChart\n    },\n    data: function () {\n      return  {\n        sampleData: [\n            { Position: 0, Serie1: 30, Serie2: 5, Serie3: 25, Serie4: 30, Serie5: 10, Serie6: 5 },\n            { Position: 1, Serie1: 25, Serie2: 25, Serie3: 5, Serie4: 20, Serie5: 20, Serie6: 10 },\n            { Position: 3, Serie1: 30, Serie2: 5, Serie3: 25, Serie4: 10, Serie5: 20, Serie6: 15 },\n            { Position: 6, Serie1: 35, Serie2: 25, Serie3: 45, Serie4: 5, Serie5: 30, Serie6: 20 },\n            { Position: 7, Serie1: 5, Serie2: 20, Serie3: 25, Serie4: 20, Serie5: 40, Serie6: 15 },\n            { Position: 9, Serie1: 30, Serie2: 10, Serie3: 30, Serie4: 10, Serie5: 5, Serie6: 20 },\n            { Position: 10, Serie1: 60, Serie2: 45, Serie3: 10, Serie4: 20, Serie5: 10, Serie6: 15 }\n        ],\n        xAxis: { \n            dataField: 'Position'\n        },\n        valueAxis: {\n            unitInterval: 10,\n            title: { text: 'Value' }\n        },\n        seriesGroups: [\n                {\n                    type: 'column',\n                    series: [\n                        { dataField: 'Serie1', displayText: 'Serie1' },\n                        { dataField: 'Serie2', displayText: 'Serie2' },\n                        { dataField: 'Serie3', displayText: 'Serie3' }\n                    ]\n                },\n                {\n                    type: 'column',\n                    greyScale: true,\n                    series: [\n                        { dataField: 'Serie4', displayText: 'Serie4' },\n                        { dataField: 'Serie5', displayText: 'Serie5' },\n                        { dataField: 'Serie6', displayText: 'Serie6' }\n                    ]\n                }\n            ]\n        }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "enabled",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "Enabled",
            "defaultValue": "true",
            "description": "Gets or sets whether the chart widget in enabled or disabled state.",
            "designTimeFilterKeys": [ "misc" ],
            "exampleInit": { "enabled": "false" },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "enableAnimations",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "Enable animations",
            "defaultValue": "true",
            "description": "Determines if the animations are enabled. When you set this property it will turn on or off the animations for all series in all seriesGroups in the chart. You can override this property for individual seriesGroups and series.",
            "designTimeFilterKeys": [ "misc" ],
            "exampleInit": { "enableAnimations": "false" },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "animationDuration",
            "dataType": "number",
            "optional": "true",
            "displayName": "Animations duration [ms]",
            "defaultValue": "500",
            "description": "Determines the animations duration in milliseconds. The value must be between 0 and 5000. If it is outside of this range jqxChart will reset it to the default value of 1000.",
            "designTimeFilterKeys": [ "misc" ],
            "exampleInit": { "animationDuration": "1500" }
        },
        {
            "name": "enableAxisTextAnimation",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "Enable axis text animations",
            "defaultValue": "false",
            "description": "Determines if the animation of the axes text is enabled.",
            "designTimeFilterKeys": [ "misc" ],
            "exampleInit": {
                "enableAnimations": "true",
                "animationDuration": "1000",
                "enableAxisTextAnimation": "true"
            }
        },
        {
            "name": "renderEngine",
            "ts_dataType": "enum:ChartRenderEngine",
            "dataType": "string",
            "optional": "true",
            "displayName": "Render engine",
            "defaultValue": "auto",
            "description": "Determines the rendering engine used to display the chart. Possible values are 'SVG', 'VML' and 'HTML5'. When the property is not set jqxChart will automatically select an optimal rendering engine depending on the browser capabilities.",
            "designTimeFilterKeys": [ "misc" ],
            "exampleInit": { "renderEngine": "HTML5" }
        },
        {
            "name": "xAxis",
            "ts_dataType": "ChartXAxis",
            "dataType": "object",
            "optional": "true",
            "displayName": "X axis",
            "defaultValue": "null",
            "description": "<div>\n\t<p>\n\t\tSets the Chart's xAxis.\n\t</p>\n\tExample:\n<pre><code>\nxAxis:\n{\n\tdataField: 'Date',\n\tformatFunction: function (value) {\n\t\tvar months =\n\t\t['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\t\treturn months[value.getMonth()];\n\t},\n\ttype: 'date',\n\tbaseUnit: 'month',\n\tflip: false,\n\ttickMarks: {\n\t\tvisible: true,\n\t\tstep: 1,\n\t\tcolor: '#888888'\n\t},\n\tunitInterval: 1,\n\tgridLines: { \n\t\tvisible: true,\n\t\tstep: 3,\n\t\tcolor: '#888888'\n\t}\n}                        \n</code></pre>\n\t<ul>\n\t\t<li>visible - shows or hides the\nxAxis axis.</li>\n\t\t<li>unitInterval - sets the interval between the units.</li>\n\t\t<li>dataField - points to a\ndata field in the data source.</li>\n\t\t<li>type - the type of the axis. Values can be:\n\t\t\t<ul>\n\t\t\t\n<li>'default' - auto detects and switches to 'basic', 'linear' or 'date'</li>\n\t\t\t\t<li>'date'- when displaying dates</li>\n\t\t\t\t<li>'basic' - displays all data points sequencially</li>\n\t\t\t\t<li>'linear' - linear arrangement by\nthe value of the xAxis data field</li>\n\t\t\t</ul>\n\t\t</li>\n\t\t<li>baseUnit - the base unit when used with 'date'\naxis. Values can be 'year', 'month', 'day', 'hour', 'minute', 'second' or 'millisecond'.</li>\n\t\t<li>valuesOnTicks -\nspecifies whether the axis values will be aligned with the tick marks.</li>\n\t\t<li>dateFormat - optional date format for\nparsing the data from the data source. Applicable when type is set to 'date'.</li>\n\t\t<li>axisSize - sets the size of\nthe xAxis.</li>\n\t\t<li>customDraw - boolean determining whether to draw the axis or the user will use APIs to draw it.\nThe default is false.</li>\n\t\t<li>flip - specifies whether the axis is displayed in reverse order.</li>\n\t\t<li>position - sets the axis position. Possible values: \"top\" and \"bottom\".</li>\n\t\t<li>padding - object describing the padding\nof the axis\n\t\t\t<ul>\n\t\t\t\t<li>top - top padding.</li>\n\t\t\t\t<li>bottom - bottom padding.</li>\n\t\t\t</ul>\n\t\t</li>\n\t\t<li>title - object describing the title of the axis\n\t\t\t<ul>\n\t\t\t\t<li>visible - boolean determining the visibility of the title.</li>\n\t\t\t\t<li>text - text of the title.</li>\n\t\t\t\t<li>class - CSS class of the title text.</li>\n\t\t\t\t<li>horizontalAlignment - horizontal alignment.</li>\n\t\t\t\t<li>verticalAlignment - horizontal alignment.</li>\n\t\t\t</ul>\n\t\t</li>\n\t\t<li>tickMarks -\nobject describing the tick marks properties of the axis\n\t\t\t<ul>\n\t\t\t\t<li>visible - true/false/'custom'\ndetermining the visibility. When 'custom' is set, displays only custom values/offsets.</li>\n\t\t\t\t<li>step - interval steps between tick marks placements.</li>\n\t\t\t\t<li>dashStyle - tick marks dash\nstyle, e.g. '2,2', </li>\n\t\t\t\t<li>lineWidth - line width in pixels of the tick marks.</li>\n\t\t\t\t<li>size - size in pixels of the tick marks. The default is 4.</li>\n\t\t\t\t<li>color - color of the tick marks, e.g.\n'#757575'.</li>\n\t\t\t\t<li>custom - an array of custom values/offsets where a label/tickmark/gridline will be\ndisplayed.</li>\n\t\t\t</ul>\n\t\t</li>\n\t\t<li>gridLines - object describing the grid lines properties of the axis\n\t\t\t<ul>\n\t\t\t\t<li>visible - true/false/'custom' determining the visibility. When 'custom' is set,\ndisplays only custom values/offsets.</li>\n\t\t\t\t<li>step - interval steps between grid lines placements.</li>\n\t\t\t\t<li>dashStyle - grid lines dash style, e.g. '2,2', </li>\n\t\t\t\t<li>lineWidth - line width in pixels of\nthe grid lines.</li>\n\t\t\t\t<li>color - color of the tick marks, e.g. '#757575'.</li>\n\t\t\t\t<li>custom - an\narray of custom values/offsets where a label/tickmark/gridline will be displayed.</li>\n\n\t\t\t</ul>\n\t\t</li>\n\t\n<li>line - object describing the line properties of the axis\n\t\t\t<ul>\n\t\t\t\t<li>visible - boolean determining the\nvisibility of the axis line.</li>\n\t\t\t\t<li>dashStyle - line dash style, e.g. '2,2'. The default is inherited from\nthe grid lines. </li>\n\t\t\t\t<li>lineWidth - line width. The default is inherited from the grid lines.</li>\n\t\t\t\t<li>color - color of axis line, e.g. '#757575'.</li>\n\t\t\t</ul>\n\t\t</li>\n\t\t<li>labels - object\ndescribing the labels properties of the axis\n\t\t\t<ul>\n\t\t\t\t<li>visible - true/false/'custom' determining\nthe visibility of the axis labels. When 'custom' is set, displays only custom values/offsets.</li>\n\t\t\t\n<li>step - interval steps between label placements.</li>\n\t\t\t\t<li>class - CSS class of the labels.</li>\n\t\t\t\n<li>angle - text rotation angle. </li>\n\t\t\t\t<li>textRotationPoint - position to rotate the text around, e.g. 'lefttop',\n'centertop' or 'rightbottom'</li>\n\t\t\t\t<li>autoRotate - boolean determining if auto rotation is enabled.\nApplicable to polar and spider charts only.</li>\n\t\t\t\t<li>horizontalAligment - horizontal labels alignment\n</li>\n\t\t\t\t<li>verticalAligment - vertical labels alignment.</li>\n\t\t\t\t<li>offset - labels offset, e.g\n{x: -5, y: 0}.</li>\n\t\t\t\t<li>formatSettings - object describing the format settings of the labels.</li>\n\t\t\t\t<li>formatFunction - callback function used to format the labels.</li>\n\t\t\t\t<li>custom - an array\nof custom values/offsets where a label/tickmark/gridline will be displayed.</li>\n\t\t\t</ul>\n\t\t</li>\n\t\t<li>logarithmicScale - determines whether to use logarithmic scale. The default value is 'false'.</li>\n\t\t<li>logarithmicScaleBase - base for logarithmic scale. The default value is 10.</li>\n\t\t<li>showGridLines - deprecated. (use the\nvisible property of gridLines)</li>\n\t\t<li>gridLinesInterval - deprecated. (use the step property of gridLines)</li>\n\t\t<li>gridLinesColor - deprecated. (use the color property of gridLines)</li>\n\t\t<li>gridLinesDashStyle - deprecated.\n(use the dashStyle property of gridLines)</li>\n\t\t<li>showTickMarks - deprecated. (use the visible property of\ntickMarks)</li>\n\t\t<li>tickMarksInterval - deprecated. (use the step property of tickMarks)</li>\n\t\t<li>tickMarksColor\n- deprecated. (use the color property of tickMarks)</li>\n\t\t<li>tickMarksDashStyle - deprecated. (use the\ndashStyle property of tickMarks)</li>\n\t\t<li>alternatingBackgroundColor - alternating background color between grid\nlines</li>\n\t\t<li>alternatingBackgroundColor2 - second alternating background color</li>\n\t\t<li>alternatingBackgroundOpacity - opacity of the alternating background</li>\n\t\t<li>formatSettings - settings used to format\nthe displayed values.</li>\n\t\t<li>formatFunction - custom function to format the displayed values.</li>\n\t\t<li>toolTipFormatSettings - settings used to format xAxis values in tooltips.</li>\n\t\t<li>toolTipFormatFunction - custom\nfunction to format xAxis values in tooltips.</li>\n\t\t<li>rangeSelector - definition of a range selector on the xAxis\n</li>\n\t</ul>\n\t<div style=\"padding-bottom: 5px;\">\n\t\t</div>\n",
            "designTimeFilterKeys": [ "basic" ]
        },
        {
            "name": "valueAxis",
            "ts_dataType": "ChartValueAxis",
            "dataType": "object",
            "optional": "true",
            "displayName": "Value axis",
            "defaultValue": "null",
            "description": "Example:  <pre><code>valueAxis: \n{  \n\ttitle: { text: 'Values' },     \n\tunitInterval: 1,     \n\tminValue: 0,     \n\tmaxValue: 100,     \n\tgridLines: { visible: true, step: 3, color: '#888888' } \n}                         </code></pre>                         valueAxis properties:<br>                         <ul>                             <li>visible - shows or hides the valueAxis.</li>                             <li>unitInterval - sets the interval between the units.</li>                             <li>minValue - sets the minimum value of the valueAxis.</li>                             <li>maxValue - sets the maximum value of the valueAxis.</li>                             <li>baselineValue - sets the baseline value for the axis.</li>                             <li>logarithmicScale - determines whether to use logarithmic scale. The default value is 'false'.</li>                             <li>logarithmicScaleBase - base for logarithmic scale. The default value is 10.</li>                             <li>formatSettings - settings used to format the displayed values along the axis.</li>                             <li>formatFunction - custom function to format the displayed values along the axis.</li>                             <li>flip - specifies whether the values are displayed in reverse order.</li>                             <li>position - sets the axis position. Possible values: \\\\\"left\\\\\" and \\\\\"right\\\\\".</li>                             <li>padding - object describing the padding of the axis                                                                                             <ul>                                                                                                 <li>left - left padding.</li>                                                                                                 <li>right - right padding.</li>                                                                                             </ul>                             </li>                             <li>axisSize - sets the size of the axis.</li>                             <li>customDraw - boolean determining whether to draw the axis or the user will use APIs to draw it. The default is false.</li>                             <li>title - object describing the title of the valueAxis                                                                                             <ul>                                                                                                 <li>visible - boolean determining the visibility of the title.</li>                                                                                                 <li>text - text of the title.</li>                                                                                                 <li>class - CSS class of the title text.</li>                                                                                                 <li>horizontalAlignment - horizontal alignment.</li>                                                                                                 <li>verticalAlignment - horizontal alignment.</li>                                                                                             </ul>                             </li>                             <li>tickMarks - object describing the tick marks properties of the valueAxis                                                                                             <ul>                                                                                                 <li>visible - true/false/'custom' determining the visibility. When 'custom' is set, displays only custom values/offsets.</li>                                                                                                 <li>step - interval steps between tick mark placements.</li>                                                                                                 <li>dashStyle - tick marks dash style, e.g. '2,2', </li>                                                                                                 <li>lineWidth - line width in pixels of the tick marks.</li>                                                                                                 <li>size - size in pixels of the tick marks. The default is 4.</li>                                                                                                 <li>color - color of the tick marks, e.g. '#757575'.</li>                                                                                                 <li>custom - an array of custom values/offsets where a label/tickmark/gridline will be displayed.</li>                                                                                             </ul>                             </li>                             <li>gridLines - object describing the grid lines properties of the valueAxis                                                                                             <ul>                                                                                                 <li>visible - true/false/'custom' determining the visibility. When 'custom' is set, displays only custom values/offsets.</li>                                                                                                 <li>step - interval steps between grid line placements.</li>                                                                                                 <li>dashStyle - grid lines dash style, e.g. '2,2', </li>                                                                                                 <li>lineWidth - line width in pixels of the grid lines.</li>                                                                                                 <li>color - color of the tick marks, e.g. '#757575'.</li>                                                                                                 <li>custom - an array of custom values/offsets where a label/tickmark/gridline will be displayed.</li>                                                                                              </ul>                             </li>                             <li>line - object describing the line properties of the axis                                                                                             <ul>                                                                                                 <li>visible - boolean determining the visibility of the axis line.</li>                                                                                                 <li>dashStyle - line dash style, e.g. '2,2'. The default is inherited from the grid lines. </li>                                                                                                 <li>lineWidth - line width. The default is inherited from the grid lines.</li>                                                                                                 <li>color - color of axis line, e.g. '#757575'.</li>                                                                                             </ul>                             </li>                             <li>labels - object describing the labels properties of the axis                                                                                             <ul>                                                                                                 <li>visible - true/false/'custom' determining the visibility. When 'custom' is set, displays only custom values/offsets.</li>                                                                                                 <li>step - interval steps between label placements.</li>                                                                                                 <li>class - CSS class of the labels.</li>                                                                                                 <li>angle - text rotation angle. </li>                                                                                                 <li>textRotationPoint - position to rotate the text around, e.g. 'lefttop', 'centertop' or 'rightbottom'</li>                                                                                                 <li>autoRotate - boolean determining if auto rotation is enabled. Applicable to polar and spider charts only.</li>                                                                                                 <li>horizontalAligment - horizontal labels alignment.</li>                                                                                                 <li>verticalAligment - vertical labels alignment.</li>                                                                                                 <li>offset - labels offset, e.g {x: -5, y: 0}.</li>                                                                                                 <li>formatSettings - object describing the format settings of the labels.</li>                                                                                                 <li>formatFunction - callback function used to format the labels.</li>                                                                                                 <li>custom - an array of custom values/offsets where a label/tickmark/gridline will be displayed.</li>                                                                                             </ul>                             </li>                             <li>showGridLines - deprecated. (use the visible property of gridLines)</li>                             <li>gridLinesInterval - deprecated. (use the step property of gridLines)</li>                             <li>gridLinesColor - deprecated. (use the color property of gridLines)</li>                             <li>gridLinesDashStyle - deprecated. (use the dashStyle property of gridLines)</li>                             <li>showTickMarks - deprecated. (use the visible property of tickMarks)</li>                             <li>tickMarksInterval - deprecated. (use the step property of tickMarks)</li>                             <li>tickMarksColor - deprecated. (use the color property of tickMarks)</li>                             <li>tickMarksDashStyle - deprecated. (use the dashStyle property of tickMarks)</li>                             <li>alternatingBackgroundColor - alternating background color between grid lines</li>                             <li>alternatingBackgroundColor2 - second alternating background color</li>                             <li>alternatingBackgroundOpacity - opacity of the alternating background</li>                             <li>bands - optional color bands dislayed in the chart's plot area                                                                                             <ul>                                                                                                 <li>minValue - start value of the color band.</li>                                                                                                 <li>maxValue - end value of the color band.</li>                                                                                                 <li>color - color used to fill the area between the minValue and the maxValue.</li>                                                                                                 <li>opacity - fraction indicating the fill opacity.</li> </ul> </li> </ul>",
            "designTimeFilterKeys": [ "basic" ],
            "exampleInit": {
                "valueAxis": "valueAxis",
                "exampleData": "{\n          title: { text: 'Values' },\n          unitInterval: 1,\n          minValue: 0,\n          maxValue: 100,\n          gridLines: { visible: true, step: 3, color: '#888888' }\n        }"
            }
        },
        {
            "name": "categoryAxis",
            "ts_dataType": "any",
            "dataType": "object",
            "optional": "true",
            "displayName": "categoryAxis",
            "defaultValue": "null",
            "description": "",
            "designTimeFilterKeys": [ "basic" ]
        },
        {
            "name": "seriesGroups",
            "ts_dataType": "Array<ChartSeriesGroup>",
            "dataType": "Array",
            "optional": "false",
            "displayName": "Series groups",
            "defaultValue": "null",
            "description": "<p>    The seriesGroups property is used to describe all series displayed on the chart. jqxChart supports multiple    series of different types and series grouping. Each series group may have its own Value Axis (Y-axis) which    allows you to have values with different scales displayed on the same chart at the same time. It also allows    you to display multiple series types together on the same chart. For example, you can display all series in    one group as lines and the series in a second group as columns.</p>                    <pre><code>\nseriesGroups:\n[\n    {\n        type: 'stackedarea100',\n        orientation: 'vertical',\n        series: [\n                { dataField: 'SearchNonPaid', displayText: 'Non-Paid Search Traffic' },\n                { dataField: 'SearchPaid', displayText: 'Paid Search Traffic' },\n                { dataField: 'Referral', displayText: 'Referral Traffic' }\n            ],\n        bands:\n        [\n            { minValue: 2000, maxValue: 2500, color: '#FF0000', opacity: 0.15},\n            { minValue: 1000, maxValue: 1100, color: '#FF0000', opacity: 0.20}\n        ]\n            \n    }\n]</code></pre>                    \n                    The seriesGroups is an array of objects where each object represents one group. A group may have the following properties:                                                                                \n                    <ul>                        <li>type - sets the chart type. jqxChart supports several common chart types. You can                                                                                        easily plot series of different types on a common chart. A type must be specified                                                                                        for each series group. Currently jqxChart supports the following series types:                                                                                        <ul>                                                                                            <li>column - simple column series</li>                                                                                            <li>stackedcolumn - stacked column series</li>                                                                                            <li>stackedcolumn100 - percentage stacked columns</li>                                                                                            <li>rangecolumn - floating column between two values</li>                                                                                            <li>waterfall - waterfall series</li>                                                                                            <li>stackedwaterfall - stacked waterfall series</li>                                                                                            <li>line - simple streight lines connecting the value points</li>                                                                                            <li>stackedline - stacked lines</li>                                                                                            <li>stackedline100 - percentage stacked lines</li>                                                                                            <li>spline - smooth lines connecting the value points</li>                                                                                            <li>stackedspline - smooth stacked lines</li>                                                                                            <li>stackedspline100 - percentage stacked smooth lines</li>                                                                                            <li>stepline - step line</li>                                                                                            <li>stackedstepline - stacked step line</li>                                                                                            <li>stackedstepline100 - percentage stacked step line</li>                                                                                            <li>area - area connecting the value points with streight lines</li>                                                                                            <li>stackedarea- stacked area with streight lines between the points</li>                                                                                            <li>rangearea - floating area between pairs of value points</li>                                                                                            <li>stackedline100 - percentage stacked area</li>                                                                                            <li>splinearea - smooth area connecting the value points</li>                                                                                            <li>splinerangearea - smooth floating area between pairs of value points</li>                                                                                            <li>stackedsplineara - smooth stacked area</li>                                                                                            <li>stackedsplinearea100 - percentage stacked smooth area</li>                                                                                            <li>steplinearea - step area connecting the value points</li>                                                                                            <li>stackedsteplineara - step stacked area</li>                                                                                            <li>stackedsteplinearea100 - percentage stacked step area</li>                                                                                            <li>pie - circular chart divided into sectors, illustrating proportion</li>                                                                                            <li>donut - chart divided into circular sectors with different inner and outer radius</li>                                                                                            <li>scatter - data is displayed as a collection of points</li>                                                                                            <li>stackedscatter - data is displayed as a collection of points and the values are stacked</li>                                                                                            <li>stackedscatter100 - data is displayed as a collection of points and the values are percentage stacked</li>                                                                                            <li>bubble - data is displayed as a collection of bubbles</li>                                                                                            <li>stackedbubble - data is displayed as a collection of bubbles and the values are stacked</li>                                                                                            <li>stackedbubble100 - data is displayed as a collection of bubbles and the values are percentage stacked</li>                                                                                            <li>candlestick - display candlestick series using open, high, low, close data points</li>                                                                                            <li>ohlc - display OHLC series using open, high, low, close data points</li>                                                                                        </ul>                        </li>                        <li>orientation - specifies the orientation of the series group.                                                                                        <ul>                                                                                            <li>vertical - the valueAxis is displayed vertically and the xAxis horizontally.</li>                                                                                            <li>horizontal - the valueAxis is displayed horizontally and the xAxis vertically</li>                                                                                        </ul>                        </li>                        <li>valueAxis - object describing the valueAxis for this group. jqxChart allows you to use a common valueAxis and/or multiple value axes per serie group.</li>                        <li>columnsGapPercent - percentage gap between columns within the same serie. The default value is 25.</li>                        <li>seriesGapPercent - percentage gap between columns belonging to different series. The default value is 10.</li>                        <li>columnsMaxWidth - maximum width of columns in column series.</li>                        <li>columnsMinWidth - minimum width of columns in column series.</li>                        <li>columnsTopWidthPercent - columns top width (as percentage of the total width). The default value is 100.</li>                        <li>columnsBottomWidthPercent - columns bottom width (as percentage of the total width). The default value is 100.</li>                        <li>skipOverlappingPoints - determines whether to display overlapping data points in column, ohlc and candlestick series. The default value is true.</li>                        <li>polar - a boolean value. When polar is set to 'true' the chart will render in polar coordinates.</li>                        <li>spider - a boolean value. When spider is set to 'true' the chart will render in polar coordinates.</li>                        <li>radius - the radius of the polar coordinate system. Applicable to polar and spider charts only.</li>                        <li>startAngle - the start angle (in degrees) of the polar coordinate system. Applicable to polar and spider charts only.</li>                        <li>endAngle - the end angle (in degrees) of the polar coordinate system. Applicable to polar and spider charts only.</li>                        <li>offsetX - horizontal position of the center of the polar coordinate system. Applicable to polar and spider charts only.</li>                        <li>offsetY - vertical position of the center of the polar coordinate system. Applicable to polar and spider charts only.</li>                        <li>series - an array of chart series.<p>Each serie has the following properties:</p>                            <ul>                                <li>dataField - name of the field in the data source.</li>                                <li>displayText - name to display for this serie.</li>                                <li>dataFieldOpen, dataFieldHigh, dataFieldLow, dataFieldClose  - names of the fields in the data source                                                                                                used in candlestcik and ohlc series                                </li>                                <li>displayTextOpen, displayTextHigh, displayTextLow, displayTextClose - names to display for candlestick and ohlc series.</li>                                <li>colorScheme - color palette to use when rendering the serie.</li>                                <li>color - (Deprecated) fill color for the serie.</li>                                <li>lineColor - Line color for the serie.</li>                                <li>lineColorSelected - Line color for the serie when selected.</li>                                <li>fillColor - Fill color for the serie.</li>                                <li>fillColorSelected - Fill color for the serie when selected.</li>                                <li>fillColorAlt - Alternating fill color for the serie. Applicable to OHLC series only.</li>                                <li>fillColorAltSelected - Alternating fill color for the serie when selected. Applicable to OHLC series only.</li>                                <li>lineColorSymbol - Line color for the marker symbols in serie.</li>                                <li>lineColorSymbolSelected - Line color for the marker symbols in the serie when selected.</li>                                <li>fillColorSymbol - Fill color for the marker symbols in the serie.</li>                                <li>fillColorSymbolSelected - Fill color for the the marker symbols in serie when selected.</li>                                <li>colorFunction - a custom function that returns the color of a data point.\n                                    The function will received the following parameters: dataValue, itemIndex, serie, group\n                                    The implementation of the function can return a single color which will be used as a fillColor and\n                                    the other colors will be derived or it can return an object containing fillColor, fillColorSelected, etc.                                </li>                                <li>greyScale - boolean that determines whether to display the serie in grey scale.</li>                                <li>legendFormatSettings - legend data formatting settings for the values in the serie.</li>                                <li>legendFormatFunction - legend data formatting function for the values in the serie.</li>                                <li>legendFillColor - fill color of the legend box. The default value is inherited by the serie's color.</li>                                <li>legendLineColor - line color of the legend box. The default value is inherited by the serie's color.</li>                                <li>toolTipFormatSettings - tooltip data formatting settings for the values in the serie.</li>                                <li>toolTipFormatFunction - tooltip data formatting function for the values in the serie.</li>                                <li>toolTipLineColor - determines the tooltip's border lines color.</li>                                <li>toolTipBackground - determines the tooltip's background.</li>                                <li>toolTipClass - determines the tooltip's CSS class name.</li>                                <li>useGradient - determines whether to use color gradients.</li>                                <li>opacity - determines the opacity of the items in this serie.</li>                                <li>lineWidth - determines the line tickness of the items in this serie.</li>                                <li>lineDashStyle - a string sequence of numbers represening line and space lengths, e.g. '2,2' </li>                                <li>emptyPointsDisplay - determines how to display value gaps in line series.                                                                                                Possible values are: 'connect', 'skip' and 'zero'\n                                </li>                                <li>linesUnselectMode - determines how line and area series are unselected based on mouse and touch events. Possible values are 'click' or 'default'.                                                                                                If the value is set to 'click', once a line or area serie is selected, it will remain selected until the user clicks or moves the cursor outside the chart.                                                                                                In default mode, the serie will be unselected immediatelly after the cursor moves over another serie or outside the chart.                                </li>                                <li>symbolType - determines the symbol type displayed for the data points in the serie. This parameter is applicable to line, area, scatter and bubble series only. Acceptable values are: 'none', 'circle', 'square', 'diamond', 'triangle_up', 'triangle_down', 'triangle_left', 'triangle_right'</li>                                <li>symbolSize - determines the size of the symbol element</li>                                <li>symbolSizeSelected - determines the size of the symbol element. This paramters is applicable to line and area series only.</li>                                <li>labels - object describing the labels properties of the axis                                        <ul>                                            <li>visible - true/false/'custom' determining the visibility. When 'custom' is set, displays only custom values/offsets.</li>                                            <li>offset - labels offset, e.g {x: -5, y: 0}.</li>                                            <li>angle - text rotation angle. </li>                                            <li>horizontalAligment - horizontal labels alignment.</li>                                            <li>verticalAligment - vertical labels alignment.</li>                                            <li>class - CSS class of the labels.</li>                                            <li>backgroundColor - labels background color.</li>                                            <li>backgroundOpacity - labels background opacity.</li>                                            <li>borderColor - labels border line color.</li>                                            <li>borderOpacity - labels border line opacity.</li>                                            <li>padding - object describing the padding of the labels                                                <ul>                                                    <li>left - left padding.</li>                                                    <li>right - right padding.</li>                                                    <li>top - top padding.</li>                                                    <li>bottom - bottom padding.</li>                                                </ul>                                            </li>                                            <li>autoRotate - boolean determining if auto rotation is enabled.</li>                                            <li>formatSettings - object describing the format settings of the labels.</li>                                            <li>formatFunction - callback function used to format the labels.</li>                                            <li>radius - radius of the labels in pie/donut series.</li>                                            <li>linesEnabled - determines whether to use lines for the labels in pie/donut series.</li>                                            <li>linesAngles - determines whether to use direct lines for the labels in pie/donut series.</li>                                            <li>custom - an array of custom values/offsets where a label/tickmark/gridline will be displayed.</li>                                        </ul>                                </li>                                <li>radius - outer radius of pie and donut series in pixels or percents.</li>                                <li>innerRadius - inner radius of donut series in pixels or percents.</li>                                <li>selectedRadiusChange - radius change on selection of pie and donut series in pixels or percents.</li>                                <li>initialAngle - initial angle in pie and donut series.</li>                                <li>startAngle - minimum angle in a pie, donut, polar and spider series</li>                                <li>endAngle - maximum angle in a pie, donut, polar and spider series</li>                                <li>centerOffset - offset from the center point in a pie/donut series.</li>                                <li>hiddenPointsDisplay - determines whether to hide slices of toggled points in pie and donut series.</li>                                <li>enableSeriesToggle - determines whether to toggle the series visibility after click on a legend's box.</li>                                <li>enableSelection - determines whether the serie is selectable.</li>                            </ul>                        </li>                        <li>annotations - an array of chart annotation objects.<p>Each annotation has the following properties:</p>                            <ul>                                <li>yValue - value to determine the vertical offset of the annotation.</li>                                <li>xValue - value to determine the horizontal offset of the annotation.</li>                                <li>yValue2 - optional 2nd value to determine the vertical offset of the annotation's bottom-right point.</li>                                <li>xValue2 - optional 2nd value to determine the horizontal offset of the annotation bottom-right point.</li>                                <li>offset - custom offset of the annotation relative to xValue &amp; yValue, e.g. { x: -45, y: -25}</li>                                <li>width - width of the annotation</li>                                <li>height - width of the annotation</li>                                <li>fillColor - fill/background color of the annotation.</li>                                <li>lineColor - line color of the annotation.</li>                                <li>type - shape type of the annotation, e.g. 'rect, circle, line, path'.</li>                                <li>radius - radius of the annotation in case its type is 'circle'.</li>                                <li>path - line path command in case the type is 'path', e.g. 'M 10,10 L 20,20 L 50,50'.</li>                                <li>text - object describing the text of the annotation:                                                                                                <ul>                                                                                                    <li>value - text of the annotation.</li>                                                                                                    <li>class - CSS class of the annotation.</li>                                                                                                    <li>angle - text rotation angle.</li>                                                                                                    <li>offset - offset of the annotation text relative to the base annotation offset, e.g. { x: 5, y: 10}</li>                                                                                                </ul>                                </li>                            </ul>                        </li>                    </ul>",
            "designTimeFilterKeys": [ "basic" ]
        }
    ],
    "events": [
        {
            "name": "toggle",
            "description": "The event is raised when a serie is toggled by a user click in the chart's legend or through an API call."
        },
        {
            "name": "click",
            "description": "The event is raised when the user clicks on series element."
        },
        {
            "name": "refreshBegin",
            "description": "The event is raised when the chart begins rendering.",
            "customExample": {
                "customCode": "&lt;template>\n    &lt;div>\n        &lt;JqxChart ref=\"myChart\" style=\"width: 850px; height: 500px\"\n            @rangeSelectionChanging=\"dumpEventInfo($event)\" @rangeSelectionChanged=\"dumpEventInfo($event)\"\n            @refreshBegin=\"dumpEventInfo($event)\" @refreshEnd=\"dumpEventInfo($event)\"\n            :title=\"'Fitness & Exercise Weekly Scorecard'\" :description=\"'Time Spent in Vigorous Exercise'\"\n            :enableAnimations=\"true\" :source=\"source\" :xAxis=\"xAxis\" :seriesGroups=\"seriesGroups\"\n            :colorScheme=\"'scheme02'\" :valueAxis=\"valueAxis\">\n        &lt;/JqxChart>\n        &lt;div ref=\"eventsText\" style=\"width: 847px; height: 200px; overflow-y: scroll; border: 1px solid lightgrey\">&lt;/div>\n    &lt;/div>\n&lt;/template>\n&lt;script>\n    import JqxChart from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxchart.vue';\n    export default {\n        components: {\n            JqxChart\n        },\n        data: function () {\n            return {\n                valueAxis: {\n                    title: { text: 'Values' },\n                    unitInterval: 1,\n                    minValue: 0,\n                    maxValue: 100,\n                    gridLines: { visible: true, step: 3, color: '#888888' }\n                },\n                source: [\n                    { Day: 'Monday', Keith: 0, Erica: 20, George: 10 },\n                    { Day: 'Tuesday', Keith: 20, Erica: 30, George: 40 }\n                ],\n                xAxis: {\n                    dataField: 'Day',\n                    rangeSelector: {\n                        size: 100,\n                        padding: { top: 10, bottom: 0 },\n                        backgroundColor: 'white',\n                        dataField: 'Keith'\n                    }\n                },\n                seriesGroups: [{\n                    type: 'column',\n                    columnsGapPercent: 50,\n                    seriesGapPercent: 0,\n                    valueAxis: { minValue: 0, description: 'Time in minutes' },\n                    series: [\n                        { dataField: 'Keith', displayText: 'Keith' },\n                        { dataField: 'Erica', displayText: 'Erica' },\n                        { dataField: 'George', displayText: 'George' }\n                    ]\n                }]\n            }\n        },\n        methods: {\n            dumpEventInfo: function (event) {\n                if (event.type) {\n                    let eventsText = this.$refs.eventsText;\n                    eventsText.innerHTML = event.type + '&lt;br />' + eventsText.innerHTML;   \n                }\n            }\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "refreshEnd",
            "description": "The event is raised when the chart finishes rendering.",
            "customExample": {
                "customCode": "&lt;template>\n    &lt;div>\n        &lt;JqxChart ref=\"myChart\" style=\"width: 850px; height: 500px\"\n            @rangeSelectionChanging=\"dumpEventInfo($event)\" @rangeSelectionChanged=\"dumpEventInfo($event)\"\n            @refreshBegin=\"dumpEventInfo($event)\" @refreshEnd=\"dumpEventInfo($event)\"\n            :title=\"'Fitness & Exercise Weekly Scorecard'\" :description=\"'Time Spent in Vigorous Exercise'\"\n            :enableAnimations=\"true\" :source=\"source\" :xAxis=\"xAxis\" :seriesGroups=\"seriesGroups\"\n            :colorScheme=\"'scheme02'\" :valueAxis=\"valueAxis\">\n        &lt;/JqxChart>\n        &lt;div ref=\"eventsText\" style=\"width: 847px; height: 200px; overflow-y: scroll; border: 1px solid lightgrey\">&lt;/div>\n    &lt;/div>\n&lt;/template>\n&lt;script>\n    import JqxChart from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxchart.vue';\n    export default {\n        components: {\n            JqxChart\n        },\n        data: function () {\n            return {\n                valueAxis: {\n                    title: { text: 'Values' },\n                    unitInterval: 1,\n                    minValue: 0,\n                    maxValue: 100,\n                    gridLines: { visible: true, step: 3, color: '#888888' }\n                },\n                source: [\n                    { Day: 'Monday', Keith: 0, Erica: 20, George: 10 },\n                    { Day: 'Tuesday', Keith: 20, Erica: 30, George: 40 }\n                ],\n                xAxis: {\n                    dataField: 'Day',\n                    rangeSelector: {\n                        size: 100,\n                        padding: { top: 10, bottom: 0 },\n                        backgroundColor: 'white',\n                        dataField: 'Keith'\n                    }\n                },\n                seriesGroups: [{\n                    type: 'column',\n                    columnsGapPercent: 50,\n                    seriesGapPercent: 0,\n                    valueAxis: { minValue: 0, description: 'Time in minutes' },\n                    series: [\n                        { dataField: 'Keith', displayText: 'Keith' },\n                        { dataField: 'Erica', displayText: 'Erica' },\n                        { dataField: 'George', displayText: 'George' }\n                    ]\n                }]\n            }\n        },\n        methods: {\n            dumpEventInfo: function (event) {\n                if (event.type) {\n                    let eventsText = this.$refs.eventsText;\n                    eventsText.innerHTML = event.type + '&lt;br />' + eventsText.innerHTML;   \n                }\n            }\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "rangeSelectionChanging",
            "description": "The event is raised after the chart's range selector position changes and after the chart ends rendering.",
            "customExample": {
                "customCode": "&lt;template>\n    &lt;div>\n        &lt;JqxChart ref=\"myChart\" style=\"width: 850px; height: 500px\"\n            @rangeSelectionChanging=\"dumpEventInfo($event)\" @rangeSelectionChanged=\"dumpEventInfo($event)\"\n            @refreshBegin=\"dumpEventInfo($event)\" @refreshEnd=\"dumpEventInfo($event)\"\n            :title=\"'Fitness & Exercise Weekly Scorecard'\" :description=\"'Time Spent in Vigorous Exercise'\"\n            :enableAnimations=\"true\" :source=\"source\" :xAxis=\"xAxis\" :seriesGroups=\"seriesGroups\"\n            :colorScheme=\"'scheme02'\" :valueAxis=\"valueAxis\">\n        &lt;/JqxChart>\n        &lt;div ref=\"eventsText\" style=\"width: 847px; height: 200px; overflow-y: scroll; border: 1px solid lightgrey\">&lt;/div>\n    &lt;/div>\n&lt;/template>\n&lt;script>\n    import JqxChart from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxchart.vue';\n    export default {\n        components: {\n            JqxChart\n        },\n        data: function () {\n            return {\n                valueAxis: {\n                    title: { text: 'Values' },\n                    unitInterval: 1,\n                    minValue: 0,\n                    maxValue: 100,\n                    gridLines: { visible: true, step: 3, color: '#888888' }\n                },\n                source: [\n                    { Day: 'Monday', Keith: 0, Erica: 20, George: 10 },\n                    { Day: 'Tuesday', Keith: 20, Erica: 30, George: 40 }\n                ],\n                xAxis: {\n                    dataField: 'Day',\n                    rangeSelector: {\n                        size: 100,\n                        padding: { top: 10, bottom: 0 },\n                        backgroundColor: 'white',\n                        dataField: 'Keith'\n                    }\n                },\n                seriesGroups: [{\n                    type: 'column',\n                    columnsGapPercent: 50,\n                    seriesGapPercent: 0,\n                    valueAxis: { minValue: 0, description: 'Time in minutes' },\n                    series: [\n                        { dataField: 'Keith', displayText: 'Keith' },\n                        { dataField: 'Erica', displayText: 'Erica' },\n                        { dataField: 'George', displayText: 'George' }\n                    ]\n                }]\n            }\n        },\n        methods: {\n            dumpEventInfo: function (event) {\n                if (event.type) {\n                    let eventsText = this.$refs.eventsText;\n                    eventsText.innerHTML = event.type + '&lt;br />' + eventsText.innerHTML;   \n                }\n            }\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "rangeSelectionChanged",
            "description": "The event is raised when the chart's range selector position changes and before the chart starts rendering.",
            "customExample": {
                "customCode": "&lt;template>\n    &lt;div>\n        &lt;JqxChart ref=\"myChart\" style=\"width: 850px; height: 500px\"\n            @rangeSelectionChanging=\"dumpEventInfo($event)\" @rangeSelectionChanged=\"dumpEventInfo($event)\"\n            @refreshBegin=\"dumpEventInfo($event)\" @refreshEnd=\"dumpEventInfo($event)\"\n            :title=\"'Fitness & Exercise Weekly Scorecard'\" :description=\"'Time Spent in Vigorous Exercise'\"\n            :enableAnimations=\"true\" :source=\"source\" :xAxis=\"xAxis\" :seriesGroups=\"seriesGroups\"\n            :colorScheme=\"'scheme02'\" :valueAxis=\"valueAxis\">\n        &lt;/JqxChart>\n        &lt;div ref=\"eventsText\" style=\"width: 847px; height: 200px; overflow-y: scroll; border: 1px solid lightgrey\">&lt;/div>\n    &lt;/div>\n&lt;/template>\n&lt;script>\n    import JqxChart from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxchart.vue';\n    export default {\n        components: {\n            JqxChart\n        },\n        data: function () {\n            return {\n                valueAxis: {\n                    title: { text: 'Values' },\n                    unitInterval: 1,\n                    minValue: 0,\n                    maxValue: 100,\n                    gridLines: { visible: true, step: 3, color: '#888888' }\n                },\n                source: [\n                    { Day: 'Monday', Keith: 0, Erica: 20, George: 10 },\n                    { Day: 'Tuesday', Keith: 20, Erica: 30, George: 40 }\n                ],\n                xAxis: {\n                    dataField: 'Day',\n                    rangeSelector: {\n                        size: 100,\n                        padding: { top: 10, bottom: 0 },\n                        backgroundColor: 'white',\n                        dataField: 'Keith'\n                    }\n                },\n                seriesGroups: [{\n                    type: 'column',\n                    columnsGapPercent: 50,\n                    seriesGapPercent: 0,\n                    valueAxis: { minValue: 0, description: 'Time in minutes' },\n                    series: [\n                        { dataField: 'Keith', displayText: 'Keith' },\n                        { dataField: 'Erica', displayText: 'Erica' },\n                        { dataField: 'George', displayText: 'George' }\n                    ]\n                }]\n            }\n        },\n        methods: {\n            dumpEventInfo: function (event) {\n                if (event.type) {\n                    let eventsText = this.$refs.eventsText;\n                    eventsText.innerHTML = event.type + '&lt;br />' + eventsText.innerHTML;   \n                }\n            }\n        }\n    }\n&lt;/script>"
            }
        }
    ],
    "methods": [
        {
            "name": "getInstance",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": []
        },
        {
            "name": "refresh",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Refreshes the jqxChart",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": []
        },
        {
            "name": "update",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Updates the jqxChart",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": []
        },
        {
            "name": "destroy",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "destroys the jqxChart instance",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": []
        },
        {
            "name": "addColorScheme",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Adds a new color sheme. If a scheme with the same name already exists the method will update its colors. ",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": [
                {
                    "name": "schemeName",
                    "dataType": "string",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "colors",
                    "ts_dataType": "Array<string>",
                    "description": "",
                    "optional": "false"
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxChart ref=\"myChart\" style=\"width: 850px; height: 500px;\"\n              :title=\"'Fitness & Exercise Weekly Scorecard'\" :description=\"'Time Spent in Vigorous Exercise'\"\n              :enableAnimations=\"true\" :source=\"source\" :xAxis=\"xAxis\" :seriesGroups=\"seriesGroups\" />\n&lt;/template>\n\n&lt;script>\n    import JqxChart from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxchart.vue';\n\n    export default {\n        components: {\n            JqxChart\n        },\n        data: function () {\n            return {\n                source: [\n                    { Day: 'Monday', Keith: 0, Erica: 20, George: 10 },\n                    { Day: 'Tuesday', Keith: 20, Erica: 30, George: 40 }\n                ],\n                xAxis: { dataField: 'Day' },\n                seriesGroups: [{\n                    type: 'column',\n                    columnsGapPercent: 50,\n                    seriesGapPercent: 0,\n                    valueAxis: { minValue: 0, description: 'Time in minutes' },\n                    series: [\n                        { dataField: 'Keith', displayText: 'Keith' },\n                        { dataField: 'Erica', displayText: 'Erica' },\n                        { dataField: 'George', displayText: 'George' }\n                    ]\n                }]\n            }\n        },\n        mounted: function () {\n            this.$refs.myChart.addColorScheme('myScheme', ['#722694', '#AA4643', '#89A54E', '#71588F', '#4198AF']);\n            this.$refs.myChart.colorScheme = 'myScheme';\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "removeColorScheme",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Removes an existing color scheme. If the scheme does not exist the method has no effect. ",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": [
                {
                    "name": "schemeName",
                    "dataType": "string",
                    "description": "",
                    "optional": "false"
                }
            ],
            "exampleInit": {
                "args": [ "'scheme01'" ]
            },
            "extraData": {
                "colorScheme": "'scheme05'"
            }
        },
        {
            "name": "getItemsCount",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Gets the number of rendered items in a specific serie.",
            "returnDataType": "number",
            "ts_returnDataType": "number",
            "arguments": [
                {
                    "name": "groupIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "serieIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                }
            ],
            "exampleInit": {
                "args": [ "0", "1", "0" ]
            }
        },
        {
            "name": "getItemCoord",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Gets the rendered coordinates of a data point element.",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "groupIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "serieIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "itemIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                }
            ],
            "exampleInit": {
                "args": [ "0", "1", "0" ]
            }
        },
        {
            "name": "getXAxisRect",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Gets the rendered rectangle coordinates of the x-Axis of specific serie group.",
            "returnDataType": "object",
            "ts_returnDataType": "ChartRect",
            "arguments": [
                {
                    "name": "groupIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                }
            ],
            "exampleInit": {
                "args": [ "0" ]
            }
        },
        {
            "name": "getXAxisLabels",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Gets the rendered coordinates and values of the xAxis labels.",
            "returnDataType": "Array",
            "ts_returnDataType": "Array<any>",
            "arguments": [
                {
                    "name": "groupIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                }
            ],
            "exampleInit": {
                "args": [ "0" ]
            }
        },
        {
            "name": "getValueAxisRect",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Gets the rendered rectangle coordinates of the valueAxis of specific serie group.",
            "returnDataType": "object",
            "ts_returnDataType": "ChartRect",
            "arguments": [
                {
                    "name": "groupIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                }
            ],
            "exampleInit": {
                "args": [ "0" ]
            }
        },
        {
            "name": "getValueAxisLabels",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Gets the rendered coordinates and values of the valueAxis labels.",
            "returnDataType": "Array",
            "ts_returnDataType": "Array<any>",
            "arguments": [
                {
                    "name": "groupIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                }
            ],
            "exampleInit": {
                "args": [ "0" ]
            }
        },
        {
            "name": "getColorScheme",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Returns the colors of a color scheme by name. If the scheme doesn't exist the method returns undefined. ",
            "returnDataType": "Array",
            "ts_returnDataType": "Array<string>",
            "arguments": [
                {
                    "name": "colorScheme",
                    "dataType": "string",
                    "description": "",
                    "optional": "false"
                }
            ],
            "exampleInit": {
                "args": [ "'scheme01'" ]
            }
        },
        {
            "name": "hideSerie",
            "description": "Hides a chart serie. The result of calling this function is same as the user unchecking the legend box of a chart serie. The itemIndex parameter is optional and applicable to pie and donut series only. ",
            "exampleURL": "",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": [
                {
                    "name": "groupIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "serieIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "itemIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "true"
                }
            ],
            "exampleInit": {
                "args": [ "0", "1" ]
            }
        },
        {
            "name": "showSerie",
            "description": "Shows a chart serie. The result of calling this function is same as the user checking the legend box of a chart serie. The itemIndex parameter is optional and applicable to pie and donut series only.",
            "exampleURL": "",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": [
                {
                    "name": "groupIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "serieIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "itemIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "true"
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxChart ref=\"myChart\" style=\"width: 850px; height: 500px;\"\n              :title=\"'Fitness & Exercise Weekly Scorecard'\" :description=\"'Time Spent in Vigorous Exercise'\"\n              :enableAnimations=\"true\" :source=\"source\" :xAxis=\"xAxis\" :seriesGroups=\"seriesGroups\"\n              :colorScheme=\"'scheme02'\" />\n&lt;/template>\n\n&lt;script>\n    import JqxChart from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxchart.vue';\n\n    export default {\n        components: {\n            JqxChart\n        },\n        data: function () {\n            return {\n                source: [\n                    { Day: 'Monday', Keith: 0, Erica: 20, George: 10 },\n                    { Day: 'Tuesday', Keith: 20, Erica: 30, George: 40 }\n                ],\n                xAxis: { dataField: 'Day' },\n                seriesGroups: [{\n                    type: 'column',\n                    columnsGapPercent: 50,\n                    seriesGapPercent: 0,\n                    valueAxis: { minValue: 0, description: 'Time in minutes' },\n                    series: [\n                        { dataField: 'Keith', displayText: 'Keith' },\n                        { dataField: 'Erica', displayText: 'Erica' },\n                        { dataField: 'George', displayText: 'George' }\n                    ]\n                }]\n            }\n        },\n        mounted: function () {\n           this.$refs.myChart.hideSerie(0, 1);\n\n           setTimeout(_ => this.$refs.myChart.showSerie(0, 1), 1000);      \n        }\n    }\n&lt;/script>"

            }
        },
        {
            "name": "hideToolTip",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Hides the current tooltip if visible.",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": [
                {
                    "name": "hideDelay",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                }
            ],
            "exampleInit": {
                "args": [ "100" ]
            }
        },
        {
            "name": "showToolTip",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Shows a the tooltip for a perticular data point.",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": [
                {
                    "name": "groupIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "serieIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "itemIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "showDelay",
                    "dataType": "number",
                    "description": "",
                    "optional": "true"
                },
                {
                    "name": "hideDelay",
                    "dataType": "number",
                    "description": "",
                    "optional": "true"
                }
            ],
            "exampleInit": {
                "args": [ "0", "0", "1", "100", "100" ]
            }
        },
        {
            "name": "saveAsJPEG",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Exports the chart's content as JPEG image. The browser must support HTML5 Canvas and the device must be able to connect to the export server. If you don't setup your own export server the default server is jqwidgets.com",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": [
                {
                    "name": "fileName",
                    "dataType": "string",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "exportServerUrl",
                    "dataType": "string",
                    "description": "",
                    "optional": "true"
                }
            ],
            "exampleInit": {
                "args": [ "'chartImage.jpeg'", "'https://www.jqwidgets.com/export_server/export.php'" ]
            }
        },
        {
            "name": "saveAsPNG",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Exports the chart's content in PNG document. The browser must support HTML5 Canvas and the device must be able to connect to the export server. If you don't setup your own export server the default server is jqwidgets.com",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": [
                {
                    "name": "fileName",
                    "dataType": "string",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "exportServerUrl",
                    "dataType": "string",
                    "description": "",
                    "optional": "true"
                }
            ],
            "exampleInit": {
                "args": [ "'chartImage.png'", "'https://www.jqwidgets.com/export_server/export.php'" ]
            }
        },
        {
            "name": "saveAsPDF",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Exports the chart's content in PDF document. The browser must support HTML5 Canvas and the device must be able to connect to the export server. If you don't setup your own export server the default server is jqwidgets.com",
            "returnDataType": "None",
            "ts_returnDataType": "void",
            "arguments": [
                {
                    "name": "fileName",
                    "dataType": "string",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "exportServerUrl",
                    "dataType": "string",
                    "description": "",
                    "optional": "true"
                }
            ],
            "exampleInit": {
                "args": [ "'chartImage.pdf'", "'https://www.jqwidgets.com/export_server/export.php'" ]
            }
        },
        {
            "name": "getXAxisValue",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Returns the value corresponding to a specific offset along the x-Axis",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "offset",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "groupIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                }
            ],
            "exampleInit": {
                "args": [ "400", "0" ]
            }
        },
        {
            "name": "getValueAxisValue",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "Returns the value corresponding to a specific offset along the valueAxis",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "offset",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                },
                {
                    "name": "groupIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": "false"
                }
            ],
            "exampleInit": {
                "args": [ "100", "0" ]
            }
        }

    ]
}