{
    "widget": {
        "name": "jqxPasswordInput",
        "description": "Enables users to input passwords.",
        "angular2": {
            "name": "jqxPasswordInputComponent",
            "selector": "jqxPasswordInput"
        }
    },
    "dataTypes": [
        {
            "name": "PasswordInputShowStrengthPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "left", "right", "top", "bottom" ]
        },
        {
            "name": "PasswordInputLocalization",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "passwordStrengthString",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "PasswordStrengthString",
                    "defaultValue": ""
                },
                {
                    "name": "tooShort",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "TooShort",
                    "defaultValue": ""
                },
                {
                    "name": "weak",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Weak",
                    "defaultValue": ""
                },
                {
                    "name": "fair",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Fair",
                    "defaultValue": ""
                },
                {
                    "name": "good",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Good",
                    "defaultValue": ""
                },
                {
                    "name": "strong",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Strong",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "PasswordInputStrengthColors",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "tooShort",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "TooShort",
                    "defaultValue": ""
                },
                {
                    "name": "weak",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Weak",
                    "defaultValue": ""
                },
                {
                    "name": "fair",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Fair",
                    "defaultValue": ""
                },
                {
                    "name": "good",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Good",
                    "defaultValue": ""
                },
                {
                    "name": "strong",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Strong",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "PasswordInputPasswordStrength",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "password",
                    "dataType": "string | number",
                    "optional": "true",
                    "displayName": "Password",
                    "defaultValue": ""
                },
                {
                    "name": "characters",
                    "dataType": "object",
                    "optional": "true",
                    "displayName": "Characters",
                    "defaultValue": ""
                },
                {
                    "name": "defaultStrength",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "DefaultStrength",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "PasswordInputStrengthTypeRenderer",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "password",
                    "dataType": "string | number",
                    "optional": "true",
                    "displayName": "Password",
                    "defaultValue": ""
                },
                {
                    "name": "characters",
                    "dataType": "object",
                    "optional": "true",
                    "displayName": "Characters",
                    "defaultValue": ""
                },
                {
                    "name": "defaultStrength",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "DefaultStrength",
                    "defaultValue": ""
                }
            ]
        }
    ],
    "properties": [
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Gets or sets whether the widget is disabled. </P>",
            "example": "<pre><CODE>$('#jqxPasswordInput').jqxPasswordInput({ disabled: true }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/B5JxB/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "height",
            "defaultValue": "\"auto\"",
            "description": "<P>Gets or sets the widget's height. The value may be \"auto\", a number or a string like \"Npx\", where N is a number. </P>",
            "example": "<pre><CODE>$('#jqxPasswordInput').jqxPasswordInput({ height: 25 }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/TCTpG/",
            "exampleDescription": "height is set to '25px'",
            "dataType": "number",
            "ts_dataType": "string | number",
            "exampleInit": {
                "height": "50"
            }
        },
        {
            "name": "localization",
            "defaultValue": "{ passwordStrengthString: 'Password strength', tooShort: 'Too short', weak: 'Weak', fair: 'Fair', good: 'Good', strong: 'Strong' }",
            "description": "<P>Sets the various text values used in the widget. Useful for localization. </P>\n\r\n<P>Default value: </P>\n<PRE><CODE>{ passwordStrengthString: \"Password strength\", tooShort: \"Too short\", weak: \"Weak\", fair: \"Fair\", good: \"Good\", strong: \"Strong\" }</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxPasswordInput').jqxPasswordInput({ localization: { passwordStrengthString: \"חוזק סיסמא\", tooShort: \"קצר מדי\", weak: \"חלש\", fair: \"הוגן\", good: \"טוב\", strong: \"חזק\"} });\r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/yY5cN/",
            "exampleDescription": "localization is set to a custom object",
            "dataType": "object",
            "ts_dataType": "PasswordInputLocalization",
            "exampleInit": {
                "showStrength": "true",
                "localization": "localization",
                "exampleData": "{\n          passwordStrengthString: \"Password strength\",\n          tooShort: \"Very short\",\n          weak: \"Weak Pass\",\n          fair: \"Fair Pass\",\n          good: \"Good Pass\",\n          strong: \"Strong Pass\"\n        }"
            }
        },
        {
            "name": "maxLength",
            "defaultValue": "null",
            "description": "<P>Gets or sets the maximal number of characters in the password. </P>",
            "example": "<pre><CODE>$('#jqxPasswordInput').jqxPasswordInput({ maxLength: \"none\" }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/2myDQ/",
            "exampleDescription": "maxLength is set to 7",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "maxLength": "7"
            }
        },
        {
            "name": "placeHolder",
            "defaultValue": "null",
            "description": "<P>Gets or sets the password input's placeholder text. </P>",
            "example": "<pre><CODE>$('#jqxPasswordInput').jqxPasswordInput({ placeHolder: \"Enter password:\" });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/487KW/",
            "exampleDescription": "placeHolder is set to 'Enter a Password'",
            "dataType": "string",
            "ts_dataType": "number | string",
            "exampleInit": {
                "placeHolder": "Enter a Password"
            }
        },
        {
            "name": "passwordStrength",
            "defaultValue": "null",
            "description": "<P>A callback function for defining a custom strength rule. The function has three parameters: </P>\n\r\n<UL><LI>First parameter - the value of the password. \r\n<LI>Second parameter - an object containing the numbers of different types of characters - letters, numbers and special keys. \r\n<LI>Third parameter - the default strength value, based on the built-in rule. </LI></UL>\n\r\n<P><EM style=\"DISPLAY: none\" jQuery1111006901196709762908=\"7\">Note</EM>: The property <CODE style=\"DISPLAY: none\" jQuery1111006901196709762908=\"34\">showStrength</CODE> should be set to <CODE>true</CODE> for <CODE>passwordStrength</CODE> to have an effect. </P>",
            "example": "<pre><CODE>$(\"#jqxPasswordInput\").jqxPasswordInput({ showStrength: true, passwordStrength: function (password, characters, defaultStrength) {\r\n                var length = password.length;\r\n                var letters = characters.letters;\r\n                var numbers = characters.numbers;\r\n                var specialKeys = characters.specialKeys;\r\n                var strengthCoefficient = letters + numbers + 2 * specialKeys + letters * numbers * specialKeys;\r\n                var strengthValue;\r\n                if (length &lt; 4) {\r\n                    strengthValue = \"Too short\";\r\n                } else if (strengthCoefficient &lt; 10) {\r\n                    strengthValue = \"Weak\";\r\n                } else if (strengthCoefficient &lt; 20) {\r\n                    strengthValue = \"Fair\";\r\n                } else if (strengthCoefficient &lt; 30) {\r\n                    strengthValue = \"Good\";\r\n                } else {\r\n                    strengthValue = \"Strong\";\r\n                };\r\n                return strengthValue;\r\n            }\r\n            });\r\n</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/uD5Qz/",
            "exampleDescription": "passwordStrength is set to a custom function",
            "dataType": "Function",
            "ts_dataType": "(password:PasswordInputPasswordStrength['password'], characters:PasswordInputPasswordStrength['characters'], defaultStrength:PasswordInputPasswordStrength['defaultStrength']) => string",
            "exampleInit": {
                "showStrength": "true",
                "passwordStrength": "passwordStrength",
                "exampleData": "var length = password.length;\n        var letters = characters.letters;\n        var numbers = characters.numbers;\n        var specialKeys = characters.specialKeys;\n        var strengthCoefficient = letters + numbers + 2 * specialKeys + letters * numbers * specialKeys;\n        var strengthValue;\n        if (length < 4) {\n          strengthValue = \"Too short\";\n        } else if (strengthCoefficient < 10) {\n          strengthValue = \"Weak\";\n        } else if (strengthCoefficient < 20) {\n          strengthValue = \"Fair\";\n        } else if (strengthCoefficient < 30) {\n          strengthValue = \"Good\";\n        } else {\n          strengthValue = \"Strong\";\n        }\n        return strengthValue;"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Determines whether the right-to-left support is enabled. </P>",
            "example": "<pre><CODE>$('#jqxPasswordInput').jqxPasswordInput({ rtl: true }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/axvSN/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "strengthColors",
            "defaultValue": "{ tooShort: 'rgb(170, 0, 51)', weak: 'rgb(170, 0, 51)', fair: 'rgb(255, 204, 51)', good: 'rgb(45, 152, 243)', strong: 'rgb(118, 194, 97)' }",
            "description": "<P>Sets the the colors used in the tooltip which shows the strength. </P>\n\r\n<P>Default value: </P>\n<PRE><CODE>{ tooShort: \"rgb(170, 0, 51)\", weak: \"rgb(170, 0, 51)\", fair: \"rgb(255, 204, 51)\", good: \"rgb(45, 152, 243)\", strong: \"rgb(118, 194, 97)\" }</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxPasswordInput').jqxPasswordInput({ strengthColors: { tooShort: \"Red\", weak: \"Red\", fair: \"Yellow\", good: \"Blue\", strong: \"Green\" } }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/YyUu4/",
            "exampleDescription": "strengthColors is set to a custom object",
            "dataType": "object",
            "ts_dataType": "PasswordInputStrengthColors",
            "exampleInit": {
                "showStrength": "true",
                "strengthColors": "{ tooShort: \"Red\", weak: \"Red\", fair: \"Yellow\", good: \"Blue\", strong: \"Green\" }"
            }
        },
        {
            "name": "showStrength",
            "defaultValue": "false",
            "description": "<P>Gets or sets whether a tooltip which shows the password's strength will be shown. </P>",
            "example": "<pre><CODE>$('#jqxPasswordInput').jqxPasswordInput({ showStrength: true }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/m5EbW/",
            "exampleDescription": "showStrength is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showStrength": "true"
            }
        },
        {
            "name": "showStrengthPosition",
            "defaultValue": "\"right\"",
            "description": "<P>Gets or sets the position of the tooltip which shows the password strength.<BR>Possible values: </P>\n\r\n<UL><LI>\"top\" \r\n<LI>\"bottom\" \r\n<LI>\"left\" \r\n<LI>\"right\" </LI></UL>\n\r\n<P><EM style=\"DISPLAY: none\" jQuery1111006901196709762908=\"12\">Note</EM>: The property <CODE style=\"DISPLAY: none\" jQuery1111006901196709762908=\"39\">showStrength</CODE> should be set to <CODE>true</CODE> for <CODE>showStrengthPosition</CODE> to have an effect. </P>",
            "example": "<pre><CODE>$('#jqxPasswordInput').jqxPasswordInput({ showStrengthPosition: \"none\" });\r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/2ByaM/",
            "exampleDescription": "showStrengthPosition is set to 'left'",
            "dataType": "string",
            "ts_dataType": "enum:PasswordInputShowStrengthPosition",
            "exampleInit": {
                "showStrength": "true",
                "showStrengthPosition": "bottom"
            }
        },
        {
            "name": "strengthTypeRenderer",
            "defaultValue": "null",
            "description": "<P>A callback function for custom rendering of the tooltip which shows the password strength. The function has three parameters: </P>\n\r\n<UL><LI>First parameter - the value of the password. \r\n<LI>Second parameter - an object containing the numbers of different types of characters - letters, numbers and special keys. \r\n<LI>Third parameter - the default strength value, based on the built-in rule. </LI></UL>\n\r\n<P><EM style=\"DISPLAY: none\" jQuery1111006901196709762908=\"14\">Note</EM>: The property <CODE style=\"DISPLAY: none\" jQuery1111006901196709762908=\"41\">showStrength</CODE> should be set to <CODE>true</CODE> for <CODE>strengthTypeRenderer</CODE> to have an effect. </P>",
            "example": "<pre><CODE>$(\"#jqxPasswordInput\").jqxPasswordInput({ showStrength: true, strengthTypeRenderer: function (password, characters, defaultStrength) {\r\n                var length = password.length;\r\n                var letters = characters.letters;\r\n                var numbers = characters.numbers;\r\n                var specialKeys = characters.specialKeys;\r\n                var strengthCoefficient = letters + numbers + 2 * specialKeys + letters * numbers / 2 + length;\r\n                var strengthValue;\r\n                var color;\r\n                if (length &lt; 8) {\r\n                    strengthValue = \"Too short\";\r\n                    color = \"rgb(170, 0, 51)\";\r\n                } else if (strengthCoefficient &lt; 20) {\r\n                    strengthValue = \"Weak\";\r\n                    color = \"rgb(170, 0, 51)\";\r\n                } else if (strengthCoefficient &lt; 30) {\r\n                    strengthValue = \"Fair\";\r\n                    color = \"rgb(255, 204, 51)\";\r\n                } else if (strengthCoefficient &lt; 40) {\r\n                    strengthValue = \"Good\";\r\n                    color = \"rgb(45, 152, 243)\";\r\n                } else {\r\n                    strengthValue = \"Strong\";\r\n                    color = \"rgb(118, 194, 97)\";\r\n                };\r\n                return \"&lt;div style='color: \" + color + \";'&gt;\" + strengthValue + \"&lt;/div&gt;\";\r\n            }\r\n            });\r\n</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/N3zHM/",
            "exampleDescription": "strengthTypeRenderer is set to a custom function",
            "dataType": "Function",
            "ts_dataType": "(password:PasswordInputStrengthTypeRenderer['password'], characters:PasswordInputStrengthTypeRenderer['characters'], defaultStrength:PasswordInputStrengthTypeRenderer['defaultStrength']) => string",
            "exampleInit": {
                "showStrength": "true",
                "strengthTypeRenderer": "strengthTypeRenderer",
                "exampleData": "var length = password.length;\n        var letters = characters.letters;\n        var numbers = characters.numbers;\n        var specialKeys = characters.specialKeys;\n        var strengthCoefficient = letters + numbers + 2 * specialKeys + letters * numbers * specialKeys;\n        var strengthValue;\n        var color;\n        if (length < 8) {\n          strengthValue = \"Too short\";\n          color = \"rgb(170, 0, 51)\";\n        } else if (strengthCoefficient < 20) {\n          strengthValue = \"Weak\";\n          color = \"rgb(170, 0, 51)\";\n        } else if (strengthCoefficient < 30) {\n          color = \"rgb(255, 204, 51)\";\n          strengthValue = \"Fair\";\n        } else if (strengthCoefficient < 40) {\n          strengthValue = \"Good\";\n          color = \"rgb(45, 152, 243)\";\n        } else {\n          strengthValue = \"Strong\";\n          color = \"rgb(118, 194, 97)\";\n        }\n        return \"&lt;div style='color: \" + color + \";'>\" + strengthValue + \"&lt;/div>\";"
            }
        },
        {
            "name": "showPasswordIcon",
            "defaultValue": "true",
            "description": "<P>Gets or sets whether the Show/Hide password icon will appear. </P>",
            "example": "<pre><CODE>$('#jqxPasswordInput').jqxPasswordInput({ showPasswordIcon: false }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/daTQ5/",
            "exampleDescription": "showPasswordIcon is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showPasswordIcon": "false"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n &lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt; </CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it.",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/rbW32/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "width",
            "defaultValue": "\"auto\"",
            "description": "<P>Gets or sets the widget's width. The value may be \"auto\", a number or a string like \"Npx\", where N is a number. </P>",
            "example": "<pre><CODE>$('#jqxPasswordInput').jqxPasswordInput({ width: \"150px\" }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Ek4Yb/",
            "exampleDescription": "width is set to '250px'",
            "dataType": "number",
            "ts_dataType": "string | number",
            "exampleInit": {
                "width": "200"
            }
        }
    ],
    "events": [
        {
            "name": "change",
            "description": "<P>This event is triggered when the value in the input is changed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/7fs2J/",
            "exampleDescription": "Bind to the change event by type: jqxPasswordInput.",
            "example": "<PRE><CODE>$('#jqxPasswordInput').on('change', function (event) { \r\n                              var type = event.args.type; // keyboard or null depending on how the value was changed.\r\n                            }); </CODE></PRE>"
        }
    ],
    "methods": [
        {
            "name": "render",
            "description": "<P>Renders the widget. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/rtLFU/",
            "exampleDescription": "renders the jqxPasswordInput.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "refresh",
            "description": "<P>Refreshes the widget. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/SvZJb/",
            "exampleDescription": "refresh the jqxPasswordInput.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "val",
            "description": "<P>Gets or sets the password. If the parameter is set, sets the value of the password in the input. If there is no parameter set, returns the string value of the password. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Z59s5/",
            "exampleDescription": "sets new value of the jqxPasswordInput.",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "value",
                    "dataType": "string",
                    "description": "",
                    "optional": true
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxPasswordInput ref=\"myPasswordInput\" />\n&lt;/template>\n\n&lt;script>\n  import JqxPasswordInput from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpasswordinput.vue';\n\n  export default {\n    components: {\n      JqxPasswordInput\n    },\n    mounted: function () {\n      this.$refs.myPasswordInput.val('password');\n    }\n  }\n&lt;/script>"
            }
        }
    ]
}