{
    "widget": {
        "name": "jqxTreeMap",
        "description": "Displays hierarchical data as a set of nested rectangles. Each branch of the tree is given a rectangle, which is then tiled with smaller rectangles representing sub-branches. A leaf node's rectangle has an area proportional to a specified dimension on the data.",
        "angular2": {
            "name": "jqxTreeMapComponent",
            "selector": "jqxTreeMap"
        }
    },
    "dataTypes": [
        {
            "name": "TreeMapColorMode",
            "ts_dataType": "enum",
            "enumOptions": [ "parent", "autoColors", "rangeColors" ]
        },
        {
            "name": "TreeMapColorRanges",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "color",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Color",
                    "defaultValue": ""
                },
                {
                    "name": "min",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Min",
                    "defaultValue": ""
                },
                {
                    "name": "max",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Max",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "TreeMapLegendPosition",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "x",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "X",
                    "defaultValue": ""
                },
                {
                    "name": "y",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Y",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "TreeMapLegendScaleCallback",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "v",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "V",
                    "defaultValue": ""
                }
            ]
        }
    ],
    "exampleElementsInit": {
        "source": "source",
        "colorRange": 50
    },
    "exampleInit": {
        "source": "source",
        "colorRange": 50
    },
    "exampledInitExtraData": {
        "properties": "source: [{ label: 'USA', value: 104 },\n            { label: 'Republic of China', value: 88 },\n            { label: 'Great Britain', value: 65 },\n            { label: 'Russian Federation', value: 82 }]",
        "beforeCreate": "",
        "mounted": "",
        "methods": ""
    },
    "properties": [
        {
            "name": "baseColor",
            "defaultValue": "'#C2EEFF'",
            "description": "<P>Sets or gets the default color used when the <CODE>colorMode</CODE> property is set to <CODE>\"autoColors\"</CODE>. </P>",
            "example": "<pre><CODE>$(\"#jqxTreeMap\").jqxTreeMap({baseColor: '#ff0000'}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/s2gQU/",
            "exampleDescription": "baseColor is set to '#52CBFF'",
            "dataType": "string",
            "exampleInit": {
                "baseColor": "#C2EEAA"
            }
        },
        {
            "name": "colorRanges",
            "defaultValue": "[ { color: '#aa9988', min: 0, max: 10 }, { color: '#ccbbcc', min: 11, max: 50 }, { color: '#000', min: 50, max: 100 } ];",
            "description": "<P>Sets or gets the color ranges used when the <CODE>colorMode</CODE> property is set to <CODE>\"rangeColors\"</CODE> </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>colorRanges</CODE> property. </P>\n<PRE><CODE>\r\n$('#jqxTreeMap').jqxTreeMap({ colorRanges:\r\n[\r\n    { color: '#aa9988', min: 0,  max: 10  },\r\n    { color: '#ccbbcc', min: 11, max: 50  },\r\n    { color: '#000',    min: 50, max: 100 }\r\n]\r\n});\r\n</CODE></PRE>\n\r\n<P>Get the <CODE>colorRanges</CODE> property. </P>\n<PRE><CODE>var colorRanges = $('#jqxTreeMap').jqxTreeMap('colorRanges'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9GLUb/",
            "exampleDescription": "colorRanges is set to {x: 5, y: 0}",
            "dataType": "Array | object",
            "ts_dataType": "Array<TreeMapColorRanges>",
            "exampleInit": {
                "colorRanges": "colorRanges",
                "colorMode": "'rangeColors'",
                "exampleData": "[\n          { color: '#52CBFF', min: 0, max: 85 },\n          { color: '#52CBAA', min: 86, max: 105 }\n        ]"
            }
        },
        {
            "name": "colorRange",
            "defaultValue": "100",
            "description": "<P>Sets or gets the range in which the base colors can vary. The value is expected to be from 0 to 255. </P>",
            "example": "<pre><CODE>$(\"#jqxTreeMap\").jqxTreeMap({colorRange: 120}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/sCVj7/",
            "exampleDescription": "colorRange is set to 100",
            "dataType": "number",
            "exampleInit": {
                "colorRange": "100"
            }
        },
        {
            "name": "colorMode",
            "defaultValue": "'parent'",
            "description": "<P>Sets or gets the sectors rendering behavior. </P>\n\r\n<UL><LI>parent - a child sector inherits the color from its parent sector. Depending on the child value and the colorRange property the color varies. \r\n<LI>autoColors - automatic color generation based on the baseColor/colorRange and the value. \r\n<LI>rangeColors - the user can sets array of color ranges. Each color range has the properties min, max and color. </LI></UL>",
            "example": "<pre><CODE>$(\"#jqxTreeMap\").jqxTreeMap({colorMode: 'rangeColors'}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/meV3S/",
            "exampleDescription": "colorMode is set to 'autoColors'",
            "dataType": "string",
            "ts_dataType": "enum:TreeMapColorMode",
            "exampleInit": {
                "colorMode": "autoColors"
            }
        },
        {
            "name": "displayMember",
            "defaultValue": "\"\"",
            "description": "<P>Sets or gets the <CODE>displayMember</CODE> property. The <CODE>displayMember</CODE> determines the name of an object property to display. The name is contained in the collection specified by the <CODE>source</CODE> property and the name is stored in the <CODE>label</CODE> field of each sector. The property is taken into account when the jqxTreeMap's <CODE>source</CODE> property points to jqxDataAdapter instance. </P>",
            "example": "<pre><CODE>$(\"#jqxTreeMap\").jqxTreeMap({displayMember: 'firstName'});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tqyTv/",
            "exampleDescription": "displayMember is set to label",
            "dataType": "string",
            "exampleInit": {
                "displayMember": "label"
            }
        },
        {
            "name": "height",
            "defaultValue": "600",
            "description": "<P>Sets or gets the jqxTreeMap's height. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$('#jqxTreeMap').jqxTreeMap({height:\"400px\"});</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxTreeMap').jqxTreeMap('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/cT6ct/",
            "exampleDescription": "height is set to 300",
            "dataType": "number",
            "ts_dataType": "string | number",
            "exampleInit": {
                "height": "500"
            }
        },
        {
            "name": "hoverEnabled",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether a sector will be outlined when the mouse cursor is over it. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>hoverEnabled</CODE> property. </P>\n<PRE><CODE>$('#jqxTreeMap').jqxTreeMap({ hoverEnabled: true }); </CODE></PRE>\n\r\n<P>Get the <CODE>hoverEnabled</CODE> property. </P>\n<PRE><CODE>var hoverEnabled = $('#jqxTreeMap').jqxTreeMap('hoverEnabled'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ytcps/",
            "exampleDescription": "hoverEnabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "hoverEnabled": "true"
            }
        },
        {
            "name": "headerHeight",
            "defaultValue": "25",
            "description": "<P>Sets or gets the height of the parent sector's header. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>headerHeight</CODE> property. </P>\n<PRE><CODE>$('#jqxTreeMap').jqxTreeMap({ headerHeight: 30 }); </CODE></PRE>\n\r\n<P>Get the <CODE>headerHeight</CODE> property. </P>\n<PRE><CODE>var headerHeight = $('#jqxTreeMap').jqxTreeMap('headerHeight'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ru9f6/",
            "exampleDescription": "headerHeight is set to 30",
            "dataType": "number",
            "exampleInit": {
                "headerHeight": "30"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxTreeMap ref=\"myTreeMap\"\n    :source=\"source\" :colorRange=\"50\" :headerHeight=\"30\" />\n&lt;/template>\n \n&lt;script>\n  import JqxTreeMap from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxtreemap.vue';\n \n  export default {\n    components: {\n      JqxTreeMap\n    },\n    data: function () {\n      return {\n        source: [\n          { label: 'East', value: null },\n          { label: 'West', value: null },\n          { label: 'USA', value: 104, parent: 'West' },\n          { label: 'Republic of China', value: 88, parent: 'East' },\n          { label: 'Great Britain', value: 65, parent: 'West' },\n          { label: 'Russian Federation', value: 82, parent: 'East' }\n        ]\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "legendLabel",
            "defaultValue": "\"Legend\"",
            "description": "<P>Sets or gets the Legend's label. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>legendLabel</CODE> property. </P>\n<PRE><CODE>$('#jqxTreeMap').jqxTreeMap({ legendLabel: \"New Label\" }); </CODE></PRE>\n\r\n<P>Get the <CODE>legendLabel</CODE> property. </P>\n<PRE><CODE>var legendLabel = $('#jqxTreeMap').jqxTreeMap('legendLabel'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vPcGX/",
            "exampleDescription": "legendLabel is set to 'Olympic medal count - London 2012'",
            "dataType": "string",
            "exampleInit": {
                "legendLabel": "'Olympic medal count - London 2012'",
                "colorMode": "'autoColors'"
            }
        },
        {
            "name": "legendPosition",
            "defaultValue": "{ x: 0, y: -5 }",
            "description": "<P>Sets or gets the Legend's position. The <CODE>x</CODE> determines the X offset of the Legend from the left side of the jqxTreeMap. The <CODE>y</CODE> determines the Y offset of the Legend from the bottom side of jqxTreeMap. </P>",
            "example": "<pre><CODE>$(\"#jqxTreeMap\").jqxTreeMap({legendPosition: {x: 50, y: -50}}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3tq3c/",
            "exampleDescription": "legendPosition is set to {x: 5, y: 0}",
            "dataType": "object",
            "ts_dataType": "TreeMapLegendPosition",
            "exampleInit": {
                "legendPosition": "{x: 20, y: 0}",
                "colorMode": "'autoColors'"
            }
        },
        {
            "name": "legendScaleCallback",
            "defaultValue": "null",
            "description": "<P>Sets or gets a callback function which formats the values displayed in the jqxTreeMap's Legend. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>legendScaleCallback</CODE> property . </P>\n<PRE><CODE>\r\n$('#jqxTreeMap').jqxTreeMap({\r\n    width: '600',\r\n    height: '500',\r\n    source: data, \r\n    colorRange: 100,\r\n    colorMode: 'autocolors',\r\n    baseColor: '#52CBFF',\r\n    legendScaleCallback: function (v) {\r\n        v = v.toFixed(1);\r\n        return v;\r\n    },\r\n    legendLabel: 'Olympic medal count - London 2012'\r\n});\r\n                         </CODE></PRE>\n\r\n<P>Get the <CODE>legendScaleCallback</CODE> property. </P>\n<PRE><CODE>var legendScaleCallback = $('#jqxTreeMap').jqxTreeMap('legendScaleCallback '); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zeLgR/",
            "exampleDescription": "legendScaleCallback is set to a custom function",
            "dataType": "Function",
            "ts_dataType": "(v: TreeMapLegendScaleCallback['v']) => string | number",
            "exampleInit": {
                "colorMode": "'autoColors'",
                "legendScaleCallback": "legendScaleCallback",
                "exampleData": "v = v.toFixed(1);\n        return v;"
            }
        },
        {
            "name": "renderCallbacks",
            "defaultValue": "null",
            "description": "<P>Sets or gets callback function(s) which enable you to customize the rendering of any sector in the jqxTreeMap. To define a callback function for all sectors, use the \"*\" : function(sectorHtmlElement, sectorData) syntax. To define a callback function for a specific element, use its <CODE>label</CODE> value instead of \"*\".</P>",
            "example": "<pre><CODE>              \r\n$('#jqxTreeMap').jqxTreeMap({\r\n    renderCallbacks: {\r\n        '*': function (sectorHtmlElement, sectorData) {\r\n            if (sectorData.data) {\r\n                sectorHtmlElement.jqxTooltip({\r\n                    content: \"content\",\r\n                    position: 'mouse',\r\n                    autoHideDelay: 6000,\r\n                    theme: theme\r\n                });\r\n            } else if (sectorData.data === undefined) {\r\n                sectorHtmlElement.css({\r\n                    backgroundColor: '#fff',\r\n                    border: '1px solid #aaa'\r\n                });\r\n            }\r\n        }\r\n    }\r\n});\r\n                 </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/67C6N/",
            "exampleDescription": "renderCallbacks is set to a custom function",
            "dataType": "object",
            "ts_dataType": "any",
            "exampleInit": {
                "renderCallbacks": "renderCallbacks",
                "exampleData": "{\n            '*': function (element, data) {\n                element.css({\n                    color: '#ffffff'\n                });\n                element.html('&lt;span style=\"font-size: 11px;\" class=\"jqx-treemap-label\">' + data.label + ', ' + data.value + '&lt;/span>');\n                return true;\n            }\n        }"
            }
        },
        {
            "name": "selectionEnabled",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether a sector will be outlined when it is clicked.. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>selectionEnabled</CODE> property. </P>\n<PRE><CODE>$('#jqxTreeMap').jqxTreeMap({ selectionEnabled: false }); </CODE></PRE>\n\r\n<P>Get the <CODE>selectionEnabled</CODE> property. </P>\n<PRE><CODE>var selectionEnabled = $('#jqxTreeMap').jqxTreeMap('selectionEnabled'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/BeCqr/",
            "exampleDescription": "selectionEnabled is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "selectionEnabled": "false"
            }
        },
        {
            "name": "showLegend",
            "defaultValue": "true",
            "description": "<P>Determines whether the jqxTreeMap's Legend is displayed. Legend is possible to be displayed when the <CODE>colorMode</CODE> property is set to <CODE>\"autoColors\"</CODE> or <CODE>\"rangeColors\"</CODE>. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>showLegend</CODE> property. </P>\n<PRE><CODE>$('#jqxTreeMap').jqxTreeMap({ showLegend: false }); </CODE></PRE>\n\r\n<P>Get the <CODE>enableHover</CODE> property. </P>\n<PRE><CODE>var showLegend = $('#jqxTreeMap').jqxTreeMap('showLegend'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/UBYD8/",
            "exampleDescription": "showLegend is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showLegend": "false",
                "colorMode": "'autoColors'"
            }
        },
        {
            "name": "source",
            "defaultValue": "null",
            "description": "<P>Specifies the jqxTreeMap's data source. Use this property to populate the jqxTreeMap. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Initialize a jqxTreeMap with the <CODE>source</CODE> property specified. </P>\n<PRE><CODE>\r\nvar data = [\r\n{\r\n    label: 'Drama',\r\n    value: null,\r\n    color: '#B3FAFF'\r\n},\r\n{\r\n    label: 'Crime',\r\n    value: null,\r\n    color: '#95FF7A'\r\n},\r\n{\r\n    label: 'Action',\r\n    value: null,\r\n    color: '#FFA3CE'\r\n},\r\n{\r\n    label: 'Comedy',\r\n    value: null,\r\n    color: '#F1A3FF'\r\n},\r\n{\r\n    label: 'The Shawshank Redemption',\r\n    value: 15.4,\r\n    parent: 'Drama',\r\n    data: { description: \"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.\", title: \"The Shawshank Redemption (1994)\" }\r\n},\r\n{\r\n    label: 'Top Gun',\r\n    value: 4,\r\n    parent: 'Drama',\r\n    data: { description: \"As students at the Navy's elite fighter weapons school compete to be best in the class, one daring young flyer learns a few things from a civilian instructor that are not taught in the classroom.\", title: \"Top Gun (1986)\" }\r\n},\r\n{\r\n    label: 'The Master',\r\n    value: 4.5,\r\n    parent: 'Drama',\r\n    data: { description: \"A Naval veteran arrives home from war unsettled and uncertain of his future - until he is tantalized by The Cause and its charismatic leader.\", title: \"The Master (2012)\" }\r\n},\r\n{\r\n    label: 'Argo',\r\n    value: 6.8,\r\n    parent: 'Drama',\r\n    data: { description: \"A dramatization of the 1980 joint CIA-Canadian secret operation to extract six fugitive American diplomatic personnel out of revolutionary Iran.\", title: \"Argo (2012)\" }\r\n},\r\n{\r\n    label: 'Fight Club',\r\n    value: 8.8,\r\n    parent: 'Crime',\r\n    data: { description: \"An insomniac office worker looking for a way to change his life crosses paths with a devil-may-care soap maker and they form an underground fight club that evolves into something much, much more.\", title: \"Fight Club (1999)\" }\r\n},\r\n{\r\n    label: 'The Godfather',\r\n    value: 11,\r\n    parent: 'Crime',\r\n    data: { description: \"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.\", title: \"The Godfather (1972)\" }\r\n},\r\n{\r\n    label: 'The Dark Knight',\r\n    value: 8.9,\r\n    parent: 'Action',\r\n    data: { description: \"When Batman, Gordon and Harvey Dent launch an assault on the mob, they let the clown out of the box, the Joker, bent on turning Gotham on itself and bringing any heroes down to his level.\", title: \"The Dark Knight (2008)\" }\r\n},\r\n{\r\n    label: 'Pulp Fiction',\r\n    value: 6.0,\r\n    parent: 'Crime',\r\n    data: { description: \"The lives of two mob hit men, a boxer, a gangster's wife, and a pair of diner bandits intertwine in four tales of violence and redemption.\", title: \"Pulp Fiction (1994)\" }\r\n},\r\n{\r\n    label: 'Forrest Gump',\r\n    value: 8.7,\r\n    parent: 'Drama',\r\n    data: { description: \"Forrest Gump, while not intelligent, has accidentally been present at many historic moments, but his true love, Jenny Curran, eludes him.\", title: \"Forrest Gump (1994)\" }\r\n},\r\n{\r\n    label: 'The Matrix',\r\n    value: 8.7,\r\n    parent: 'Action',\r\n    data: { description: \"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.\", title: \"The Matrix (1999)\" }\r\n},\r\n{\r\n    label: '12 Angry Men',\r\n    value: 7.9,\r\n    parent: 'Drama',\r\n    data: { description: \"Twelve men must decide the fate of one when one juror objects to the jury's decision.\", title: \"12 Angry Men (TV 1997)\" }\r\n},\r\n{\r\n    label: 'Star Wars',\r\n    value: 10.8,\r\n    parent: 'Action',\r\n    data: { description: \"Luke Skywalker, a spirited farm boy, joins rebel forces to save Princess Leia from the evil Darth Vader, and the galaxy from the Empire's planet-destroying Death Star..\", title: \"Star Wars: Episode IV - A New Hope (1977)\" }\r\n},\r\n{\r\n    label: 'Inception',\r\n    value: 9.8,\r\n    parent: 'Action',\r\n    data: { description: \"A skilled extractor is offered a chance to regain his old life as payment for a task considered to be impossible.\", title: \"Inception (2010)\" }\r\n},\r\n{\r\n    label: 'Snatch.',\r\n    value: 4.3,\r\n    parent: 'Crime',\r\n    data: { description: \"Unscrupulous boxing promoters, violent bookmakers, a Russian gangster, incompetent amateur robbers, and supposedly Jewish jewelers fight to track down a priceless stolen diamond.\", title: \"Snatch (2000)\" }\r\n},\r\n{\r\n    label: 'Toy Story',\r\n    value: 9.3,\r\n    parent: 'Comedy',\r\n    data: { description: \"A cowboy doll is profoundly threatened and jealous when a new spaceman figure supplants him as top toy in a boy's room.\", title: \"Toy Story(2005)\" }\r\n},\r\n{\r\n    label: 'Skyfall',\r\n    value: 7,\r\n    parent: 'Crime',\r\n    data: { description: \"Bond's loyalty to M is tested when her past comes back to haunt her. Whilst MI6 comes under attack, 007 must track down and destroy the threat, no matter how personal the cost.\", title: \"Skyfall (2012)\" }\r\n},\r\n{\r\n    label: 'Parker',\r\n    value: 5.6,\r\n    parent: 'Crime',\r\n    data: { description: \"A thief with a unique code of professional ethics is double-crossed by his crew and left for dead. Assuming a new disguise and forming an unlikely alliance with a woman on the inside, he looks to hijack the score of the crew's latest heist.\", title: \"Parker (1994)\" }\r\n},\r\n{\r\n    label: 'District 9',\r\n    value: 6.0,\r\n    parent: 'Action',\r\n    data: { description: \"An extraterrestrial race forced to live in slum-like conditions on Earth suddenly finds a kindred spirit in a government agent who is exposed to their biotechnology.\", title: \"District 9 (2009)\" }\r\n},\r\n{\r\n    label: 'Stalag 17',\r\n    value: 6.1,\r\n    parent: 'Comedy',\r\n    data: { description: \"When two escaping American World War II prisoners are killed, the German POW camp barracks black marketeer, J.J. Sefton, is suspected of being an informer.\", title: \"Stalag 17 (1953)\"}\r\n}\r\n];\r\n  \r\nvar theme = \"\";\r\n\r\n$('#jqxTreeMap').jqxTreeMap({\r\n    width: 600,\r\n    height: 600,\r\n    source: data,\r\n    \r\n    colorRange: 50,\r\n    renderCallbacks: {\r\n        '*': function (element, value) {\r\n            if (value.data) {\r\n                element.jqxTooltip({\r\n<PRE class=code style=\"MAX-WIDTH: 700px; WIDTH: 700px; MARGIN: 10px\">                    content: <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;div&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;div style=<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"font-weight: bold; max-width: 200px; font-family: verdana; font-size: 13px;\"&gt;</SPAN>' + value.data.title + '<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/div&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;div style=\"width: 200px; font-family: verdana; font-size: 12px;\"</SPAN>&gt;</SPAN>' + value.data.description + '<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/div&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/div&gt;</SPAN>'</SPAN>,<DIV><DIV></DIV></DIV></PRE>\r\n                    position: 'mouse',\r\n                    autoHideDelay: 6000,\r\n                    theme: theme\r\n                });\r\n            } else if (value.data === undefined) {\r\n                element.css({\r\n                    backgroundColor: '#fff',\r\n                    border: '1px solid #aaa'\r\n                });\r\n            }\r\n        }\r\n    }\r\n});\r\n});\r\n                        </CODE></PRE>\n<CODE>label</CODE>\n<CODE>value</CODE>\n<CODE>parent</CODE>\n<CODE>label</CODE>\n<CODE>data</CODE>\n<CODE>color</CODE>\n<CODE>label</CODE>\n<CODE>value</CODE>\n<CODE>displayMember</CODE>\n<CODE>valueMember</CODE>\n\r\n<P>Initialize jqxTreeMap through jqxDataAdapter</P>\n<PRE>                            <CODE>\r\nvar source = {\r\n    datatype: \"tab\",\r\n    datafields: [\r\n        { name: 'Year' },\r\n        { name: 'HPI' },\r\n        { name: 'BuildCost' },\r\n        { name: 'Population' },\r\n        { name: 'Rate' }\r\n    ],\r\n    url: '../sampledata/homeprices.txt'\r\n};\r\n\r\nvar dataAdapter = new $.jqx.dataAdapter(source, { async: false, autoBind: true, loadError: function (xhr, status, error) { alert('Error loading \"' + source.url + '\" : ' + error); } });\r\n\r\n$('#jqxTreeMap').jqxTreeMap({\r\nwidth: '600',\r\nheight: '500',\r\nsource: dataAdapter,\r\ndisplayMember: 'Year',\r\nvalueMember: 'Rate',\r\ncolorMode: 'rangeColors',\r\ncolorRanges: [\r\n    { min: 0.02, max: 0.03, color: '#ff0300' },\r\n    { min: 0.03, max: 0.04, color: '#fe2e00' },\r\n    { min: 0.04, max: 0.05, color: '#fe3900' },\r\n    { min: 0.05, max: 0.06, color: '#ff5400' },\r\n    { min: 0.06, max: 0.07, color: '#fe7500' },\r\n    { min: 0.07, max: 0.08, color: '#fe8200' },\r\n    { min: 0.08, max: 0.09, color: '#ffed00' },\r\n    { min: 0.09, max: 0.1, color: '#b8db00' },\r\n    { min: 0.1, max: 0.11, color: '#7fbf00' },\r\n    { min: 0.11, max: 0.12, color: '#50a600' },\r\n    { min: 0.12, max: 0.15, color: '#008000' }\r\n],\r\nlegendScaleCallback: function (v) {\r\n    return v;\r\n},\r\nrenderCallbacks: {\r\n    '*': function (element, data) {\r\n    <PRE class=code style=\"MAX-WIDTH: 700px; WIDTH: 700px; MARGIN: 10px\">        var content = <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;div&gt;</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;div style=<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"font-weight: bold; font-family: verdana; font-size: 13px;\"</SPAN>&gt;</SPAN>Year: ' + data.record.Year + '<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/div&gt;</SPAN>'</SPAN>;<DIV>        content += <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;div style=<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\" font-family: verdana; font-size: 12px;\"</SPAN>&gt;</SPAN>HPI: ' + data.record.HPI + '<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/div&gt;</SPAN>'</SPAN>;<DIV>        content += <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;div style=<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\" font-family: verdana; font-size: 12px;\"</SPAN>&gt;</SPAN>Build Cost: ' + data.record.BuildCost + '<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/div&gt;</SPAN>'</SPAN>;<DIV>        content += <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;div style=<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\" font-family: verdana; font-size: 12px;\"</SPAN>&gt;</SPAN>Population: ' + data.record.Population + '<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/div&gt;</SPAN>'</SPAN>;<DIV>        content += <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;div style=<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\" font-family: verdana; font-size: 12px;\"</SPAN>&gt;</SPAN>Interest Rate: ' + data.record.Rate + '<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/div&gt;</SPAN>'</SPAN>;<DIV>        content += <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'<SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/div&gt;</SPAN>'</SPAN>;<DIV></DIV></DIV></DIV></DIV></DIV></DIV></PRE>\r\n\r\n        element.jqxTooltip({\r\n            content: content,\r\n            position: 'mouse',\r\n            autoHideDelay: 6000\r\n        });\r\n\r\n    }\r\n},\r\nlegendLabel: 'Interest Rate'\r\n});\r\n                            </CODE>\r\n                        </PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Axh7c/",
            "exampleDescription": "source is set to data",
            "dataType": "object | Array",
            "ts_dataType": "any"
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n<PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;\r\n</CODE></PRE>\r\n</CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vDecH/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "valueMember",
            "defaultValue": "\"\"",
            "description": "<P>Sets or gets the <CODE>valueMember</CODE> property. The <CODE>valueMember</CODE> determines the name of an object property to set as a <CODE>value</CODE> of the treemap sectors. The name is contained in the collection specified by the <CODE>source</CODE> property. The property is taken into account when the jqxTreeMap's <CODE>source</CODE> property points to jqxDataAdapter instance. </P>",
            "example": "<pre><CODE>$(\"#jqxTreeMap\").jqxTreeMap({valueMember: 'population'});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/BAefX/",
            "exampleDescription": "valueMember is set to value",
            "dataType": "string",
            "exampleInit": {
                "valueMember": "value"
            }
        },
        {
            "name": "width",
            "defaultValue": "600",
            "description": "<P>Sets or gets the jqxTreeMap's width. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$('#jqxTreeMap').jqxTreeMap({width:\"200px\"});</CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxTreeMap').jqxTreeMap('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/S8Stm/",
            "exampleDescription": "width is set to 400",
            "dataType": "number",
            "ts_dataType": "string | number",
            "exampleInit": {
                "width": "500"
            }
        }
    ],
    "events": [
        {
            "name": "bindingComplete",
            "description": "<P>This event is triggered when the jqxTreeMap's <CODE>source</CODE> property is set to point to jqxDataAdapter instance and the jqxDataAdapter's binding is finished. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>bindingComplete</CODE> event by type: jqxTreeMap. Note: Bind to that event before the widget's initialization. Otherwise, it is possible that the binding is already completed before you bind to it. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/BrfEL/",
            "exampleDescription": "Bind to the bindingComplete event by type: jqxTreeMap.",
            "example": "<PRE><CODE>$('#jqxTreeMap').on('bindingComplete', function (event) {\r\n\r\n});</CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxTreeMap ref=\"myTreeMap\" @bindingComplete=\"onBindingComplete($event)\"\n        :colorRange=\"50\" />\n&lt;/template>\n\n&lt;script>\n  import JqxTreeMap from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxtreemap.vue';\n\n  export default {\n    components: {\n      JqxTreeMap\n    },\n    data: function () {\n      return {\n        source: [{ label: 'USA', value: 104 },\n        { label: 'Republic of China', value: 88 },\n        { label: 'Great Britain', value: 65 },\n        { label: 'Russian Federation', value: 82 }]\n      }\n    },\n    mounted: function () {\n      this.$refs.myTreeMap.source = this.source;\n    },\n    methods: {\n      onBindingComplete: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n&lt;/script>"
            }
        }
    ],
    "methods": [
        {
            "name": "destroy",
            "description": "<P>Destroy the jqxTreeMap widget. The destroy method removes the jqxTreeMap widget from the web page.</P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/jxusx/",
            "exampleDescription": "destroy the jqxTreeMap.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "render",
            "description": "<P>Renders the jqxTreeMap widget. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/baJ3x/",
            "exampleDescription": "renders the jqxTreeMap.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        }
    ]
}