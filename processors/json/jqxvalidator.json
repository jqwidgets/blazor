{
    "widget": {
        "name": "jqxValidator",
        "description": "Enables you to validate users input.",
        "angular2": {
            "name": "jqxValidatorComponent",
            "selector": "jqxValidator"
        }
    },
    "dataTypes": [
        {
            "name": "ValidatorAnimation",
            "ts_dataType": "enum",
            "enumOptions": [ "fade", "none" ]
        },
        {
            "name": "ValidatorHintType",
            "ts_dataType": "enum",
            "enumOptions": [ "tooltip", "label" ]
        },
        {
            "name": "ValidatorRule",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "input",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Input",
                    "defaultValue": ""
                },
                {
                    "name": "message",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Message",
                    "defaultValue": ""
                },
                {
                    "name": "action",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Action",
                    "defaultValue": ""
                },
                {
                    "name": "rule",
                    "ts_dataType": "string | any",
                    "optional": "true",
                    "displayName": "Rule",
                    "defaultValue": ""
                },
                {
                    "name": "position",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Position",
                    "defaultValue": ""
                },
                {
                    "name": "hintRender",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "Hint Render",
                    "defaultValue": ""
                }
            ]
        }
    ],
    "exampleExtraImport": "jqxButton",
    "exampleExtraTemplate": "<form id='testForm' action='./'>\n       <table class='register-table'>\n         <tr>\n           <td>Username:</td>\n           <td> \n             <input type='text' id='userInput' class='text-input' />\n           </td>\n         </tr>\n         <tr>\n           <td>E-mail:</td>\n           <td>\n             <input type='text' id='emailInput' class='text-input' />\n           </td>\n         </tr>\n       </table>\n     </form>\n     <jqxButton @click='submit()' :width='50'>Submit</jqxButton>\n",
    "exampleElementsInit": {
        "hintType": "label",
        "animationDuration": 0,
        "rules": "rules"
    },
    "exampleInit": {
        "rules": "rules"
    },
    "exampledInitExtraData": {
        "properties": "rules: [{ input: '#userInput', message: 'Username is required!', action: 'blur', rule: 'required' },\n          { input: '#emailInput', message: 'Invalid e-mail!', action: 'blur', rule: 'email' },\n          { input: '#emailInput', message: 'Email is required!', action: 'blur', rule: 'required' }]",
        "beforeCreate": "",
        "mounted": "",
        "methods": "submit: function () {\n        this.$refs.myValidator.validate();\n      }"
    },
    "properties": [
        {
            "name": "arrow",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether the arrow of the hints will be shown. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>arrow</CODE> property. </P>\n<PRE><CODE>$('#jqxValidator').jqxValidator( { arrow: false } ); </CODE></PRE>\n\r\n<P>Get the <CODE>arrow</CODE> property. </P>\n<PRE><CODE>var arrow = $('#jqxValidator').jqxValidator('arrow'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/qeXG7/",
            "exampleDescription": "arrow is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "arrow": "false"
            }
        },
        {
            "name": "animation",
            "defaultValue": "'fade'",
            "description": "<P>Sets or gets the animation of showing, hiding the hints. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'fade'</CODE></PRE>\n<PRE><CODE>'none'</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Initialize a jqxValidator with the <CODE>animation</CODE> property specified. </P>\n<PRE><CODE>$('#jqxValidator').jqxValidator({ animation: 'none' }); </CODE></PRE>\n\r\n<P>Get the <CODE>animation</CODE> property. </P>\n<PRE><CODE>var animation = $('#jqxValidator').jqxValidator('animation'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zUafx/",
            "exampleDescription": "animation is set to 'none'",
            "dataType": "string",
            "ts_dataType": "enum:ValidatorAnimation",
            "exampleInit": {
                "animation": "none"
            }
        },
        {
            "name": "animationDuration",
            "defaultValue": "150",
            "description": "<P>Sets or gets the duration of the animation used for showing/hiding the hints. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>animationDuration</CODE> property. </P>\n<PRE><CODE>$('#jqxValidator').jqxValidator({ animationDuration: 300 }); </CODE></PRE>\n\r\n<P>Get the <CODE>animationDuration</CODE> property. </P>\n<PRE><CODE>var animationDuration = $('#jqxValidator').jqxValidator('animationDuration'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/WWbn6/",
            "exampleDescription": "animationDuration is set to 3000",
            "dataType": "number",
            "exampleInit": {
                "animationDuration": "3000"
            }
        },
        {
            "name": "closeOnClick",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether the hints will be closed when the user click on them. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>closeOnClick</CODE> property. </P>\n<PRE><CODE>$('#jqxValidator').jqxValidator({ closeOnClick: false });\r\n                        </CODE></PRE>\n\r\n<P>Get the <CODE>closeOnClick</CODE> property. </P>\n<PRE><CODE>var closeOnClick = $('#jqxValidator').jqxValidator('closeOnClick'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/n4cRJ/",
            "exampleDescription": "closeOnClick is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "closeOnClick": "false"
            }
        },
        {
            "name": "focus",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether the jqxValidator will focus the first invalid input. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>focus</CODE> property. </P>\n<PRE><CODE>$('#jqxValidator').jqxValidator( { focus: false } ); </CODE></PRE>\n\r\n<P>Get the <CODE>focus</CODE> property. </P>\n<PRE><CODE>var focus = $('#jqxValidator').jqxValidator('focus'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hnVmz/",
            "exampleDescription": "focus is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "focus": "false"
            }
        },
        {
            "name": "hintType",
            "defaultValue": "\"tooltip\"",
            "description": "<P>Sets or gets the hint type. Possible values: 'tooltip' and 'label'.</P>",
            "example": "<pre><CODE>$('#jqxValidator').jqxValidator({hintType : 'label'}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FrpxJ/",
            "exampleDescription": "hintType is set to 'label'",
            "dataType": "string",
            "ts_dataType": "enum:ValidatorHintType",
            "exampleInit": {
                "hintType": "label"
            }
        },
        {
            "name": "onError",
            "defaultValue": "null",
            "description": "<P>Sets or gets callback which will be called on validation error. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>onError</CODE> property . </P>\n<PRE><CODE>$('#jqxValidator').jqxValidator({ onError: function () { alert('You havent filled the form correctly!'); } }); </CODE></PRE>\n\r\n<P>Get the <CODE>onError</CODE> property. </P>\n<PRE><CODE>var onError = $('#jqxValidator').jqxValidator('onError'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/mGqWD/",
            "exampleDescription": "onError is set to a custom function",
            "dataType": "Function",
            "ts_dataType": "() => void",
            "exampleInit": {
                "onError": "onError",
                "exampleData": "alert('You have not filled the form correctly!');"
            }
        },
        {
            "name": "onSuccess",
            "defaultValue": "null",
            "description": "<P>Sets or gets the callback which will be executed on success. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>onSuccess</CODE> property. </P>\n<PRE><CODE>$('#jqxValidator').jqxValidator({ onSuccess: function () { alert('Success!'); } }); </CODE></PRE>\n\r\n<P>Get the <CODE>onSuccess</CODE> property. </P>\n<PRE><CODE>var onSuccess = $('#jqxValidator').jqxValidator('onSuccess'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8CtQU/",
            "exampleDescription": "onSuccess is set to a custom function",
            "dataType": "Function",
            "ts_dataType": "() => void",
            "exampleInit": {
                "onSuccess": "onSuccess",
                "exampleData": "alert('You have filled the form correctly!');"
            }
        },
        {
            "name": "position",
            "defaultValue": "'right'",
            "description": "<P>Sets or gets the default position of the hints. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>position</CODE> property. </P>\n<PRE><CODE>$('#jqxValidator').jqxValidator({ position: 'topcenter' }); </CODE></PRE>\n\r\n<P>Get the <CODE>position</CODE> property. </P>\n<PRE><CODE>var position = $('#jqxValidator').jqxValidator('position'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/d3TyU/",
            "exampleDescription": "position is set to 'left'",
            "dataType": "string",
            "exampleInit": {
                "position": "left"
            }
        },
        {
            "name": "rules",
            "defaultValue": "[]",
            "description": "<P>Sets jqxValidator rules. Format of a single rule is as follows: \n\r\n<P>\n<PRE><CODE>\r\n{ input: 'selector-of-the-input', \r\n    message: 'Custom message on error', \r\n    action: 'Custom action (keyup, change...etc)', \r\n    rule: 'Build rule (ssn, phone, email...) or custom function', \r\n    position: 'Position of the hint (format pos:x,y)', \r\n    hintRender: 'Function for hint rendering' }\r\n                                </CODE></PRE>\n\r\n<P></P>\n\r\n<P></P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Initialize a jqxValidator with the <CODE>rules</CODE> property specified. </P>\n<PRE><CODE>\r\n$('#form').jqxValidator( { rules: [{ input: '#passwordInput', \r\n                                        message: 'The password is required!',\r\n                                        action: 'keyup', \r\n                                        rule: 'required' },\r\n                                    { input: '#passwordInput', \r\n                                        message: 'Your password must be between 4 and 12 characters!', \r\n                                        action: 'keyup', \r\n                                        rule: 'length=4,12' }] } );</CODE></PRE>\n<PRE><CODE>\r\n{ input: '#birthInput', message: 'Your birth date must be between 1/1/1900 and 1/1/2012.', action: 'valuechanged', rule: function () {\r\n    var date = $('#birthInput').jqxDateTimeInput('value');\r\n    var result = date.dateTime.getFullYear() &gt;= 1900 &amp;&amp; date.dateTime.getFullYear() &lt;= 2012;\r\n    return result;\r\n}\r\n                        </CODE></PRE>\n\r\n<P>Set the hintRender property of a rule. </P>\n<PRE><CODE>\r\n$('#sendButton').on('click', function () {\r\n    $('#testForm').jqxValidator('validate');\r\n});\r\n\r\nvar that = this;\r\nvar render = function (message, input) {\r\n    if (that._message) {\r\n        that._message.remove();\r\n    }\r\n    that._message = $(\"<PRE class=code style=\"MAX-WIDTH: 700px; WIDTH: 700px; MARGIN: 10px\"><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;span style=<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">'background: red; color: white;'</SPAN>&gt;</SPAN><SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\" + message + \"</SPAN><SPAN style=\"COLOR: #11a; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">&lt;/span&gt;</SPAN><DIV></DIV></PRE>\")\r\n    that._message.appendTo($(document.body));\r\n    return that._message;\r\n}\r\n\r\n    $('#testForm').jqxValidator({\r\n    rules: [\r\n        { input: '#userInput', message: 'Username is required!', action: 'keyup, blur', rule: 'required', hintRender: render },\r\n        { input: '#userInput', message: 'Your username must be between 3 and 12 characters!', action: 'keyup, blur', rule: 'length=3,12', hintRender: render }\r\n]});\r\n                        </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/GQAfe/",
            "exampleDescription": "rules is set to a custom function",
            "dataType": "Array",
            "ts_dataType": "Array<ValidatorRule>"
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether the validation messages are displayed from the left side instead of the right.</P>",
            "example": "<pre><CODE>$('#jqxValidator').jqxValidator({rtl : true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dvhSq/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        }
    ],
    "events": [
        {
            "name": "validationError",
            "description": "<P>This is triggered when the form is validated with some errors. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>validationError</CODE> event. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/AUGwP/",
            "exampleDescription": "Bind to the validationError event by type jqxValidator.",
            "example": "<PRE><CODE>$('#jqxValidator').on('validationError', function (event) { // Some code here. }); </CODE></PRE>"
        },
        {
            "name": "validationSuccess",
            "description": "<P>This is triggered when the form is validated whithout any errors. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>validationSuccess</CODE> event. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tkUmx/",
            "exampleDescription": "Bind to the validationSuccess event by type jqxValidator.",
            "example": "<PRE><CODE>$('#jqxValidator').on('validationSuccess', function (event) { // Some code here. }); </CODE></PRE>"
        }
    ],
    "methods": [
        {
            "name": "hideHint",
            "description": "<P>Hide all hints for a specific input.</P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9WgYa/",
            "exampleDescription": "hides all hints for a specific input in the jqxValidator.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "id",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'#userInput'" ]
            },
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxValidator ref=\"myValidator\"\n         :rules=\"rules\">\n    &lt;form id='testForm' action='./'>\n      &lt;table class='register-table'>\n        &lt;tr>\n          &lt;td>Username:&lt;/td>\n          &lt;td>\n            &lt;input type='text' id='userInput' class='text-input' />\n          &lt;/td>\n        &lt;/tr>\n        &lt;tr>\n          &lt;td>E-mail:&lt;/td>\n          &lt;td>\n            &lt;input type='text' id='emailInput' class='text-input' />\n          &lt;/td>\n        &lt;/tr>\n      &lt;/table>\n    &lt;/form>\n    &lt;jqxButton @click='submit()' :width='50'>Submit&lt;/jqxButton>\n  &lt;/JqxValidator>\n&lt;/template>\n\n&lt;script>\n  import JqxValidator from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxvalidator.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxValidator,\n      JqxButton\n    },\n    data: function () {\n      return {\n        rules: [{ input: '#userInput', message: 'Username is required!', action: 'blur', rule: 'required' },\n        { input: '#emailInput', message: 'Invalid e-mail!', action: 'blur', rule: 'email' },\n        { input: '#emailInput', message: 'Email is required!', action: 'blur', rule: 'required' }]\n      }\n    },\n    methods: {\n      submit: function () {\n        this.$refs.myValidator.validate();\n      }\n    },\n    mounted: function () {\n      this.$refs.myValidator.validate();\n      this.$refs.myValidator.hideHint('#userInput');\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "hide",
            "description": "<P>Hiding all hints for the current form.</P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/uA6Gt/",
            "exampleDescription": "hides all hints in the jqxValidator.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxValidator ref=\"myValidator\"\n         :rules=\"rules\">\n    &lt;form id='testForm' action='./'>\n      &lt;table class='register-table'>\n        &lt;tr>\n          &lt;td>Username:&lt;/td>\n          &lt;td>\n            &lt;input type='text' id='userInput' class='text-input' />\n          &lt;/td>\n        &lt;/tr>\n        &lt;tr>\n          &lt;td>E-mail:&lt;/td>\n          &lt;td>\n            &lt;input type='text' id='emailInput' class='text-input' />\n          &lt;/td>\n        &lt;/tr>\n      &lt;/table>\n    &lt;/form>\n    &lt;jqxButton @click='submit()' :width='50'>Submit&lt;/jqxButton>\n  &lt;/JqxValidator>\n&lt;/template>\n&lt;script>\n  import JqxValidator from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxvalidator.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxValidator,\n      JqxButton\n    },\n    data: function () {\n      return {\n        rules: [{ input: '#userInput', message: 'Username is required!', action: 'blur', rule: 'required' },\n        { input: '#emailInput', message: 'Invalid e-mail!', action: 'blur', rule: 'email' },\n        { input: '#emailInput', message: 'Email is required!', action: 'blur', rule: 'required' }]\n      }\n    },\n    methods: {\n      submit: function () {\n        this.$refs.myValidator.validate();\n      }\n    },\n    mounted: function () {\n      this.$refs.myValidator.validate();\n      this.$refs.myValidator.hide();\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "updatePosition",
            "description": "<P>Updating the positions of all hints. This is useful for example on window resize.</P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9Xpzn/",
            "exampleDescription": "updates a position of all hints in the jqxValidator.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxValidator ref=\"myValidator\"\n         :rules=\"rules\">\n    &lt;form id='testForm' action='./'>\n      &lt;table class='register-table'>\n        &lt;tr>\n          &lt;td>Username:&lt;/td>\n          &lt;td>\n            &lt;input type='text' id='userInput' class='text-input' />\n          &lt;/td>\n        &lt;/tr>\n        &lt;tr>\n          &lt;td>E-mail:&lt;/td>\n          &lt;td>\n            &lt;input type='text' id='emailInput' class='text-input' />\n          &lt;/td>\n        &lt;/tr>\n      &lt;/table>\n    &lt;/form>\n    &lt;jqxButton @click='submit()' :width='50'>Submit&lt;/jqxButton>\n  &lt;/JqxValidator>\n&lt;/template>\n&lt;script>\n  import JqxValidator from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxvalidator.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxValidator,\n      JqxButton\n    },\n    data: function () {\n      return {\n        rules: [{ input: '#userInput', message: 'Username is required!', action: 'blur', rule: 'required' },\n        { input: '#emailInput', message: 'Invalid e-mail!', action: 'blur', rule: 'email' },\n        { input: '#emailInput', message: 'Email is required!', action: 'blur', rule: 'required' }]\n      }\n    },\n    methods: {\n      submit: function () {\n        this.$refs.myValidator.validate();\n      }\n    },\n    mounted: function () {\n      this.$refs.myValidator.validate();\n      this.$refs.myValidator.updatePosition();\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "validate",
            "description": "<P>Validating the whole form. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hQwmm/",
            "exampleDescription": "validates the jqxValidator.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "htmlElement",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": true
                }
            ]
        },
        {
            "name": "validateInput",
            "description": "<P>Validates a single input. This method accepts a single parameter which is selector of the input you want to validate. Notice that this selector should be the same like the one you've passed in the rules array. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hQwmm/",
            "exampleDescription": "validates an input the jqxValidator.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "id",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'#userInput'" ]
            }
        }
    ]
}