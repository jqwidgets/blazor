{
    "widget": {
        "name": "jqxTextArea",
        "description": "Displays a Text area on a web page.",
        "angular2": {
            "name": "jqxTextAreaComponent",
            "selector": "jqxTextArea"
        }
    },
    "dataTypes": [
        {
            "name": "TextAreaSearchMode",
            "ts_dataType": "enum",
            "enumOptions": [ "none", "contains", "containsignorecase", "equals", "equalsignorecase", "startswithignorecase", "startswith", "endswithignorecase", "endswith" ]
        }
    ],
    "exampleElementsInit": {
        "source": "countries"
    },
    "exampleInit": {
        "width": "200",
        "height": "50",
        "placeHolder": "'Enter a Country'"
    },
    "properties": [
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Enables or disables the jqxTextArea. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$('#jqxTextArea').jqxTextArea({ disabled: false });</CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxTextArea').jqxTextArea('disabled');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/7j7xvxps/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "displayMember",
            "defaultValue": "''",
            "description": "<P>Sets or gets the displayMember of the Items. The displayMember specifies the name of an object property to display. The name is contained in the collection specified by the 'source' property. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>displayMember</CODE> property. </P>\n<PRE><CODE>$(\"#jqxTextArea\").jqxTextArea({ displayMember: 'firstName' });</CODE></PRE>\n\r\n<P>Get the <CODE>displayMember</CODE> property. </P>\n<PRE><CODE>var displayMember = $('#jqxTextArea').jqxTextArea('displayMember'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/pqsha39g/",
            "exampleDescription": "displayMember is set to \"ContactName\"",
            "dataType": "string",
            "exampleInit": {
                "displayMember": "displayMember",
                "source": "source",
                "exampleData": "moreThanOnePropsExample;'ContactName';[{ 'CompanyName': 'Company1',  'ContactName': 'Ana' }, { 'CompanyName': 'Company2', 'ContactName': 'Maria' }]"
            }
        },
        {
            "name": "dropDownWidth",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxTextArea's dropdown (pop-up) width. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>dropDownWidth</CODE> property. </P>\n<PRE><CODE>$('#jqxTextArea').jqxTextArea({ dropDownWidth: 200 });</CODE></PRE>\n\r\n<P>Get the <CODE>dropDownWidth</CODE> property. </P>\n<PRE><CODE>var dropDownWidth = $('#jqxTextArea').jqxTextArea('dropDownWidth');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/eq5z2juf/",
            "exampleDescription": "dropDownWidth is set to 300",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "dropDownWidth": "dropDownWidth",
                "source": "source",
                "exampleData": "moreThanOnePropsExample;300;[ 'Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Brazil', 'Brunei', 'Bulgaria' ]"
            }
        },
        {
            "name": "height",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxTextArea's height. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$('#jqxTextArea').jqxTextArea({ height: 35 });</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxTextArea').jqxTextArea('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8z1Lynv2/",
            "exampleDescription": "height is set to 100",
            "dataType": "number",
            "ts_dataType": "string | number"
        },
        {
            "name": "items",
            "defaultValue": "8",
            "description": "<P>Sets or gets the maximum number of items to display in the popup menu. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>items</CODE> property. </P>\n<PRE><CODE>$(\"#jqxTextArea\").jqxTextArea({ items: 10 });</CODE></PRE>\n\r\n<P>Get the <CODE>items</CODE> property. </P>\n<PRE><CODE>var items = $('#jqxTextArea').jqxTextArea('items'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4jjums1o/",
            "exampleDescription": "items is set to 10",
            "dataType": "number",
            "exampleInit": {
                "items": "items",
                "source": "source",
                "exampleData": "moreThanOnePropsExample;3;[ 'Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Brazil', 'Brunei', 'Bulgaria' ]"
            }
        },
        {
            "name": "maxLength",
            "defaultValue": "null",
            "description": "<P>Sets or gets the maximum character length of the textarea. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>maxLength</CODE> property. </P>\n<PRE><CODE>$(\"#jqxTextArea\").jqxTextArea({ maxLength: 10 });</CODE></PRE>\n\r\n<P>Get the <CODE>maxLength</CODE> property. </P>\n<PRE><CODE>var maxLength = $('#jqxTextArea').jqxTextArea('maxLength'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/k7v9wzeg/",
            "exampleDescription": "maxLength is set to 10",
            "dataType": "number",
            "exampleInit": {
                "maxLength": "10"
            }
        },
        {
            "name": "minLength",
            "defaultValue": "1",
            "description": "<P>Sets or gets the minimum character length needed before triggering auto-complete suggestions. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>minLength</CODE> property. </P>\n<PRE><CODE>$(\"#jqxTextArea\").jqxTextArea({ minLength: 2 });</CODE></PRE>\n\r\n<P>Get the <CODE>minLength</CODE> property. </P>\n<PRE><CODE>var minLength = $('#jqxTextArea').jqxTextArea('minLength'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/6ogdg365/",
            "exampleDescription": "minLength is set to 1",
            "dataType": "number",
            "exampleInit": {
                "minLength": "2"
            }
        },
        {
            "name": "opened",
            "defaultValue": "false",
            "description": "<P>Gets a value indicating whether the auto-suggest popup is opened. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Get the <CODE>opened</CODE> property. </P>\n<PRE><CODE>var opened = $('#jqxTextArea').jqxTextArea('opened'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dsco19q4/",
            "exampleDescription": "get the value of opened",
            "dataType": "boolean",
            "exampleInit": {
                "opened": "true"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxTextArea ref=\"myTextArea\"\n    :width=\"200\" :height=\"50\" :placeHolder=\"'Enter a Country'\" />\n&lt;/template>\n \n&lt;script>\n  import JqxTextArea from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxtextarea.vue';\n \n  export default {\n    components: {\n      JqxTextArea\n    },\n    mounted: function () {\n      let opened = this.$refs.myTextArea.opened;\n      alert('Opened: ' + opened);\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "placeHolder",
            "defaultValue": "''",
            "description": "<P>Sets or gets the textarea's placeholder. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>placeHolder</CODE> property. </P>\n<PRE><CODE>$(\"#jqxTextArea\").jqxTextArea({ placeHolder: \"Enter text\" });</CODE></PRE>\n\r\n<P>Get the <CODE>placeHolder</CODE> property. </P>\n<PRE><CODE>var placeHolder = $('#jqxTextArea').jqxTextArea('placeHolder'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/27xe0wha/",
            "exampleDescription": "placeHolder is set to \"Enter Your Country of Origin\"",
            "dataType": "string"
        },
        {
            "name": "popupZIndex",
            "defaultValue": "20000",
            "description": "<P>Sets or gets the auto-suggest popup's z-index. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>popupZIndex</CODE> property. </P>\n<PRE><CODE>$(\"#jqxTextArea\").jqxTextArea({ popupZIndex: 999999 });</CODE></PRE>\n\r\n<P>Get the <CODE>popupZIndex</CODE> property. </P>\n<PRE><CODE>var zIndex = $('#jqxTextArea').jqxTextArea('popupZIndex'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tf39484m/",
            "exampleDescription": "popupZIndex is set to 99999",
            "dataType": "number",
            "exampleInit": {
                "popupZIndex": "popupZIndex",
                "source": "source",
                "exampleData": "moreThanOnePropsExample;99999;[ 'Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Brazil', 'Brunei', 'Bulgaria' ]"
            }
        },
        {
            "name": "query",
            "defaultValue": "''",
            "description": "<P>Determines the textarea's query. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>query</CODE> property. </P>\n<PRE><CODE>$(\"#jqxTextArea\").jqxTextArea({ query: \"un\" });</CODE></PRE>\n\r\n<P>Get the <CODE>query</CODE> property. </P>\n<PRE><CODE>var query = $(\"#jqxTextArea\").jqxTextArea('query');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/f07vahd4/",
            "exampleDescription": "query is set to item",
            "dataType": "string",
            "exampleInit": {
                "query": "item"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxTextArea ref=\"myTextArea\"\n    :width=\"200\" :height=\"50\" :source=\"source\"\n    :placeHolder=\"'Enter a Country'\" :renderer=\"renderer\" />\n&lt;/template>\n \n&lt;script>\n  import JqxTextArea from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxtextarea.vue';\n \n  export default {\n    components: {\n      JqxTextArea\n    },\n    data: function () {\n      return {\n        countries: ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Brazil', 'Brunei', 'Bulgaria']\n      }\n    },\n    methods: {\n      source: function (query, response) {\n        const item = query.split(/,\\s*/).pop();\n        // update the search query.\n        this.$refs.myTextArea.query = item;\n        response(this.countries);\n      },\n      renderer: function (itemValue, inputValue) {\n        const terms = inputValue.split(/,\\s*/);\n        // remove the current input\n        terms.pop();\n        // add the selected item\n        terms.push(itemValue);\n        // add placeholder to get the comma-and-space at the end\n        terms.push('');\n \n        return terms.join(', ');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "renderer",
            "defaultValue": "null",
            "description": "<P>Enables you to update the textarea's value, after a selection from the auto-complete popup. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>renderer</CODE> property. </P>\n<PRE><CODE>\r\nvar countries = new Array(\"Afghanistan\", \"Albania\", \"Algeria\", \"Andorra\", \"Angola\", \"Antarctica\", \"Antigua and Barbuda\", \"Argentina\", \"Armenia\", \"Australia\", \"Austria\", \"Azerbaijan\", \"Bahamas\", \"Bahrain\", \"Bangladesh\", \"Barbados\", \"Belarus\", \"Belgium\", \"Belize\", \"Benin\", \"Bermuda\", \"Bhutan\", \"Bolivia\", \"Bosnia and Herzegovina\", \"Botswana\", \"Brazil\", \"Brunei\", \"Bulgaria\", \"Burkina Faso\", \"Burma\", \"Burundi\", \"Cambodia\", \"Cameroon\", \"Canada\", \"Cape Verde\", \"Central African Republic\", \"Chad\", \"Chile\", \"China\", \"Colombia\", \"Comoros\", \"Congo, Democratic Republic\", \"Congo, Republic of the\", \"Costa Rica\", \"Cote d'Ivoire\", \"Croatia\", \"Cuba\", \"Cyprus\", \"Czech Republic\", \"Denmark\", \"Djibouti\", \"Dominica\", \"Dominican Republic\", \"East Timor\", \"Ecuador\", \"Egypt\", \"El Salvador\", \"Equatorial Guinea\", \"Eritrea\", \"Estonia\", \"Ethiopia\", \"Fiji\", \"Finland\", \"France\", \"Gabon\", \"Gambia\", \"Georgia\", \"Germany\", \"Ghana\", \"Greece\", \"Greenland\", \"Grenada\", \"Guatemala\", \"Guinea\", \"Guinea-Bissau\", \"Guyana\", \"Haiti\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"Iceland\", \"India\", \"Indonesia\", \"Iran\", \"Iraq\", \"Ireland\", \"Israel\", \"Italy\", \"Jamaica\", \"Japan\", \"Jordan\", \"Kazakhstan\", \"Kenya\", \"Kiribati\", \"Korea, North\", \"Korea, South\", \"Kuwait\", \"Kyrgyzstan\", \"Laos\", \"Latvia\", \"Lebanon\", \"Lesotho\", \"Liberia\", \"Libya\", \"Liechtenstein\", \"Lithuania\", \"Luxembourg\", \"Macedonia\", \"Madagascar\", \"Malawi\", \"Malaysia\", \"Maldives\", \"Mali\", \"Malta\", \"Marshall Islands\", \"Mauritania\", \"Mauritius\", \"Mexico\", \"Micronesia\", \"Moldova\", \"Mongolia\", \"Morocco\", \"Monaco\", \"Mozambique\", \"Namibia\", \"Nauru\", \"Nepal\", \"Netherlands\", \"New Zealand\", \"Nicaragua\", \"Niger\", \"Nigeria\", \"Norway\", \"Oman\", \"Pakistan\", \"Panama\", \"Papua New Guinea\", \"Paraguay\", \"Peru\", \"Philippines\", \"Poland\", \"Portugal\", \"Qatar\", \"Romania\", \"Russia\", \"Rwanda\", \"Samoa\", \"San Marino\", \" Sao Tome\", \"Saudi Arabia\", \"Senegal\", \"Serbia and Montenegro\", \"Seychelles\", \"Sierra Leone\", \"Singapore\", \"Slovakia\", \"Slovenia\", \"Solomon Islands\", \"Somalia\", \"South Africa\", \"Spain\", \"Sri Lanka\", \"Sudan\", \"Suriname\", \"Swaziland\", \"Sweden\", \"Switzerland\", \"Syria\", \"Taiwan\", \"Tajikistan\", \"Tanzania\", \"Thailand\", \"Togo\", \"Tonga\", \"Trinidad and Tobago\", \"Tunisia\", \"Turkey\", \"Turkmenistan\", \"Uganda\", \"Ukraine\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Uruguay\", \"Uzbekistan\", \"Vanuatu\", \"Venezuela\", \"Vietnam\", \"Yemen\", \"Zambia\", \"Zimbabwe\");\r\n$(\"#jqxTextArea\").jqxTextArea({ placeHolder: \"Enter a Country\", height: 25, width: 250, \r\n    source: function (query, response) {\r\n        var item = query.split(/,\\s*/).pop();\r\n        // update the search query.\r\n        $(\"#jqxTextArea\").jqxTextArea({ query: item });\r\n        response(countries);\r\n    },\r\n    renderer: function (itemValue, inputValue) {\r\n        var terms = inputValue.split(/,\\s*/);\r\n        // remove the current input\r\n        terms.pop();\r\n        // add the selected item\r\n        terms.push(itemValue);\r\n        // add placeholder to get the comma-and-space at the end\r\n        terms.push(\"\");\r\n        var value = terms.join(\", \");\r\n        return value;\r\n    }\r\n});                        \r\n                        </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vhd1p8ad/",
            "exampleDescription": "renderer is set to a custom function",
            "dataType": "function",
            "ts_dataType": "(itemValue: any, inputValue: any) => any",
            "exampleInit": {
                "renderer": "renderer"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxTextArea ref=\"myTextArea\"\n    :width=\"200\" :height=\"50\" :source=\"source\"\n    :placeHolder=\"'Enter a Country'\" :renderer=\"renderer\" />\n&lt;/template>\n \n&lt;script>\n  import JqxTextArea from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxtextarea.vue';\n \n  export default {\n    components: {\n      JqxTextArea\n    },\n    data: function () {\n      return {\n        countries: ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Brazil', 'Brunei', 'Bulgaria']\n      }\n    },\n    methods: {\n      source: function (query, response) {\n        const item = query.split(/,\\s*/).pop();\n        // update the search query.\n        this.$refs.myTextArea.query = item;\n        response(this.countries);\n      },\n      renderer: function (itemValue, inputValue) {\n        const terms = inputValue.split(/,\\s*/);\n        // remove the current input\n        terms.pop();\n        // add the selected item\n        terms.push(itemValue);\n        // add placeholder to get the comma-and-space at the end\n        terms.push('');\n \n        return terms.join(', ');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "roundedCorners",
            "defaultValue": "true",
            "description": "<P>Enables or disables the rounded corners functionality. This property setting has effect in browsers which support CSS border-radius. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>roundedCorners</CODE> property. </P>\n<PRE><CODE>$(\"#jqxTextArea\").jqxTextArea({ roundedCorners: false }); </CODE></PRE>\n\r\n<P>Get the <CODE>roundedCorners</CODE> property. </P>\n<PRE><CODE>var roundedCorners = $('#jqxTextArea').jqxTextArea('roundedCorners'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/d6f1z2m6/",
            "exampleDescription": "roundedCorners is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "roundedCorners": "true"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts.</P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>rtl</CODE> property. </P>\n<PRE><CODE>$('#jqxTextArea').jqxTextArea({ rtl : true }); </CODE></PRE>\n\r\n<P>Get the <CODE>rtl</CODE> property. </P>\n<PRE><CODE>var rtl = $('#jqxTextArea').jqxTextArea('rtl'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dednheqt/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "scrollBarSize",
            "defaultValue": "15",
            "description": "<P>Sets or gets the size of the scrollbar. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>scrollBarSize</CODE> property. </P>\n<PRE><CODE>$('#jqxTextArea').jqxTextArea({ scrollBarSize: 20 });</CODE></PRE>\n\r\n<P>Get the <CODE>scrollBarSize</CODE> property. </P>\n<PRE><CODE>var scrollBarSize = $('#jqxTextArea').jqxTextArea('scrollBarSize');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/829tqnop/",
            "exampleDescription": "scrollBarSize is set to 20",
            "dataType": "number",
            "exampleInit": {
                "scrollBarSize": "15"
            }
        },
        {
            "name": "searchMode",
            "defaultValue": "'default'",
            "description": "<P>Sets or gets the search mode. When the user types into the textarea, the widget tries to find the searched item using the entered text and the selected search mode. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'none'</CODE></PRE>\n<PRE><CODE>'contains'</CODE></PRE>\n<PRE><CODE>'containsignorecase'</CODE></PRE>\n<PRE><CODE>'equals'</CODE></PRE>\n<PRE><CODE>'equalsignorecase'</CODE></PRE>\n<PRE><CODE>'startswithignorecase'</CODE></PRE>\n<PRE><CODE>'startswith'</CODE></PRE>\n<PRE><CODE>'endswithignorecase'</CODE></PRE>\n<PRE><CODE>'endswith'</CODE></PRE>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>searchMode</CODE> property . </P>\n<PRE><CODE>$(\"#jqxTextArea\").jqxTextArea({ searchMode: 'contains' }); </CODE></PRE>\n\r\n<P>Get the <CODE>searchMode</CODE> property. </P>\n<PRE><CODE>var searchMode = $('#jqxTextArea').jqxTextArea('searchMode'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/14s2s56x/",
            "exampleDescription": "searchMode is set to 'containsignorecase'",
            "dataType": "string",
            "ts_dataType": "enum:TextAreaSearchMode",
            "exampleInit": {
                "searchMode": "searchMode",
                "source": "source",
                "exampleData": "moreThanOnePropsExample;'containsignorecase';[ 'Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Brazil', 'Brunei', 'Bulgaria' ]"
            }
        },
        {
            "name": "source",
            "defaultValue": "[]",
            "description": "<P>Sets the widget's data source. The 'source' function is passed two arguments, the textarea's value and a callback function. The 'source' function may be used synchronously by returning an array of items or asynchronously via the callback. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Initialize a jqxTextArea with the <CODE>source</CODE> property specified. </P>\n<PRE><CODE>\r\nvar countries = new Array(\"Afghanistan\", \"Albania\", \"Algeria\", \"Andorra\", \"Angola\", \"Antarctica\", \"Antigua and Barbuda\", \"Argentina\", \"Armenia\", \"Australia\", \"Austria\", \"Azerbaijan\", \"Bahamas\", \"Bahrain\", \"Bangladesh\", \"Barbados\", \"Belarus\", \"Belgium\", \"Belize\", \"Benin\", \"Bermuda\", \"Bhutan\", \"Bolivia\", \"Bosnia and Herzegovina\", \"Botswana\", \"Brazil\", \"Brunei\", \"Bulgaria\", \"Burkina Faso\", \"Burma\", \"Burundi\", \"Cambodia\", \"Cameroon\", \"Canada\", \"Cape Verde\", \"Central African Republic\", \"Chad\", \"Chile\", \"China\", \"Colombia\", \"Comoros\", \"Congo, Democratic Republic\", \"Congo, Republic of the\", \"Costa Rica\", \"Cote d'Ivoire\", \"Croatia\", \"Cuba\", \"Cyprus\", \"Czech Republic\", \"Denmark\", \"Djibouti\", \"Dominica\", \"Dominican Republic\", \"East Timor\", \"Ecuador\", \"Egypt\", \"El Salvador\", \"Equatorial Guinea\", \"Eritrea\", \"Estonia\", \"Ethiopia\", \"Fiji\", \"Finland\", \"France\", \"Gabon\", \"Gambia\", \"Georgia\", \"Germany\", \"Ghana\", \"Greece\", \"Greenland\", \"Grenada\", \"Guatemala\", \"Guinea\", \"Guinea-Bissau\", \"Guyana\", \"Haiti\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"Iceland\", \"India\", \"Indonesia\", \"Iran\", \"Iraq\", \"Ireland\", \"Israel\", \"Italy\", \"Jamaica\", \"Japan\", \"Jordan\", \"Kazakhstan\", \"Kenya\", \"Kiribati\", \"Korea, North\", \"Korea, South\", \"Kuwait\", \"Kyrgyzstan\", \"Laos\", \"Latvia\", \"Lebanon\", \"Lesotho\", \"Liberia\", \"Libya\", \"Liechtenstein\", \"Lithuania\", \"Luxembourg\", \"Macedonia\", \"Madagascar\", \"Malawi\", \"Malaysia\", \"Maldives\", \"Mali\", \"Malta\", \"Marshall Islands\", \"Mauritania\", \"Mauritius\", \"Mexico\", \"Micronesia\", \"Moldova\", \"Mongolia\", \"Morocco\", \"Monaco\", \"Mozambique\", \"Namibia\", \"Nauru\", \"Nepal\", \"Netherlands\", \"New Zealand\", \"Nicaragua\", \"Niger\", \"Nigeria\", \"Norway\", \"Oman\", \"Pakistan\", \"Panama\", \"Papua New Guinea\", \"Paraguay\", \"Peru\", \"Philippines\", \"Poland\", \"Portugal\", \"Qatar\", \"Romania\", \"Russia\", \"Rwanda\", \"Samoa\", \"San Marino\", \" Sao Tome\", \"Saudi Arabia\", \"Senegal\", \"Serbia and Montenegro\", \"Seychelles\", \"Sierra Leone\", \"Singapore\", \"Slovakia\", \"Slovenia\", \"Solomon Islands\", \"Somalia\", \"South Africa\", \"Spain\", \"Sri Lanka\", \"Sudan\", \"Suriname\", \"Swaziland\", \"Sweden\", \"Switzerland\", \"Syria\", \"Taiwan\", \"Tajikistan\", \"Tanzania\", \"Thailand\", \"Togo\", \"Tonga\", \"Trinidad and Tobago\", \"Tunisia\", \"Turkey\", \"Turkmenistan\", \"Uganda\", \"Ukraine\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Uruguay\", \"Uzbekistan\", \"Vanuatu\", \"Venezuela\", \"Vietnam\", \"Yemen\", \"Zambia\", \"Zimbabwe\");\r\n$(\"#jqxTextArea\").jqxTextArea({ placeHolder: \"Enter a Country\", height: 25, width: 200, minLength: 1,  source: countries });\r\n                    </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/6ogdg365/",
            "exampleDescription": "source is set to a custom array",
            "dataType": "Array | Function | Object",
            "ts_dataType": "any",
            "exampleInit": {
                "source": "source",
                "exampleData": "return [ 'Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Brazil', 'Brunei', 'Bulgaria' ]"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n<PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;\r\n</CODE></PRE>\r\n</CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/r2n1dpcL/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "valueMember",
            "defaultValue": "''",
            "description": "<P>Sets or gets the valueMember of the Items. The valueMember specifies the name of an object property to set as a 'value' of the list items. The name is contained in the collection specified by the 'source' property. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>valueMember</CODE> property. </P>\n<PRE><CODE>$(\"#jqxTextArea\").jqxTextArea({ valueMember: 'lastName' });</CODE></PRE>\n\r\n<P>Get the <CODE>valueMember</CODE> property. </P>\n<PRE><CODE>var valueMember = $('#jqxTextArea').jqxTextArea('valueMember'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/wedv1vyv/",
            "exampleDescription": "valueMember is set to \"CompanyName\"",
            "dataType": "string",
            "exampleInit": {
                "valueMember": "valueMember",
                "source": "source",
                "displayMember": "'ContactName'",
                "exampleData": "moreThanOnePropsExample;'CompanyName';[{ 'CompanyName': 'Company1',  'ContactName': 'Ana' }, { 'CompanyName': 'Company2', 'ContactName': 'Maria' }]"
            }
        },
        {
            "name": "width",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxTextArea's width. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$('#jqxTextArea').jqxTextArea({ width: 200 });</CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxTextArea').jqxTextArea('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/s9h7Lxgs/",
            "exampleDescription": "width is set to 150",
            "dataType": "number",
            "ts_dataType": "string | number"
        }
    ],
    "events": [
        {
            "name": "change",
            "description": "<P>This event is triggered when the value is changed. </P>\n<H4>Code examples </H4>\n<P>Bind to the <CODE>change</CODE> event by type: jqxTextArea. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ve4x5u39/",
            "exampleDescription": "Bind to the change event by type: jqxTextArea.",
            "example": "<PRE><CODE>\r\n$('#jqxTextArea').on('change', function(event) {\r\n    var value = $('#jqxTextArea').val();\r\n    var type = event.args.type; // keyboard, mouse or null depending on how the value was changed.\r\n});\r\n                         </CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxTextArea ref=\"myTextArea\"  @open=\"open($event)\" @change=\"change($event)\" @select=\"select($event)\"  @close=\"close($event)\"\n        :width=\"200\" :height=\"50\" :placeHolder=\"'Enter a Country'\" :source=\"source\" \n     />\n&lt;/template>\n\n&lt;script>\n    import JqxTextArea from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxtextarea.vue';\n\n    export default {\n        components: {\n            JqxTextArea\n        },\n        data: function () {\n            return {\n                source: ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Brazil', 'Brunei', 'Bulgaria']\n            }\n        },\n        methods: {\n            open: function (event) {\n                alert('open');\n            },\n            change: function (event) {\n                alert('change');\n            },\n            select: function (event) {\n                alert('select');\n            }, close: function (event) {\n                alert('close');\n            }\n        }\n    }\n&lt;/script>\n"
            }
        },
        {
            "name": "close",
            "description": "<P>This event is triggered when the auto-suggest popup is closed. </P>\n<H4>Code examples </H4>\n<P>Bind to the <CODE>close</CODE> event by type: jqxTextArea. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/wqdcsq43/",
            "exampleDescription": "Bind to the close event by type: jqxTextArea.",
            "example": "<PRE><CODE>$('#jqxTextArea').on('close', function (event) {\r\n    var popup = event.args.popup;\r\n});\r\n                        </CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxTextArea ref=\"myTextArea\"  @open=\"open($event)\" @change=\"change($event)\" @select=\"select($event)\"  @close=\"close($event)\"\n        :width=\"200\" :height=\"50\" :placeHolder=\"'Enter a Country'\" :source=\"source\" \n     />\n&lt;/template>\n\n&lt;script>\n    import JqxTextArea from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxtextarea.vue';\n\n    export default {\n        components: {\n            JqxTextArea\n        },\n        data: function () {\n            return {\n                source: ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Brazil', 'Brunei', 'Bulgaria']\n            }\n        },\n        methods: {\n            open: function (event) {\n                alert('open');\n            },\n            change: function (event) {\n                alert('change');\n            },\n            select: function (event) {\n                alert('select');\n            }, close: function (event) {\n                alert('close');\n            }\n        }\n    }\n&lt;/script>\n"
            }
        },
        {
            "name": "open",
            "description": "<P>This event is triggered when the auto-suggest popup is opened. </P>\n<H4>Code examples </H4>\n<P>Bind to the <CODE>open</CODE> event by type: jqxTextArea. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/rwtxas96/",
            "exampleDescription": "Bind to the open event by type: jqxTextArea.",
            "example": "<PRE><CODE>$('#jqxTextArea').on('open', function (event) {\r\n    var popup = event.args.popup;\r\n});\r\n                        </CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxTextArea ref=\"myTextArea\"  @open=\"open($event)\" @change=\"change($event)\" @select=\"select($event)\"  @close=\"close($event)\"\n        :width=\"200\" :height=\"50\" :placeHolder=\"'Enter a Country'\" :source=\"source\" \n     />\n&lt;/template>\n\n&lt;script>\n    import JqxTextArea from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxtextarea.vue';\n\n    export default {\n        components: {\n            JqxTextArea\n        },\n        data: function () {\n            return {\n                source: ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Brazil', 'Brunei', 'Bulgaria']\n            }\n        },\n        methods: {\n            open: function (event) {\n                alert('open');\n            },\n            change: function (event) {\n                alert('change');\n            },\n            select: function (event) {\n                alert('select');\n            }, close: function (event) {\n                alert('close');\n            }\n        }\n    }\n&lt;/script>\n"
            }
        },
        {
            "name": "select",
            "description": "<P>This event is triggered when an item is selected from the auto-suggest popup. </P>\n<H4>Code examples </H4>\n<P>Bind to the <CODE>select</CODE> event by type: jqxTextArea. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/pg3j2f1n/",
            "exampleDescription": "Bind to the select event by type: jqxTextArea.",
            "example": "<PRE><CODE>$('#jqxTextArea').on('select', function (event) {\r\n    if (event.args) {\r\n        var item = event.args.item;\r\n        var label = item.label;\r\n        var value = item.value;\r\n    }\r\n});\r\n                        </CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxTextArea ref=\"myTextArea\"  @open=\"open($event)\" @change=\"change($event)\" @select=\"select($event)\"  @close=\"close($event)\"\n        :width=\"200\" :height=\"50\" :placeHolder=\"'Enter a Country'\" :source=\"source\" \n     />\n&lt;/template>\n\n&lt;script>\n    import JqxTextArea from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxtextarea.vue';\n\n    export default {\n        components: {\n            JqxTextArea\n        },\n        data: function () {\n            return {\n                source: ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Brazil', 'Brunei', 'Bulgaria']\n            }\n        },\n        methods: {\n            open: function (event) {\n                alert('open');\n            },\n            change: function (event) {\n                alert('change');\n            },\n            select: function (event) {\n                alert('select');\n            }, close: function (event) {\n                alert('close');\n            }\n        }\n    }\n&lt;/script>\n"
            }
        }
    ],
    "methods": [
        {
            "name": "destroy",
            "description": "<P>Destroys the widget. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxTextArea').jqxTextArea('destroy'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4v0Lwxkd/",
            "exampleDescription": "destroys the jqxTextArea",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "focus",
            "description": "<P>Focuses the widget. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>focus</CODE> method. </P>\n<PRE><CODE>$('#jqxTextArea').jqxTextArea('focus'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/t25k2Lch/",
            "exampleDescription": "focuses the jqxTextArea",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "refresh",
            "description": "<P>Refreshes the widget. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>refresh</CODE> method. </P>\n<PRE><CODE>$('#jqxTextArea').jqxTextArea('refresh');</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/6pcc7g6b/",
            "exampleDescription": "refreshes the jqxTextArea",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "render",
            "description": "<P>Renders the widget. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>render</CODE> method. </P>\n<PRE><CODE>$('#jqxTextArea').jqxTextArea('render');</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/edzvgfeg/",
            "exampleDescription": "renders the jqxTextArea",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "selectAll",
            "description": "<P>Selects the text in the textarea. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>selectAll</CODE> method. </P>\n<PRE><CODE>$('#jqxTextArea').jqxTextArea('selectAll'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4nh5zjby/",
            "exampleDescription": "selects all of the items in the jqxTextArea",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "val",
            "description": "<P>Sets or gets the value. </P>\n<H4>Code examples </H4>\n<P>Get the <CODE>value</CODE>: </P>\n<PRE><CODE>var value = $('#jqxTextArea').jqxTextArea('val'); or var value = $('#jqxTextArea').val();</CODE></PRE>\n<P>Set the <CODE>value</CODE>: </P>\n<PRE><CODE>$('#jqxTextArea').jqxTextArea('val', 'New Value'); or $('#jqxTextArea').val('New Value');</CODE></PRE>\n<PRE><CODE>$('#jqxTextArea').jqxTextArea('val', {label: \"Item 1\", value: \"1\"});</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/qpq7s65x/",
            "exampleDescription": "sets the jqxTextArea value",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "value",
                    "dataType": "string",
                    "description": "",
                    "optional": true
                }
            ]
        }
    ]
}