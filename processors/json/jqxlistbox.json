{
    "widget": {
        "name": "jqxListBox",
        "description": "Displays a list of selectable items.",
        "angular2": {
            "name": "jqxListBoxComponent",
            "selector": "jqxListBox"
        }
    },
    "dataTypes": [
        {
            "name": "ListBoxDropAction",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "copy", "none" ]
        },
        {
            "name": "ListBoxSearchMode",
            "ts_dataType": "enum",
            "enumOptions": [ "none", "contains", "containsignorecase", "equals", "equalsignorecase", "startswithignorecase", "startswith", "endswithignorecase", "endswith" ]
        },
        {
            "name": "ListBoxDragStart",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "item",
                    "dataType": "object",
                    "ts_dataType": "object",
                    "optional": "true",
                    "displayName": "Item",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "ListBoxDragEnd",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "dragItem",
                    "dataType": "object",
                    "ts_dataType": "object",
                    "optional": "true",
                    "displayName": "DragItem",
                    "defaultValue": ""
                },
                {
                    "name": "dropItem",
                    "dataType": "object",
                    "ts_dataType": "object",
                    "optional": "true",
                    "displayName": "DropItem",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "ListBoxRenderer",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "index",
                    "dataType": "number",
                    "ts_dataType": "number",
                    "optional": "true",
                    "displayName": "Index",
                    "defaultValue": ""
                },
                {
                    "name": "label",
                    "dataType": "string | number",
                    "ts_dataType": "string | number",
                    "optional": "true",
                    "displayName": "Label",
                    "defaultValue": ""
                },
                {
                    "name": "value",
                    "dataType": "string | number",
                    "ts_dataType": "string | number",
                    "optional": "true",
                    "displayName": "Value",
                    "defaultValue": ""
                }
            ]
        }
    ],
    "exampleElementsInit": {
        "source": "items"
    },
    "exampleInit": {
        "source": "source"
    },
    "exampledInitExtraData": {
        "properties": "source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]",
        "beforeCreate": "",
        "mounted": "",
        "methods": ""
    },
    "properties": [
        {
            "name": "autoHeight",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the listbox's height is equal to the sum of each item's height </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>autoHeight</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({autoHeight:true}); </CODE></PRE>\n\r\n<P>Get the <CODE>autoHeight</CODE> property. </P>\n<PRE><CODE>var autoHeight = $('#jqxListBox').jqxListBox('autoHeight'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/SnLa2/",
            "exampleDescription": "autoHeight is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "autoHeight": "true"
            }
        },
        {
            "name": "allowDrag",
            "defaultValue": "false",
            "description": "<P>Enables/disables the dragging of ListBox Items. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>allowDrag</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({allowDrag:true}); </CODE></PRE>\n\r\n<P>Get the <CODE>allowDrag</CODE> property. </P>\n<PRE><CODE>var allowDrag = $('#jqxListBox').jqxListBox('allowDrag'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/e7hBy/",
            "exampleDescription": "allowDrag is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "allowDrag": "true",
                "allowDrop": "true"
            }
        },
        {
            "name": "allowDrop",
            "defaultValue": "false",
            "description": "<P>Enables/disables the dropping of ListBox Items. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>allowDrop</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({allowDrop:true}); </CODE></PRE>\n\r\n<P>Get the <CODE>allowDrop</CODE> property. </P>\n<PRE><CODE>var allowDrop = $('#jqxListBox').jqxListBox('allowDrop'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hWEnH/",
            "exampleDescription": "allowDrop is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "allowDrag": "true",
                "allowDrop": "true"
            }
        },
        {
            "name": "checkboxes",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the listbox should display a checkbox next to each item. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>checkboxes</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({checkboxes:true}); </CODE></PRE>\n\r\n<P>Get the <CODE>checkboxes</CODE> property. </P>\n<PRE><CODE>var checkboxes = $('#jqxListBox').jqxListBox('checkboxes'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8khqv/",
            "exampleDescription": "checkboxes is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "checkboxes": "true"
            }
        },
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Enables/disables the listbox. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$('#jqxListBox').jqxListBox({ disabled: true }); </CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxListBox').jqxListBox('disabled');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/etR3v/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "displayMember",
            "defaultValue": "\"\"",
            "description": "<P>Sets or gets the displayMember of the Items. The displayMember specifies the name of an object property to display. The name is contained in the collection specified by the 'source' property. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>displayMember</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({displayMember: 'firstName'});</CODE></PRE>\n\r\n<P>Get the <CODE>displayMember</CODE> property. </P>\n<PRE><CODE>var displayMember = $('#jqxListBox').jqxListBox('displayMember'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/QvpMX/",
            "exampleDescription": "displayMember is set to text",
            "dataType": "string",
            "ts_dataType": "number | string",
            "exampleInit": {
                "displayMember": "text"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxListBox ref=\"myListBox\"\n    :source=\"source\" :displayMember=\"'text'\" />\n&lt;/template> \n \n&lt;script> \n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue'; \n \n  export default { \n    components: { \n      JqxListBox \n    }, \n    data: function () { \n      return { \n        source: [\n          { text: \"Affogato\", value: 0 },\n          { text: \"Americano\", value: 1 },\n          { text: \"Bicerin\", value: 2 },\n          { text: \"Breve\", value: 3 },\n          { text: \"Cafe Bombon\", value: 4 },\n          { text: \"Cafe au lait\", value: 5 }\n        ]\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "dropAction",
            "defaultValue": "'default'.",
            "description": "<P>Sets or gets the drop action when an item is dropped. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'default'</CODE></PRE>\n<PRE><CODE>'copy'-adds a clone of the dropped item</CODE></PRE>\n<PRE><CODE>'none'-means that the dropped item will not be added to a new collection and will not be removed from its parent collection</CODE></PRE>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>dropAction</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({dropAction:'copy'}); </CODE></PRE>\n\r\n<P>Get the <CODE>dropAction</CODE> property. </P>\n<PRE><CODE>var dropAction = $('#jqxListBox').jqxListBox('dropAction'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/v88Hn/",
            "exampleDescription": "dropAction is set to 'copy'",
            "dataType": "string",
            "ts_dataType": "enum:ListBoxDropAction",
            "exampleInit": {
                "allowDrag": "true",
                "dropAction": "copy"
            }
        },
        {
            "name": "dragStart",
            "defaultValue": "null",
            "description": "<P>Callback function which is called when a drag operation starts. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>dragStart</CODE> property </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({dragStart: function (item)\r\n{\r\n    // disable dragging of 'Café au lait' item.\r\n    if (item.label == 'Café au lait')\r\n    return false;\r\n                        \r\n    // enable dragging for the item.\r\n    return true;\r\n}\r\n});\r\n                        </CODE></PRE>\n\r\n<P>Get the <CODE>dragStart</CODE> property. </P>\n<PRE><CODE>var dragStart = $('#jqxListBox').jqxListBox('dragStart'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9JdH7/",
            "exampleDescription": "dragStart is set to custom function",
            "dataType": "Function",
            "ts_dataType": "(item:ListBoxDragStart['item']) => boolean",
            "exampleInit": {
                "allowDrag": "true",
                "allowDrop": "true",
                "dragStart": "dragStart",
                "exampleData": "console.log('Dragging: ' + item.label);"
            }
        },
        {
            "name": "dragEnd",
            "defaultValue": "null",
            "description": "<P>Callback function which is called when a drag operation ends. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>dragEnd</CODE> property </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({ dragEnd: function (dragItem, dropItem) \r\n{\r\n    // dragItem is the dragged Item.\r\n    // dropItem is the item under the mouse cursor when you dropped the dragged item.\r\n    if (dragItem.label == \"Frappuccino\")\r\n    return false;\r\n}\r\n});\r\n                        </CODE></PRE>\n\r\n<P>Get the <CODE>dragEnd</CODE> property. </P>\n<PRE><CODE>var dragEnd = $('#jqxListBox').jqxListBox('dragEnd'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/WRYpX/",
            "exampleDescription": "dragEnd is set to custom function",
            "dataType": "Function",
            "ts_dataType": "(dragItem: ListBoxDragEnd['dragItem'], dropItem: ListBoxDragEnd['dropItem']) => boolean",
            "exampleInit": {
                "allowDrag": "true",
                "allowDrop": "true",
                "dragEnd": "dragEnd",
                "exampleData": "console.log('Dropping: ' + dragItem.label);"
            }
        },
        {
            "name": "enableHover",
            "defaultValue": "true",
            "description": "<P>Enables/disables the hover state. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>enableHover</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({enableHover: false}); </CODE></PRE>\n\r\n<P>Get the <CODE>enableHover</CODE> property. </P>\n<PRE><CODE>var enableHover = $('#jqxListBox').jqxListBox('enableHover'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Cqh6z/",
            "exampleDescription": "enableHover is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "enableHover": "false"
            }
        },
        {
            "name": "enableSelection",
            "defaultValue": "true",
            "description": "<P>Enables/disables the selection. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>enableSelection</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({enableSelection: false}); </CODE></PRE>\n\r\n<P>Get the <CODE>enableSelection</CODE> property. </P>\n<PRE><CODE>var enableSelection = $('#jqxListBox').jqxListBox('enableSelection'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/b9Qju/",
            "exampleDescription": "enableSelection is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "enableSelection": "false"
            }
        },
        {
            "name": "equalItemsWidth",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether the items width should be equal to the listbox's width. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>equalItemsWidth</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({equalItemsWidth:false}); </CODE></PRE>\n\r\n<P>Get the <CODE>equalItemsWidth</CODE> property. </P>\n<PRE><CODE>var equalItemsWidth = $('#jqxListBox').jqxListBox('equalItemsWidth'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Nubjv/",
            "exampleDescription": "equalItemsWidth is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "equalItemsWidth": "false"
            }
        },
        {
            "name": "filterable",
            "defaultValue": "false",
            "description": "<P>Determines whether the Filtering is enabled. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>filterable</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({filterable:true}); </CODE></PRE>\n\r\n<P>Get the <CODE>filterable</CODE> property. </P>\n<PRE><CODE>var filterable = $('#jqxListBox').jqxListBox('filterable'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/xEqV9/",
            "exampleDescription": "filterable is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "filterable": "true"
            }
        },
        {
            "name": "filterHeight",
            "defaultValue": "27",
            "description": "<P>Determines the Filter's height. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>filterHeight</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({filterHeight:30}); </CODE></PRE>\n\r\n<P>Get the <CODE>filterHeight</CODE> property. </P>\n<PRE><CODE>var filterHeight = $('#jqxListBox').jqxListBox('filterHeight'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/jX75m/",
            "exampleDescription": "filterHeight is set to 30",
            "dataType": "number",
            "exampleInit": {
                "filterable": "true",
                "filterHeight": "30"
            }
        },
        {
            "name": "filterDelay",
            "defaultValue": "100",
            "description": "<P>Determines the Filter's delay. After 100 milliseconds, the widget automatically filters its data based on the filter input's value. To perform filter only on \"Enter\" key press, set this property to 0. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>filterDelay</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({filterDelay:300}); </CODE></PRE>\n\r\n<P>Get the <CODE>filterDelay</CODE> property. </P>\n<PRE><CODE>var filterDelay = $('#jqxListBox').jqxListBox('filterDelay'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/J3g47/",
            "exampleDescription": "filterDelay is set to 300",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "filterable": "true",
                "filterDelay": "300"
            }
        },
        {
            "name": "filterPlaceHolder",
            "defaultValue": "\"Looking for\"",
            "description": "<P>Determines the Filter input's place holder. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>filterPlaceHolder</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({filterPlaceHolder:300}); </CODE></PRE>\n\r\n<P>Get the <CODE>filterPlaceHolder</CODE> property. </P>\n<PRE><CODE>var filterPlaceHolder = $('#jqxListBox').jqxListBox('filterPlaceHolder'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/LfWCx/",
            "exampleDescription": "filterPlaceHolder is set to \"Filtering...\"",
            "dataType": "string",
            "ts_dataType": "number | string",
            "exampleInit": {
                "filterable": "true",
                "filterPlaceHolder": "Filtering..."
            }
        },
        {
            "name": "height",
            "defaultValue": "null",
            "description": "<P>Sets or gets the listbox's height. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({ width: '250px', height: '250px' }); </CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxListBox').jqxListBox('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/7Lmbk/",
            "exampleDescription": "height is set to '200px'",
            "dataType": "string | number",
            "ts_dataType": "string | number",
            "exampleInit": {
                "height": "200"
            }
        },
        {
            "name": "hasThreeStates",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the checkboxes have three states - checked, unchecked and indeterminate. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>hasThreeStates</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({hasThreeStates:true}); </CODE></PRE>\n\r\n<P>Get the <CODE>hasThreeStates</CODE> property. </P>\n<PRE><CODE>var hasThreeStates = $('#jqxListBox').jqxListBox('hasThreeStates'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/C9eWk/",
            "exampleDescription": "hasThreeStates is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "checkboxes": "true",
                "hasThreeStates": "true"
            }
        },
        {
            "name": "itemHeight",
            "defaultValue": "-1",
            "description": "<P>Sets or gets the height of the jqxListBox Items. When the itemHeight == - 1, each item's height is equal to its desired height. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>itemHeight</CODE> property specified. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({itemHeight: 25});</CODE></PRE>\n\r\n<P>Get the <CODE>itemHeight</CODE> property. </P>\n<PRE><CODE>var itemHeight = $('#jqxListBox').jqxListBox('itemHeight'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/KJ6V6/",
            "exampleDescription": "itemHeight is set to 30",
            "dataType": "number",
            "exampleInit": {
                "itemHeight": "30"
            }
        },
        {
            "name": "incrementalSearch",
            "defaultValue": "true",
            "description": "<P>Sets or gets the incrementalSearch property. An incremental search begins searching as soon as you type the first character of the search string. As you type in the search string, jqxListBox automatically selects the found item. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>incrementalSearch</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({incrementalSearch: false});</CODE></PRE>\n\r\n<P>Get the <CODE>incrementalSearch</CODE> property. </P>\n<PRE><CODE>var incrementalSearch = $('#jqxListBox').jqxListBox('incrementalSearch'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8sFQu/",
            "exampleDescription": "incrementalSearch is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "incrementalSearch": "false"
            }
        },
        {
            "name": "incrementalSearchDelay",
            "defaultValue": "700",
            "description": "<P>Sets ot gets the incrementalSearchDelay property. The incrementalSearchDelay specifies the time-interval in milliseconds after which the previous search string is deleted. The timer starts when you stop typing. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>incrementalSearchDelay</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({incrementalSearchDelay: 400});</CODE></PRE>\n\r\n<P>Get the <CODE>incrementalSearchDelay</CODE> property. </P>\n<PRE><CODE>var incrementalSearchDelay = $('#jqxListBox').jqxListBox('incrementalSearchDelay'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Q5dyR/",
            "exampleDescription": "incrementalSearchDelay is set to 150",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "incrementalSearchDelay": "150"
            }
        },
        {
            "name": "multiple",
            "defaultValue": "false",
            "description": "<P>Enables/disables the multiple selection. When this property is set to true, the user can select multiple items. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>multiple</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({multiple: true}); </CODE></PRE>\n\r\n<P>Get the <CODE>multiple</CODE> property. </P>\n<PRE><CODE>var multiple = $('#jqxListBox').jqxListBox('multiple'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/YNEQj/",
            "exampleDescription": "multiple is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "multiple": "true"
            }
        },
        {
            "name": "multipleextended",
            "defaultValue": "false",
            "description": "<P>Enables/disables the multiple selection using Shift and Ctrl keys. When this property is set to true, the user can select multiple items by clicking on item and holding Shift or Ctrl. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>multipleextended</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({multipleextended: true}); </CODE></PRE>\n\r\n<P>Get the <CODE>multipleextended</CODE> property. </P>\n<PRE><CODE>var multipleextended = $('#jqxListBox').jqxListBox('multipleextended'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/U6GFk/",
            "exampleDescription": "multipleextended is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "multipleextended": "true"
            }
        },
        {
            "name": "renderer",
            "defaultValue": "null",
            "description": "<P>Callback function which is called when an item is rendered. By using the renderer function, you can customize the look of the list items. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>renderer</CODE> property </P>\n<PRE><CODE>$('#jqxListBox').jqxListBox({renderer: function (index, label, value) \r\n{\r\n    var datarecord = data[index];\r\n    return datarecord.firstname + \" \" + datarecord.lastname;\r\n}\r\n});\r\n                        </CODE></PRE>\n\r\n<P>Get the <CODE>renderer</CODE> property. </P>\n<PRE><CODE>var renderer = $('#jqxListBox').jqxListBox('renderer'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ANfqF/",
            "exampleDescription": "renderer is set to custom rendering function",
            "dataType": "Function",
            "ts_dataType": "(index: ListBoxRenderer['index'], label: ListBoxRenderer['label'], value: ListBoxRenderer['value']) => string",
            "exampleInit": {
                "renderer": "renderer",
                "exampleData": "return \"&lt;i>\" + value + \"&lt;/i>\";"
            }
        },
        {
            "name": "rendered",
            "defaultValue": "null",
            "description": "",
            "example": "",
            "exampleURL": "",
            "exampleDescription": "",
            "dataType": "Function",
            "ts_dataType": "() => any",
            "exampleInit": {
                "rendered": "rendered",
                "exampleData": "alert('rendered!')"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts.</P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>rtl</CODE> property. </P>\n<PRE><CODE>$('#jqxListBox').jqxListBox({rtl : true}); </CODE></PRE>\n\r\n<P>Get the <CODE>rtl</CODE> property. </P>\n<PRE><CODE>var rtl = $('#jqxListBox').jqxListBox('rtl'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/GSACT/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "selectedIndex",
            "defaultValue": "-1",
            "description": "<P>Sets or gets the selected index. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>selectedIndex</CODE> propert. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({selectedIndex: 2 }); </CODE></PRE>\n\r\n<P>Get the <CODE>selectedIndex</CODE> property. </P>\n<PRE><CODE>var selectedIndex = $('#jqxListBox').jqxListBox('selectedIndex'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/TUKkc/",
            "exampleDescription": "selectedIndex is set to 2",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "selectedIndex": "2"
            }
        },
        {
            "name": "selectedIndexes",
            "defaultValue": "",
            "description": "",
            "example": "",
            "exampleURL": "",
            "exampleDescription": "",
            "dataType": "object",
            "ts_dataType": "any",
            "exampleInit": {
                "multiple": "true",
                "selectedIndexes": "selectedIndexes",
                "exampleData": "{ 1: true, 3: true }"
            }
        },
        {
            "name": "source",
            "defaultValue": "null",
            "description": "<P>Sets or gets the item's source. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>source</CODE> property. </P>\n<PRE><CODE>var data = [</CODE></PRE>\n<PRE><CODE>\"Affogato\",</CODE></PRE>\n<PRE><CODE>\"Americano\",</CODE></PRE>\n<PRE><CODE>\"Bicerin\"</CODE></PRE>\n<PRE><CODE>];</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({source: data});</CODE></PRE>\n<PRE><CODE>\r\n// url of the data.\r\nvar url = \"../sampledata/customers.txt\";\r\nvar parentsLength = $(\"#jqxWidget\").parents().length;\r\nif (parentsLength &gt; 3) {\r\n    url = 'demos/sampledata/customers.txt';\r\n}\r\n// prepare the data. Set the datatype to 'json', 'xml', 'tsv', 'array', 'local' or 'csv.\r\nvar source =\r\n{\r\n    datatype: \"json\",\r\n    datafields: [\r\n        { name: 'CompanyName' },\r\n        { name: 'ContactName' }\r\n    ],\r\n    id: 'id',\r\n    url: url\r\n};\r\n// create a new instance of the jqx.dataAdapter.\r\nvar dataAdapter = new $.jqx.dataAdapter(source);\r\n// Create a jqxListBox\r\n$(\"#jqxListBox\").jqxListBox({ source: dataAdapter, displayMember: \"ContactName\", valueMember: \"CompanyName\", width: 200, height: 250});\r\n</CODE></PRE>\n\r\n<P>Get the <CODE>source</CODE> property. </P>\n<PRE><CODE>var source = $('#jqxListBox').jqxListBox('source'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ePZuv/",
            "exampleDescription": "source is set to source",
            "dataType": "Array | Object",
            "ts_dataType": "Array<any>"
        },
        {
            "name": "scrollBarSize",
            "defaultValue": "17",
            "description": "<P>Sets or gets the scrollbars's size. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>scrollBarSize</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({scrollBarSize: 25});</CODE></PRE>\n\r\n<P>Get the <CODE>scrollBarSize</CODE> property. </P>\n<PRE><CODE>var scrollBarSize = $('#jqxListBox').jqxListBox('scrollBarSize'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/HrVcs/",
            "exampleDescription": "scrollBarSize is set to 15",
            "dataType": "number",
            "exampleInit": {
                "scrollBarSize": "15"
            }
        },
        {
            "name": "searchMode",
            "defaultValue": "startswith",
            "description": "<P>Sets or gets the item incremental search mode. When the user types some text in a focused ListBox, the jqxListBox widget tries to find the searched item using the entered text and the selected search mode. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'none'</CODE></PRE>\n<PRE><CODE>'contains'</CODE></PRE>\n<PRE><CODE>'containsignorecase'</CODE></PRE>\n<PRE><CODE>'equals'</CODE></PRE>\n<PRE><CODE>'equalsignorecase'</CODE></PRE>\n<PRE><CODE>'startswithignorecase'</CODE></PRE>\n<PRE><CODE>'startswith'</CODE></PRE>\n<PRE><CODE>'endswithignorecase'</CODE></PRE>\n<PRE><CODE>'endswith'</CODE></PRE>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>searchMode</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({searchMode: 'contains' }); </CODE></PRE>\n\r\n<P>Get the <CODE>searchMode</CODE> property. </P>\n<PRE><CODE>var searchMode = $('#jqxListBox').jqxListBox('searchMode'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/r9E5j/",
            "exampleDescription": "searchMode is set to 'startswithignorecase'",
            "dataType": "string",
            "ts_dataType": "enum:ListBoxSearchMode",
            "exampleInit": {
                "searchMode": "contains"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n<PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;\r\n</CODE></PRE>\r\n</CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/h5Fcs/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "valueMember",
            "defaultValue": "\"\"",
            "description": "<P>Sets or gets the valueMember of the Items. The valueMember specifies the name of an object property to set as a 'value' of the list items. The name is contained in the collection specified by the 'source' property. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>valueMember</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({valueMember: 'lastName'});</CODE></PRE>\n\r\n<P>Get the <CODE>valueMember</CODE> property. </P>\n<PRE><CODE>var valueMember = $('#jqxListBox').jqxListBox('valueMember'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/YnqPP/",
            "exampleDescription": "valueMember is set to value",
            "dataType": "string",
            "ts_dataType": "number | string",
            "exampleInit": {
                "valueMember": "value"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxListBox ref=\"myListBox\"\n    :source=\"source\" :displayMember=\"'text'\" :valueMember=\"'value'\" />\n&lt;/template> \n \n&lt;script> \n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue'; \n \n  export default { \n    components: { \n      JqxListBox \n    }, \n    data: function () { \n      return { \n        source: [\n          { text: \"Affogato\", value: 0 },\n          { text: \"Americano\", value: 1 },\n          { text: \"Bicerin\", value: 2 },\n          { text: \"Breve\", value: 3 },\n          { text: \"Cafe Bombon\", value: 4 },\n          { text: \"Cafe au lait\", value: 5 }\n        ]\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "width",
            "defaultValue": "null",
            "description": "<P>Sets or gets the listbox's width. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox({ width: '250px', height: '250px' }); </CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxListBox').jqxListBox('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/EmLTL/",
            "exampleDescription": "width is set to '200px'",
            "dataType": "string | number",
            "ts_dataType": "string | number",
            "exampleInit": {
                "width": "200"
            }
        }
    ],
    "events": [
        {
            "name": "bindingComplete",
            "description": "<P>This event is triggered when the data binding operation is completed. </P>\n<H4>Code example </H4>\n<P>Bind to the <CODE>bindingComplete</CODE> event by type: jqxListBox. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/SQ4dM/",
            "exampleDescription": "Bind to the bindingComplete event by type:jqxListBox",
            "example": "<PRE><CODE>\r\n$(\"#jqxListBox\").on('bindingComplete', function (event) {\r\n});\r\n</CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxListBox ref=\"myListBox\" @bindingComplete=\"onBindingComplete($event)\" />\n&lt;/template>\n\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n\n  export default {\n    components: {\n      JqxListBox\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    mounted: function () {\n      this.$refs.myListBox.source = this.source;\n    },\n    methods: {\n      onBindingComplete: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "change",
            "description": "<P>This event is triggered when the user selects an item. </P>\n<H4>Code example </H4>\n<P>Bind to the <CODE>change</CODE> by type: jqxListBox. </P>\n<UL><LI>label - gets item's label. \r\n<LI>value - gets the item's value. \r\n<LI>disabled - gets whether the item is enabled/disabled. \r\n<LI>checked - gets whether the item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - gets the item's display html. This can be used instead of label. \r\n<LI>index - gets the item's index. \r\n<LI>group - gets the item's group. </LI></UL>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/MMcmc/",
            "exampleDescription": "Bind to the change event by type:jqxListBox",
            "example": "<PRE><CODE>\r\n$('#jqxListBox').on('change', function (event) {\r\n    // the event is raised when the selection is changed.\r\n    var args = event.args;\r\n    if (args) {\r\n        var index = args.index;\r\n        var item = args.item;\r\n        var originalEvent = args.originalEvent;\r\n        // get item's label and value.\r\n        var label = item.label;\r\n        var value = item.value;\r\n        var type = args.type; // keyboard, mouse or null depending on how the item was selected.\r\n    }\r\n});             \r\n                         </CODE></PRE>"
        },
        {
            "name": "checkChange",
            "description": "<P>This event is triggered when the user checks or unchecks an item. </P>\n<H4>Code example </H4>\n<P>Bind to the <CODE>checkChange</CODE> event by type: jqxListBox. </P>\n<UL><LI>label - gets item's label. \r\n<LI>value - gets the item's value. \r\n<LI>disabled - gets whether the item is enabled/disabled. \r\n<LI>checked - gets whether the item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - gets the item's display html. This can be used instead of label. \r\n<LI>index - gets the item's index. \r\n<LI>group - gets the item's group. </LI></UL>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/h7u2M/",
            "exampleDescription": "Bind to the checkChange event by type:jqxListBox",
            "example": "<PRE><CODE>\r\n$(\"#jqxListBox\").on('checkChange', function (event) {\r\n    var args = event.args;\r\n    // get new check state.\r\n    var checked = args.checked;\r\n    // get the item and it's label and value fields.\r\n    var item = args.item;\r\n    var itemLabel = item.label;\r\n    var itemValue = item.value;\r\n    // get all checked items.\r\n    var checkedItems = $(\"#jqxListBox\").jqxListBox('getCheckedItems');\r\n});\r\n                         </CODE></PRE>",
            "exampleInit": {
                "checkboxes": "true"
            }
        },
        {
            "name": "dragStart",
            "description": "<P>This event is triggered when the user starts a drag operation. </P>\n<H4>Code example </H4>\n<P>Bind to the <CODE>dragStart</CODE> event by type: jqxListBox. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/pXed3/",
            "exampleDescription": "Bind to the dragStart event by type:jqxListBox",
            "example": "<PRE><CODE>\r\n$(\"#jqxListBox\").on('dragStart', function (event) {\r\n    var args = event.args;\r\n    var label = args.label;\r\n    var value = args.value;\r\n    var originalEvent = args.originalEvent;\r\n});\r\n</CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxListBox ref=\"myListBox\" @dragStart=\"onDragStart($event)\"\n        :source=\"source\" :allowDrag=\"true\" :allowDrop=\"true\"/>\n&lt;/template>\n\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n\n  export default {\n    components: {\n      JqxListBox\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      onDragStart: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "dragEnd",
            "description": "<P>This event is triggered when the user drops an item. </P>\n<H4>Code example </H4>\n<P>Bind to the drag<CODE>dragEnd</CODE>nd event by type: jqxListBox. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8QbQb/",
            "exampleDescription": "Bind to the dragEnd event by type:jqxListBox",
            "example": "<PRE><CODE>\r\n$(\"#jqxListBox\").on('dragEnd', function (event) {\r\n    var args = event.args;\r\n    var label = args.label;\r\n    var value = args.value;\r\n    var originalEvent = args.originalEvent;\r\n});\r\n</CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxListBox ref=\"myListBox\" @dragEnd=\"onDragEnd($event)\"\n        :source=\"source\" :allowDrag=\"true\" :allowDrop=\"true\"/>\n&lt;/template>\n\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n\n  export default {\n    components: {\n      JqxListBox\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      onDragEnd: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "select",
            "description": "<P>This event is triggered when the user selects an item. </P>\n<H4>Code example </H4>\n<P>Bind to the <CODE>select</CODE> event by type: jqxListBox. </P>\n<UL><LI>label - gets item's label. \r\n<LI>value - gets the item's value. \r\n<LI>disabled - gets whether the item is enabled/disabled. \r\n<LI>checked - gets whether the item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - gets the item's display html. This can be used instead of label. \r\n<LI>index - gets the item's index. \r\n<LI>group - gets the item's group. </LI></UL>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/wEDq8/",
            "exampleDescription": "Bind to the select event by type:jqxListBox",
            "example": "<PRE><CODE>\r\n$('#jqxListBox').on('select', function (event) {\r\n    var args = event.args;\r\n    if (args) {\r\n        var index = args.index;\r\n        var item = args.item;\r\n        var originalEvent = args.originalEvent;\r\n        // get item's label and value.\r\n        var label = item.label;\r\n        var value = item.value;\r\n        var type = args.type; // keyboard, mouse or null depending on how the item was selected.\r\n    }\r\n});\r\n                        </CODE></PRE>"
        },
        {
            "name": "unselect",
            "description": "<P>This event is triggered when the user unselects an item. </P>\n<H4>Code example </H4>\n<P>Bind to the <CODE>unselect</CODE> event by type: jqxListBox. </P>\n<UL><LI>label - gets item's label. \r\n<LI>value - gets the item's value. \r\n<LI>disabled - gets whether the item is enabled/disabled. \r\n<LI>checked - gets whether the item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - gets the item's display html. This can be used instead of label. \r\n<LI>index - gets the item's index. \r\n<LI>group - gets the item's group. </LI></UL>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/pZWr3/",
            "exampleDescription": "Bind to the unselect event by type:jqxListBox",
            "example": "<PRE><CODE>\r\n$('#jqxListBox').on('unselect', function (event) \r\n{\r\n    var args = event.args;\r\n    if (args) {\r\n        var index = args.index;\r\n        var item = args.item;\r\n        var originalEvent = args.originalEvent;\r\n        // get item's label and value.\r\n        var label = item.label;\r\n        var value = item.value;\r\n    }\r\n}); \r\n                         </CODE></PRE>"
        }
    ],
    "methods": [
        {
            "name": "addItem",
            "description": "<P>Adds a new item to the jqxListBox. Returns 'true', if the new item is added or 'false' if the item is not added. </P>\n<UL><LI>label - determines the item's label. \r\n<LI>value - determines the item's value. \r\n<LI>disabled - determines whether the item is enabled/disabled. \r\n<LI>checked - determines whether item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - determines the item's display html. This can be used instead of label. \r\n<LI>group - determines the item's group. </LI></UL>\n<H4>Code example </H4>\n<P>Invoke the <CODE>addItem</CODE> method. </P>\n<PRE><CODE>// @param string</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('addItem', 'jQuery' ); </CODE></PRE>\n<H4>Code example 2 </H4>\n<P>Invoke the <CODE>addItem</CODE> method. </P>\n<PRE><CODE>// @param object</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('addItem', { label: 'Text' value: 'Id'} ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/YkeU9/",
            "exampleDescription": "adds an item in the jqxListBox",
            "returnDataType": "None",
            "ts_returnDataType": "boolean",
            "arguments": [
                {
                    "name": "Item",
                    "dataType": "object | string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'New Item'" ]
            }
        },
        {
            "name": "beginUpdate",
            "description": "<P>Stops the ListBox's rendering. That method is usually used when multiple items need to be inserted or removed dynamically. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>beginUpdate</CODE> method. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('beginUpdate'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/0721wayw/",
            "exampleDescription": "beginUpdate is invoked.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" />\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"beginUpdate()\">Begin Update&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 80px;\" @click=\"endUpdate()\">End Update&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      beginUpdate: function () {\n        this.$refs.myListBox.beginUpdate();\n      },\n      endUpdate: function () {\n        this.$refs.myListBox.endUpdate();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "clear",
            "description": "<P>Clears all items. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>clear</CODE> method. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('clear'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hhQKp/",
            "exampleDescription": "clears all items in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "clearSelection",
            "description": "<P>Clears all selected items. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>clearSelection</CODE> method. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('clearSelection'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/JyExE/",
            "exampleDescription": "clears the selection in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" :multiple=\"true\"/>\n    &lt;JqxButton style=\"margin-top: 10px;\" :width=\"100\" @click=\"clearSelection()\">Clear Selection&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      clearSelection: function () {\n        this.$refs.myListBox.clearSelection();\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "checkIndex",
            "description": "<P>Checks a list item when the 'checkboxes' property value is true. The index is zero-based, i.e to check the first item, the 'checkIndex' method should be called with parameter 0. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>checkIndex</CODE> method. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('checkIndex', 0); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/T6RLq/",
            "exampleDescription": "checks a box in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" :checkboxes=\"true\"/>\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"checkIndex()\">Check 'Breve'&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 120px;\" @click=\"uncheckIndex()\">Uncheck 'Breve'&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      checkIndex: function () {\n        this.$refs.myListBox.checkIndex(3);\n      },\n      uncheckIndex: function () {\n        this.$refs.myListBox.uncheckIndex(3);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "checkItem",
            "description": "<P>Checks an item. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>checkItem</CODE> method. </P>\n<PRE><CODE>// @param jqxListBox Item</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('checkItem', item ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vv3gK/",
            "exampleDescription": "checks item in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Item",
                    "dataType": "object | string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" :checkboxes=\"true\" />\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"checkItem()\">Check 'Breve'&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 120px;\" @click=\"uncheckItem()\">Uncheck 'Breve'&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      checkItem: function () {\n        this.$refs.myListBox.checkItem('Breve');\n      },\n      uncheckItem: function () {\n        this.$refs.myListBox.uncheckItem('Breve');\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "checkAll",
            "description": "<P>Checks all list items when the 'checkboxes' property value is true. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>checkAll</CODE> method. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('checkAll'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/MkAjD/",
            "exampleDescription": "checks all items in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" :checkboxes=\"true\" />\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"checkAll()\">Check All&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 120px;\" @click=\"uncheckAll()\">Uncheck All&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      checkAll: function () {\n        this.$refs.myListBox.checkAll();\n      },\n      uncheckAll: function () {\n        this.$refs.myListBox.uncheckAll();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "clearFilter",
            "description": "<P>Clears the widget's filter when filtering is applied. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>clearFilter</CODE> method. </P>\n<PRE><CODE>$('#jqxListBox').jqxListBox('clearFilter'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Lprfgq1m/",
            "exampleDescription": "clears the jqxListBox's Filter.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" :filterable=\"true\" />\n    &lt;JqxButton style=\"margin-top: 10px;\" :width=\"100\" @click=\"clearFilter()\">Clear Filter&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      clearFilter: function () {\n        this.$refs.myListBox.clearFilter();\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "destroy",
            "description": "<P>Destroy the jqxListBox widget. The destroy method removes the jqxListBox widget from the web page.</P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxListBox').jqxListBox('destroy');\r\n                        </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Q6MRt/",
            "exampleDescription": "destroys the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "disableItem",
            "description": "<P>Disables an item. Item is an object. </P>\n<UL><LI>label - determines the item's label. \r\n<LI>value - determines the item's value. \r\n<LI>disabled - determines whether the item is enabled/disabled. \r\n<LI>checked - determines whether item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - determines the item's display html. This can be used instead of label. \r\n<LI>group - determines the item's group. </LI></UL>\n<H4>Code example </H4>\n<P>Invoke the <CODE>disableItem</CODE> method. </P>\n<PRE><CODE>// @param number</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('disableItem', \"jQuery\" ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/nXA45/",
            "exampleDescription": "disables an item in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Item",
                    "dataType": "object | string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" />\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"enableItem()\">Enable 'Breve'&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 100px;\" @click=\"disableItem()\">Disable 'Breve'&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      enableItem: function () {\n        this.$refs.myListBox.enableItem('Breve');\n      },\n      disableItem: function () {\n        this.$refs.myListBox.disableItem('Breve');\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "disableAt",
            "description": "<P>Disables an item by index. Index is a number. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>disableAt</CODE> method. </P>\n<PRE><CODE>// @param number</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('disableAt', 8 ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/EFV6x/",
            "exampleDescription": "disables an item in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" />\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"enableItem()\">Enable 'Breve'&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 100px;\" @click=\"disableItem()\">Disable 'Breve'&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      enableItem: function () {\n        this.$refs.myListBox.enableAt(3);\n      },\n      disableItem: function () {\n        this.$refs.myListBox.disableAt(3);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "enableItem",
            "description": "<P>Enables an item. Item is an object. </P>\n<UL><LI>label - determines the item's label. \r\n<LI>value - determines the item's value. \r\n<LI>disabled - determines whether the item is enabled/disabled. \r\n<LI>checked - determines whether item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - determines the item's display html. This can be used instead of label. \r\n<LI>group - determines the item's group. </LI></UL>\n<H4>Code example </H4>\n<P>Invoke the <CODE>enableItem</CODE> method. </P>\n<PRE><CODE>// @param number</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('enableItem', \"jQuery\" ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/RtYbF/",
            "exampleDescription": "enables an item in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Item",
                    "dataType": "object | string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" />\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"enableItem()\">Enable 'Breve'&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 100px;\" @click=\"disableItem()\">Disable 'Breve'&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      enableItem: function () {\n        this.$refs.myListBox.enableItem('Breve');\n      },\n      disableItem: function () {\n        this.$refs.myListBox.disableItem('Breve');\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "enableAt",
            "description": "<P>Enables a disabled item by index. Index is a number. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>enableAt</CODE> method. </P>\n<PRE><CODE>// @param number</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('enableAt', 3 ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Hgdce/",
            "exampleDescription": "enables an item in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Index",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" />\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"enableItem()\">Enable 'Breve'&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 100px;\" @click=\"disableItem()\">Disable 'Breve'&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      enableItem: function () {\n        this.$refs.myListBox.enableAt(3);\n      },\n      disableItem: function () {\n        this.$refs.myListBox.disableAt(3);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "ensureVisible",
            "description": "<P>Ensures that an item is visible. Index is number. If necessary scrolls to the item. Insted of Index, you can also pass the item's value. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>ensureVisible</CODE> method. </P>\n<PRE><CODE>// @param number</CODE></PRE>\n<PRE><CODE>// @optional param boolean - determines whether to make the item to be the top visible item in the list</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('ensureVisible', 2 ); </CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('ensureVisible', \"Iced Coffee\" ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Kd8mw/",
            "exampleDescription": "ensures the visibility of an items in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "item",
                    "dataType": "number/string/object",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "8" ]
            }
        },
        {
            "name": "endUpdate",
            "description": "<P>Starts the ListBox's rendering and refreshes the ListBox. That method is usually used in combination with the 'beginUpdate' method when multiple items need to be inserted or removed dynamically. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>endUpdate</CODE> method. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('endUpdate'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/0721wayw/",
            "exampleDescription": "endUpdate is invoked.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" />\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"beginUpdate()\">Begin Update&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 80px;\" @click=\"endUpdate()\">End Update&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      beginUpdate: function () {\n        this.$refs.myListBox.beginUpdate();\n      },\n      endUpdate: function () {\n        this.$refs.myListBox.endUpdate();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "focus",
            "description": "<P>Sets the focus to the jqxListBox. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>focus</CODE> method. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('focus'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dGv4J/",
            "exampleDescription": "focuses the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getItems",
            "description": "<P>Gets all items. The returned value is an array of Items. </P>\n<UL><LI>label - gets item's label. \r\n<LI>value - gets the item's value. \r\n<LI>disabled - gets whether the item is enabled/disabled. \r\n<LI>checked - gets whether the item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - gets the item's display html. This can be used instead of label. \r\n<LI>index - gets the item's index. \r\n<LI>group - gets the item's group. </LI></UL>\n<H4>Code example </H4>\n<P>Invoke the <CODE>getItems</CODE> method. </P>\n<PRE><CODE>var items = $(\"#jqxListBox\").jqxListBox('getItems'); </CODE></PRE>\n<PRE><CODE>var items = $(\"#jqxListBox\").jqxListBox('getItems'); var firstItem = items[0]; </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/SDJqH/",
            "exampleDescription": "returns an Array of all items and displays them",
            "returnDataType": "Array",
            "ts_returnDataType": "Array<any>",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getSelectedItems",
            "description": "<P>Gets the selected ListBox items. The returned value is an Array of items. </P>\n<UL><LI>label - gets item's label. \r\n<LI>value - gets the item's value. \r\n<LI>disabled - gets whether the item is enabled/disabled. \r\n<LI>checked - gets whether the item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - gets the item's display html. This can be used instead of label. \r\n<LI>index - gets the item's index. \r\n<LI>group - gets the item's group. </LI></UL>\n<H4>Code example </H4>\n<P>Invoke the <CODE>getSelectedItems</CODE> method. </P>\n<PRE><CODE>var items = $(\"#jqxListBox\").jqxListBox('getSelectedItems'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3F4DA/",
            "exampleDescription": "gets the selected items in the jqxListBox",
            "returnDataType": "Arrays",
            "ts_returnDataType": "Array<any>",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getCheckedItems",
            "description": "<P>Gets the checked ListBox items. Returns an Array of checked items. </P>\n<UL><LI>label - gets item's label. \r\n<LI>value - gets the item's value. \r\n<LI>disabled - gets whether the item is enabled/disabled. \r\n<LI>checked - gets whether the item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - gets the item's display html. This can be used instead of label. \r\n<LI>index - gets the item's index. \r\n<LI>group - gets the item's group. </LI></UL>\n<H4>Code example </H4>\n<P>Invoke the <CODE>getCheckedItems</CODE> method. </P>\n<PRE><CODE>var items = $(\"#jqxListBox\").jqxListBox('getCheckedItems'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/5eMvx/",
            "exampleDescription": "returns an Array of all checked items and displays them",
            "returnDataType": "Array",
            "ts_returnDataType": "Array<any>",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "checkboxes": "true"
            }
        },
        {
            "name": "getItem",
            "description": "<P>Gets an item by index. The returned value is an object with the following fields: </P>\n<UL><LI>label - gets item's label. \r\n<LI>value - gets the item's value. \r\n<LI>disabled - gets whether the item is enabled/disabled. \r\n<LI>checked - gets whether the item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - gets the item's display html. This can be used instead of label. \r\n<LI>index - gets the item's index. \r\n<LI>group - gets the item's group. </LI></UL>\n<H4>Code example </H4>\n<P>Invoke the <CODE>getItem</CODE> method. </P>\n<PRE><CODE>// @param number</CODE></PRE>\n<PRE><CODE>var item = $(\"#jqxListBox\").jqxListBox('getItem', 1 ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/MxBma/",
            "exampleDescription": "gets the an item by its index in the jqxListBox",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "Index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "3" ]
            }
        },
        {
            "name": "getItemByValue",
            "description": "<P>Gets an item by its value. The returned value is an object with the following fields: </P>\n<UL><LI>label - gets item's label. \r\n<LI>value - gets the item's value. \r\n<LI>disabled - gets whether the item is enabled/disabled. \r\n<LI>checked - gets whether the item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - gets the item's display html. This can be used instead of label. \r\n<LI>index - gets the item's index. \r\n<LI>group - gets the item's group. </LI></UL>\n<H4>Code example </H4>\n<P>Invoke the <CODE>getItemByValue</CODE> method. </P>\n<PRE><CODE>// @param Value</CODE></PRE>\n<PRE><CODE>var item = $(\"#jqxWidget\").jqxListBox('getItemByValue', \"Bon app'\");</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/TPdvH/",
            "exampleDescription": "gets the item by its value in the jqxListBox",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "Item",
                    "dataType": "object | string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'Breve'" ]
            }
        },
        {
            "name": "getSelectedItem",
            "description": "<P>Gets the selected item. The returned value is an object or null(if there is no selected item). </P>\n<UL><LI>label - gets item's label. \r\n<LI>value - gets the item's value. \r\n<LI>disabled - gets whether the item is enabled/disabled. \r\n<LI>checked - gets whether the item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - gets the item's display html. This can be used instead of label. \r\n<LI>index - gets the item's index. \r\n<LI>group - gets the item's group. </LI></UL>\n<H4>Code example </H4>\n<P>Invoke the <CODE>getSelectedItem</CODE> method. </P>\n<PRE><CODE>// @param number</CODE></PRE>\n<PRE><CODE>var item = $(\"#jqxListBox\").jqxListBox('getSelectedItem'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/unxYm/",
            "exampleDescription": "gets the selected item by its value in the jqxListBox",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getSelectedIndex",
            "description": "<P>Gets the index of the selected item. The returned value is the index of the selected item. If there's no selected item, -1 is returned. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>getSelectedIndex</CODE> method. </P>\n<PRE><CODE>// @param number</CODE></PRE>\n<PRE><CODE>var index = $(\"#jqxListBox\").jqxListBox('getSelectedIndex'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/UJs3A/",
            "exampleDescription": "returns the selected item's index and displays it",
            "returnDataType": "number",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "insertAt",
            "description": "<P>Inserts a new item to the jqxListBox. Returns 'true', if the new item is inserted or false if the insertaion fails. The first parameter is object or string - the new item. The second parameter is number - the item's index. </P>\n<UL><LI>label - determines the item's label. \r\n<LI>value - determines the item's value. \r\n<LI>disabled - determines whether the item is enabled/disabled. \r\n<LI>checked - determines whether item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - determines the item's display html. This can be used instead of label. \r\n<LI>group - determines the item's group. </LI></UL>\n<H4>Code example </H4>\n<P>Invoke the <CODE>insertAt</CODE> method. </P>\n<PRE><CODE>// @param string</CODE></PRE>\n<PRE><CODE>// @param number</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('insertAt', 'jQuery', 1 ); </CODE></PRE>\n<H4>Code example 2 </H4>\n<P>Invoke the <CODE>insertAt</CODE> method. </P>\n<PRE><CODE>// @param object</CODE></PRE>\n<PRE><CODE>// @param number</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('insertAt', '{ label: 'Text' value: 'Id'}, 1 ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/WEs9x/",
            "exampleDescription": "inserts an item in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Item",
                    "dataType": "object | string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "Index",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'New Item'", 1 ]
            }
        },
        {
            "name": "invalidate",
            "description": "<P>The invalidate method will repaint the jqxListBox's items.</P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>invalidate</CODE> method. </P>\n<PRE><CODE>$('#jqxListBox').jqxListBox('invalidate');\r\n                        </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/eccsD/",
            "exampleDescription": "invalidates the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "indeterminateItem",
            "description": "<P>Indeterminates an item. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>indeterminateItem</CODE> method. </P>\n<PRE><CODE>// @param jqxListBox Item</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('indeterminateItem', item ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/m33Ff/",
            "exampleDescription": "indeterminate item in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Item",
                    "dataType": "object | string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'Breve'" ]
            },
            "extraData": {
                "checkboxes": "true"
            }
        },
        {
            "name": "indeterminateIndex",
            "description": "<P>indeterminates a list item when the 'checkboxes' property value is true. The index is zero-based, i.e to indeterminate the first item, the 'indeterminateIndex' method should be called with parameter 0. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>indeterminateIndex</CODE> method. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('indeterminateIndex', 0); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/BzRDp/",
            "exampleDescription": "indeterminate a box in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "3" ]
            },
            "extraData": {
                "checkboxes": "true"
            }
        },
        {
            "name": "loadFromSelect",
            "description": "",
            "exampleURL": "",
            "exampleDescription": "",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "selector",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;div style=\"float: left;\">\n      &lt;JqxListBox ref=\"myListBox\" :width=\"200\" :height=\"250\">\n      &lt;/JqxListBox>\n    &lt;/div>\n    &lt;div style=\"float: left;\">\n      &lt;select style=\"height: 250px; width: 200px; margin-left: 30px;\" size=\"2\" id=\"select\">\n        &lt;option>Affogato&lt;/option>\n        &lt;option>Americano&lt;/option>\n        &lt;option>Bicerin&lt;/option>\n        &lt;option>Breve&lt;/option>\n        &lt;option>Café Bombón&lt;/option>\n        &lt;option>Caffé Corretto&lt;/option>\n        &lt;option>Café Crema&lt;/option>\n        &lt;option>Caffé Latte&lt;/option>\n        &lt;option>Caffé macchiato&lt;/option>\n        &lt;option>Café mélange&lt;/option>\n        &lt;option>Coffee milk&lt;/option>\n        &lt;option>Cafe mocha&lt;/option>\n        &lt;option>Cappuccino&lt;/option>\n        &lt;option>Carajillo&lt;/option>\n        &lt;option>Cuban espresso&lt;/option>\n        &lt;option>Espresso&lt;/option>\n        &lt;option selected=\"selected\">The Flat White&lt;/option>\n        &lt;option>Frappuccino&lt;/option>\n        &lt;option>Galao&lt;/option>\n        &lt;option>Greek frappé coffee&lt;/option>\n        &lt;option>Iced Coffee﻿&lt;/option>\n        &lt;option>Indian filter coffee&lt;/option>\n        &lt;option>Instant coffee&lt;/option>\n        &lt;option>Irish coffee&lt;/option>\n        &lt;option>Liqueur coffee&lt;/option>\n      &lt;/select>\n    &lt;/div>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue\";\n  export default {\n    components: {\n      JqxListBox\n    },\n    beforeCreate: function () {\n      this.updating = false;\n    },\n    mounted: function () {\n      this.$refs.myListBox.loadFromSelect('select');\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "removeItem",
            "description": "<P>Removes an item from the listbox. Parameter type: object returned by the \"getItem\" method or string - the value of an item. Returns 'true', if the item is removed or 'false', if the item is not removed. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>removeItem</CODE> method. </P>\n<PRE><CODE>// @param object</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('removeItem', \"List Item\" ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/TKhjr/",
            "exampleDescription": "removes an item in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Item",
                    "dataType": "object | string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'Breve'" ]
            }
        },
        {
            "name": "removeAt",
            "description": "<P>Removes an item from the listbox. Parameter type: number - the index of the item. The method returns 'true', if the item is removed or 'false', if the item is not removed. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>removeAt</CODE> method. </P>\n<PRE><CODE>// @param number</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('removeAt', 3 ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/DfsTq/",
            "exampleDescription": "removes an item in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Index",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "3" ]
            }
        },
        {
            "name": "render",
            "description": "<P>Renders the jqxListBox widget.</P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>render</CODE> method. </P>\n<PRE><CODE>$('#jqxListBox').jqxListBox('render');\r\n                        </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/DNkZR/",
            "exampleDescription": "renders the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "refresh",
            "description": "<P>Refreshes the jqxListBox widget. The refresh method will update the jqxListBox's layout, size and data.</P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>refresh</CODE> method. </P>\n<PRE><CODE>$('#jqxListBox').jqxListBox('refresh');\r\n                        </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/6qC79/",
            "exampleDescription": "refreshes the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "selectItem",
            "description": "<P>Selects an item. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>selectItem</CODE> method. </P>\n<PRE><CODE>// @param jqxListBox Item</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('selectItem', item ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8MaPZ/",
            "exampleDescription": "select item in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Item",
                    "dataType": "object | string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" />\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"selectItem()\">Select 'Breve'&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 120px;\" @click=\"unselectItem()\">Unselect 'Breve'&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      selectItem: function () {\n        this.$refs.myListBox.selectItem('Breve');\n      },\n      unselectItem: function () {\n        this.$refs.myListBox.unselectItem('Breve');\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "selectIndex",
            "description": "<P>Selects item. Index is number. The index is zero-based, i.e to select the first item, the 'selectIndex' method should be called with parameter 0. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>selectIndex</CODE> method. </P>\n<PRE><CODE>// @param number</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('selectIndex', 0 ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/E7xHX/",
            "exampleDescription": "select an item by its index in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Index",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" />\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"selectItem()\">Select 'Breve'&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 120px;\" @click=\"unselectItem()\">Unselect 'Breve'&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      selectItem: function () {\n        this.$refs.myListBox.selectIndex(3);\n      },\n      unselectItem: function () {\n        this.$refs.myListBox.unselectIndex(3);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "updateItem",
            "description": "<P>Updates an item. The first parameter is the new item. The second parameter could be an existing item or the value of an existing item. </P>\n<UL><LI>label - determines the item's label. \r\n<LI>value - determines the item's value. \r\n<LI>disabled - determines whether the item is enabled/disabled. \r\n<LI>checked - determines whether item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - determines the item's display html. This can be used instead of label. \r\n<LI>group - determines the item's group. </LI></UL>\n<H4>Code example </H4>\n<P>Invoke the <CODE>updateItem</CODE> method. </P>\n<PRE><CODE>// @param object</CODE></PRE>\n<PRE><CODE>// @param object</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('updateItem', { label: \"Text\", value: \"Id1\" }, \"Antonio Moreno Taquera\");</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/YCK47/",
            "exampleDescription": "updates an item in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Item",
                    "dataType": "object | string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "Value",
                    "dataType": "string",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'New Breve'", "'Breve'" ]
            }
        },
        {
            "name": "updateAt",
            "description": "<P>Updates an item. The first parameter is the new item. The second parameter is the index of the item to be updated. </P>\n<UL><LI>label - determines the item's label. \r\n<LI>value - determines the item's value. \r\n<LI>disabled - determines whether the item is enabled/disabled. \r\n<LI>checked - determines whether item is checked/unchecked. \r\n<LI>hasThreeStates - determines whether the item's checkbox supports three states. \r\n<LI>html - determines the item's display html. This can be used instead of label. \r\n<LI>group - determines the item's group. </LI></UL>\n<H4>Code example </H4>\n<P>Invoke the <CODE>updateAt</CODE> method. </P>\n<PRE><CODE>// @param number</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('updateAt', { label: \"Text\", value: \"Id1\" }, 3 );</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/k4bUK/",
            "exampleDescription": "updates an item in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "item",
                    "dataType": "object | string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "index",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'New Breve'", "3" ]
            }
        },
        {
            "name": "unselectIndex",
            "description": "<P>Unselects item by index. The index is zero-based, i.e to select the first item, the 'unselectIndex' method should be called with parameter 0. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>unselectIndex</CODE> method. </P>\n<PRE><CODE>// @param number</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('unselectIndex', 5 ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vtSBP/",
            "exampleDescription": "unselect an item by its index in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" />\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"selectItem()\">Select 'Breve'&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 120px;\" @click=\"unselectItem()\">Unselect 'Breve'&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      selectItem: function () {\n        this.$refs.myListBox.selectIndex(3);\n      },\n      unselectItem: function () {\n        this.$refs.myListBox.unselectIndex(3);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "unselectItem",
            "description": "<P>Unselects an item. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>unselectItem</CODE> method. </P>\n<PRE><CODE>// @param jqxListBox Item</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('unselectItem', item ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/uFSmv/",
            "exampleDescription": "unselect item in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "item",
                    "dataType": "object | string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" />\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"selectItem()\">Select 'Breve'&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 120px;\" @click=\"unselectItem()\">Unselect 'Breve'&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      selectItem: function () {\n        this.$refs.myListBox.selectItem('Breve');\n      },\n      unselectItem: function () {\n        this.$refs.myListBox.unselectItem('Breve');\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "uncheckIndex",
            "description": "<P>Unchecks a list item when the 'checkboxes' property value is true. The index is zero-based, i.e to uncheck the first item, the 'uncheckIndex' method should be called with parameter 0. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>uncheckIndex</CODE> method. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('uncheckIndex', 0); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/63jwz/",
            "exampleDescription": "unchecks a box in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" :checkboxes=\"true\"/>\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"checkIndex()\">Check 'Breve'&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 120px;\" @click=\"uncheckIndex()\">Uncheck 'Breve'&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      checkIndex: function () {\n        this.$refs.myListBox.checkIndex(3);\n      },\n      uncheckIndex: function () {\n        this.$refs.myListBox.uncheckIndex(3);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "uncheckItem",
            "description": "<P>Unchecks an item. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>uncheckItem</CODE> method. </P>\n<PRE><CODE>// @param jqxListBox Item</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('uncheckItem', item ); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/TF38W/",
            "exampleDescription": "unchecks item in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "item",
                    "dataType": "object | string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" :checkboxes=\"true\" />\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"checkItem()\">Check 'Breve'&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 120px;\" @click=\"uncheckItem()\">Uncheck 'Breve'&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      checkItem: function () {\n        this.$refs.myListBox.checkItem('Breve');\n      },\n      uncheckItem: function () {\n        this.$refs.myListBox.uncheckItem('Breve');\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "uncheckAll",
            "description": "<P>Unchecks all list items when the 'checkboxes' property value is true. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>uncheckAll</CODE> method. </P>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('uncheckAll'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/WZH7G/",
            "exampleDescription": "unchecks all items in the jqxListBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxListBox ref=\"myListBox\"\n          :source=\"source\" :checkboxes=\"true\" />\n    &lt;jqxButton style=\"width: 100px;margin-right:10px;\" @click=\"checkAll()\">Check All&lt;/jqxButton>\n    &lt;jqxButton style=\"width: 120px;\" @click=\"uncheckAll()\">Uncheck All&lt;/jqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxListBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlistbox.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxListBox,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: [\n          \"Affogato\",\n          \"Americano\",\n          \"Bicerin\",\n          \"Breve\",\n          \"Cafe Bombon\",\n          \"Cafe au lait\",\n          \"Caffe Corretto\",\n          \"Cafe Crema\",\n          \"Caffe Latte\"\n        ]\n      }\n    },\n    methods: {\n      checkAll: function () {\n        this.$refs.myListBox.checkAll();\n      },\n      uncheckAll: function () {\n        this.$refs.myListBox.uncheckAll();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    margin-top: 20px;\n    display: inline-block;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "val",
            "description": "<P>Sets or gets the selected value. </P>\n<H4>Code example </H4>\n<P>Invoke the <CODE>val</CODE> method. </P>\n<PRE><CODE>var value = $(\"#jqxListBox\").jqxListBox('val');</CODE></PRE>\n<PRE><CODE>var value = $(\"#jqxListBox\").val();</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").jqxListBox('val', 'New Value');</CODE></PRE>\n<PRE><CODE>$(\"#jqxListBox\").val('New Value');</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/LTdeV/",
            "exampleDescription": "sets or gets the selected value in the jqxListBox",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "value",
                    "dataType": "string",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": true
                }
            ],
            "extraData": {
                "selectedIndex": "3"
            }
        }
    ]
}