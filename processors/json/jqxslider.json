{
    "widget": {
        "name": "jqxSlider",
        "description": "Represents a flexible Slider that lets the user select from a range of values by moving a thumb along a track. The slider is completely customizable in terms of appearance and offers numerous configuration options like mouse wheel and keyboard support, smooth or step-based slider and support for range sliders.",
        "angular2": {
            "name": "jqxSliderComponent",
            "selector": "jqxSlider"
        }
    },
    "dataTypes": [
        {
            "name": "SliderButtonsPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "both", "left", "right" ]
        },
        {
            "name": "SliderLayout",
            "ts_dataType": "enum",
            "enumOptions": [ "normal", "reverse" ]
        },
        {
            "name": "SliderMode",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "fixed" ]
        },
        {
            "name": "SliderTemplate",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "primary", "success", "warning", "danger", "info" ]
        },
        {
            "name": "SliderTicksPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "top", "bottom", "both" ]
        },
        {
            "name": "SliderTooltipPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "near", "far" ]
        },
        {
            "name": "SliderTickLabelFormatFunction",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "value",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Value",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "SliderTooltipFormatFunction",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "value",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Value",
                    "defaultValue": ""
                }
            ]
        }
    ],
    "exampleInit": {
        "height": "100"
    },
    "properties": [
        {
            "name": "buttonsPosition",
            "defaultValue": "both",
            "description": "<P>Sets or gets scroll buttons position. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'both'</CODE></PRE>\n<PRE><CODE>'left'</CODE></PRE>\n<PRE><CODE>'right'</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>buttonsPosition</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ buttonsPosition: 'left' }); </CODE></PRE>\n\r\n<P>Get the <CODE>buttonsPosition</CODE> property. </P>\n<PRE><CODE>var buttonsPosition = $('#jqxSlider').jqxSlider('buttonsPosition'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/trxyj/",
            "exampleDescription": "buttonsPosition is set to 'left'",
            "dataType": "string",
            "ts_dataType": "enum:SliderButtonsPosition",
            "exampleInit": {
                "buttonsPosition": "left"
            }
        },
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the slider is disabled.</P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ disabled:true }); </CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxSlider').jqxSlider('disabled');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Ftadc/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "height",
            "defaultValue": "35",
            "description": "<P>Sets or gets the slider's height. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ height:\"15px\" });</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxSlider').jqxSlider('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FXhTQ/",
            "exampleDescription": "height is set to 50",
            "dataType": "number",
            "ts_dataType": "string | number"
        },
        {
            "name": "layout",
            "defaultValue": "\"normal\"",
            "description": "<P>Sets or gets the slider's layout. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'normal'</CODE></PRE>\n<PRE><CODE>'reverse'-the slider is filled from right-to-left(horizontal slider) and from top-to-bottom(vertical slider)</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>layout</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ layout: \"reverse\" }); </CODE></PRE>\n\r\n<P>Get the <CODE>layout</CODE> property. </P>\n<PRE><CODE>var layout = $('#jqxSlider').jqxSlider('layout'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/K8x3H/",
            "exampleDescription": "layout is set to 'reverse'",
            "dataType": "string",
            "ts_dataType": "enum:SliderLayout",
            "exampleInit": {
                "layout": "reverse"
            }
        },
        {
            "name": "mode",
            "defaultValue": "default",
            "description": "<P>Sets or gets slider's mode. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'default'- the slider's thumb can be dragged smoothly ( like a scrollbar )</CODE></PRE>\n<PRE><CODE>'fixed'- the thumb is dragged with a 'step' specified by the 'step' property.</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>mode</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ mode: 'fixed' }); </CODE></PRE>\n\r\n<P>Get the <CODE>mode</CODE> property. </P>\n<PRE><CODE>var mode = $('#jqxSlider').jqxSlider('mode'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/7WRAL/",
            "exampleDescription": "mode is set to 'fixed'",
            "dataType": "string",
            "ts_dataType": "enum:SliderMode",
            "exampleInit": {
                "mode": "fixed"
            }
        },
        {
            "name": "minorTicksFrequency",
            "defaultValue": "1",
            "description": "<P>Sets or gets slider's minor ticks frequency. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>minorTicksFrequency</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ minorTicksFrequency: 1 });</CODE></PRE>\n\r\n<P>Get the <CODE>minorTicksFrequency</CODE> property. </P>\n<PRE><CODE>var minorTicksFrequency = $('#jqxSlider').jqxSlider('minorTicksFrequency');</CODE></PRE>",
            "example": "",
            "exampleURL": "",
            "exampleDescription": "",
            "dataType": "number",
            "exampleInit": {
                "showMinorTicks": "true",
                "minorTicksFrequency": "1"
            }
        },
        {
            "name": "minorTickSize",
            "defaultValue": "4",
            "description": "<P>Sets or gets slider's minor ticks size. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>minorTickSize</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ minorTickSize: 5 }); </CODE></PRE>\n\r\n<P>Get the <CODE>minorTickSize</CODE> property. </P>\n<PRE><CODE>var minorTickSize = $('#jqxSlider').jqxSlider('minorTickSize'); </CODE></PRE>",
            "example": "",
            "exampleURL": "",
            "exampleDescription": "",
            "dataType": "number",
            "exampleInit": {
                "showMinorTicks": "true",
                "minorTicksFrequency": "1",
                "minorTickSize": "10"
            }
        },
        {
            "name": "max",
            "defaultValue": "10",
            "description": "<P>Sets or gets slider's maximum value. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>max</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ max: 100 }); </CODE></PRE>\n\r\n<P>Get the <CODE>max</CODE> property. </P>\n<PRE><CODE>var max = $('#jqxSlider').jqxSlider('max'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/RckuM/",
            "exampleDescription": "max is set to 15",
            "dataType": "number",
            "exampleInit": {
                "max": "30"
            }
        },
        {
            "name": "min",
            "defaultValue": "0",
            "description": "<P>Sets or gets slider's minimum value. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>min</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ min: 5}); </CODE></PRE>\n\r\n<P>Get the <CODE>min</CODE> property. </P>\n<PRE><CODE>var min= $('#jqxSlider').jqxSlider('min'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/bqm5n/",
            "exampleDescription": "min is set to 5",
            "dataType": "number",
            "exampleInit": {
                "min": "5"
            }
        },
        {
            "name": "orientation",
            "defaultValue": "'horizontal'",
            "description": "",
            "example": "",
            "exampleURL": "",
            "exampleDescription": "",
            "dataType": "string",
            "exampleInit": {
                "orientation": "vertical"
            }
        },
        {
            "name": "rangeSlider",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the slider is displayed as a range slider and has 2 thumbs. This allows the user to select a range of values. By default, end-users can select only a single value. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>rangeSlider</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ rangeSlider: true }); </CODE></PRE>\n\r\n<P>Get the <CODE>rangeSlider</CODE> property. </P>\n<PRE><CODE>var rangeSlider = $('#jqxSlider').jqxSlider('rangeSlider'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/LDVjx/",
            "exampleDescription": "rangeSlider is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rangeSlider": "true"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts.</P>",
            "example": "<pre><CODE>$('#jqxSlider').jqxSlider({rtl : true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/39KaU/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "step",
            "defaultValue": "1",
            "description": "<P>Sets or gets the slider's step when the user is using the keyboard arrows, slider increment and decrement buttons or the mouse wheel for changing the slider's value. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>step</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ step: 2 }); </CODE></PRE>\n\r\n<P>Get the <CODE>step</CODE> property. </P>\n<PRE><CODE>var step = $('#jqxSlider').jqxSlider('step'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/jenPC/",
            "exampleDescription": "step is set to 2",
            "dataType": "number",
            "exampleInit": {
                "step": "3"
            }
        },
        {
            "name": "showTicks",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether ticks will be shown. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>showTicks</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ showTicks: false }); </CODE></PRE>\n\r\n<P>Get the <CODE>showTicks</CODE> property. </P>\n<PRE><CODE>var showTicks = $('#jqxSlider').jqxSlider('showTicks'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4H83s/",
            "exampleDescription": "showTicks is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showTicks": "false"
            }
        },
        {
            "name": "showMinorTicks",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether minor ticks will be shown. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>showMinorTicks</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ showMinorTicks: true }); </CODE></PRE>\n\r\n<P>Get the <CODE>showMinorTicks</CODE> property. </P>\n<PRE><CODE>var showMinorTicks = $('#jqxSlider').jqxSlider('showMinorTicks'); </CODE></PRE>",
            "example": "",
            "exampleURL": "",
            "exampleDescription": "",
            "dataType": "boolean",
            "exampleInit": {
                "showMinorTicks": "true"
            }
        },
        {
            "name": "showTickLabels",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether major tick labels will be shown. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>showTickLabels</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ showTickLabels: true });</CODE></PRE>\n\r\n<P>Get the <CODE>showTickLabels</CODE> property. </P>\n<PRE><CODE>var showTickLabels = $('#jqxSlider').jqxSlider('showTickLabels'); </CODE></PRE>",
            "example": "",
            "exampleURL": "",
            "exampleDescription": "",
            "dataType": "boolean",
            "exampleInit": {
                "showTickLabels": "true"
            }
        },
        {
            "name": "showButtons",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether the scroll buttons will be shown. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>showButtons</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ showButtons: false });</CODE></PRE>\n\r\n<P>Get the <CODE>showButtons</CODE> property. </P>\n<PRE><CODE>var showButtons = $('#jqxSlider').jqxSlider('showButtons'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/MduKV/",
            "exampleDescription": "showButtons is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showButtons": "false"
            }
        },
        {
            "name": "showRange",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether the slider range background is displayed. This is the fill between the slider's left button and the slider's thumb to indicate the selected value. In range slider mode, the space between the handles is filled to indicate the selected values. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>showRange</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ showRange: false }); </CODE></PRE>\n\r\n<P>Get the <CODE>showRange</CODE> property. </P>\n<PRE><CODE>var showRange = $('#jqxSlider').jqxSlider('showRange'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/z8yaj/",
            "exampleDescription": "showRange is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showRange": "false"
            }
        },
        {
            "name": "template",
            "defaultValue": "'default'",
            "description": "<P>Determines the template as an alternative of the default styles. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'default' - the default template. The style depends only on the \"theme\" property value.</CODE></PRE>\n<PRE><CODE>'primary' - dark blue style for extra visual weight.</CODE></PRE>\n<PRE><CODE>'success' - green style for successful or positive action.</CODE></PRE>\n<PRE><CODE>'warning' - orange style which indicates caution.</CODE></PRE>\n<PRE><CODE>'danger' - red style which indicates a dangerous or negative action.</CODE></PRE>\n<PRE><CODE>'info' - blue button, not tied to a semantic action or use.</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>template</CODE> property. </P>\n<PRE><CODE>$(\"#jqxSlider\").jqxSlider({ template: 'primary'});</CODE></PRE>\n\r\n<P>Get the <CODE>template</CODE> property. </P>\n<PRE><CODE>var template = $('#jqxSlider').jqxSlider('template');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/cgqL9ox6/",
            "exampleDescription": "template is set to 'success'",
            "dataType": "string",
            "ts_dataType": "enum:SliderTemplate",
            "exampleInit": {
                "template": "success"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n<PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;\r\n</CODE></PRE>\r\n</CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Z2544/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "ticksPosition",
            "defaultValue": "both",
            "description": "<P>Sets or gets slider's ticks position. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'top'</CODE></PRE>\n<PRE><CODE>'bottom'</CODE></PRE>\n<PRE><CODE>'both'</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>ticksPosition</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ ticksPosition: 'top' }); </CODE></PRE>\n\r\n<P>Get the <CODE>ticksPosition</CODE> property. </P>\n<PRE><CODE>var ticksPosition = $('#jqxSlider').jqxSlider('ticksPosition'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/RSDje/",
            "exampleDescription": "ticksPosition is set to 'bottom'",
            "dataType": "string",
            "ts_dataType": "enum:SliderTicksPosition",
            "exampleInit": {
                "ticksPosition": "bottom"
            }
        },
        {
            "name": "ticksFrequency",
            "defaultValue": "2",
            "description": "<P>Sets or gets slider's major ticks frequency. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>ticksFrequency</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ ticksFrequency: 1 }); </CODE></PRE>\n\r\n<P>Get the <CODE>ticksFrequency</CODE> property. </P>\n<PRE><CODE>var ticksFrequency = $('#jqxSlider').jqxSlider('ticksFrequency'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/2P7VC/",
            "exampleDescription": "ticksFrequency is set to 1",
            "dataType": "number",
            "exampleInit": {
                "ticksFrequency": "1"
            }
        },
        {
            "name": "tickSize",
            "defaultValue": "7",
            "description": "<P>Sets or gets slider's major ticks size. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>tickSize</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ tickSize: 10 }); </CODE></PRE>\n\r\n<P>Get the <CODE>tickSize</CODE> property. </P>\n<PRE><CODE>var tickSize = $('#jqxSlider').jqxSlider('tickSize'); </CODE></PRE>",
            "example": "",
            "exampleURL": "",
            "exampleDescription": "",
            "dataType": "number",
            "exampleInit": {
                "tickSize": "10"
            }
        },
        {
            "name": "tickLabelFormatFunction",
            "defaultValue": "null",
            "description": "<P>Sets or gets the major ticks labels formatting function. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>tickLabelFormatFunction</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ tickLabelFormatFunction: function (value) {\r\n    return new $.jqx.math().getDecimalNotation(value, 'exponential');\r\n}\r\n});</CODE></PRE>\n\r\n<P>Get the <CODE>tickLabelFormatFunction</CODE> property. </P>\n<PRE><CODE>var tickLabelFormatFunction = $('#jqxSlider').jqxSlider('tickLabelFormatFunction');\r\n                        </CODE></PRE>",
            "example": "",
            "exampleURL": "",
            "exampleDescription": "",
            "dataType": "Function",
            "ts_dataType": "(value: SliderTickLabelFormatFunction['value']) => string",
            "exampleInit": {
                "tickLabelFormatFunction": "tickLabelFormatFunction",
                "showTickLabels": "true",
                "exampleData": "return value;"
            }
        },
        {
            "name": "tooltip",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the slider tooltip will be shown. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>tooltip</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ tooltip: false }); </CODE></PRE>\n\r\n<P>Get the <CODE>tooltip</CODE> property. </P>\n<PRE><CODE>var tooltip = $('#jqxSlider').jqxSlider('tooltip'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/fbPsv/",
            "exampleDescription": "tooltip is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "tooltip": "true"
            }
        },
        {
            "name": "tooltipHideDelay",
            "defaultValue": "500",
            "description": "<P>Sets or gets the tooltip's hide delay. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>tooltipHideDelay</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ tooltipHideDelay: 2000 }); </CODE></PRE>\n\r\n<P>Get the <CODE>tooltipHideDelay</CODE> property. </P>\n<PRE><CODE>var tooltipHideDelay = $('#jqxSlider').jqxSlider('tooltipHideDelay'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Lyoh02wo/",
            "exampleDescription": "tooltipHideDelay is set to 2000",
            "dataType": "number",
            "exampleInit": {
                "tooltip": "true",
                "tooltipHideDelay": "2000"
            }
        },
        {
            "name": "tooltipPosition",
            "defaultValue": "\"near\"",
            "description": "<P>Sets or gets the tooltip's position. Possible values: \"near\", \"far\" </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>tooltipPosition</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ tooltipPosition: \"far\" }); </CODE></PRE>\n\r\n<P>Get the <CODE>tooltipPosition</CODE> property. </P>\n<PRE><CODE>var tooltipPosition = $('#jqxSlider').jqxSlider('tooltipPosition'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tqeLgh63/",
            "exampleDescription": "tooltipPosition is set to \"far\"",
            "dataType": "string",
            "ts_dataType": "enum:SliderTooltipPosition",
            "exampleInit": {
                "tooltip": "true",
                "tooltipPosition": "far"
            }
        },
        {
            "name": "tooltipFormatFunction",
            "defaultValue": "null",
            "description": "<P>Sets or gets the tooltip's tooltip formatting. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>tooltipFormatFunction</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ tooltipFormatFunction: function(value){return new number(value).toPrecision(2); }}); </CODE></PRE>\n\r\n<P>Get the <CODE>tooltipFormatFunction</CODE> property. </P>\n<PRE><CODE>var tooltipFormatFunction = $('#jqxSlider').jqxSlider('tooltipFormatFunction'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tn3pv9fn/",
            "exampleDescription": "tooltipFormatFunction is set to custom function",
            "dataType": "Function",
            "ts_dataType": "(value: SliderTooltipFormatFunction['value']) => any",
            "exampleInit": {
                "tooltipFormatFunction": "tooltipFormatFunction",
                "tooltip": "true",
                "exampleData": "return value.toPrecision(2);"
            }
        },
        {
            "name": "value",
            "defaultValue": "0",
            "description": "<P>Sets or gets slider's value. This poperty will be an object with the following structure { rangeStart: range_start, rangeEnd: range_end } if the slider is range slider otherwise it's going to be a number. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>value</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ value: 5 }); </CODE></PRE>\n\r\n<P>Get the <CODE>value</CODE> property. </P>\n<PRE><CODE>var value = $('#jqxSlider').jqxSlider('value'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/r5Gu2/",
            "exampleDescription": "value is set to 5",
            "dataType": "number",
            "ts_dataType": "any",
            "exampleInit": {
                "value": "5"
            }
        },
        {
            "name": "values",
            "defaultValue": "[0, 10]",
            "description": "<P>Sets or gets range slider's values.The 'rangeSlider' property should be set to true. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>values</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ values: [2, 3] }); </CODE></PRE>\n\r\n<P>Get the <CODE>values</CODE> property. </P>\n<PRE><CODE>var values = $('#jqxSlider').jqxSlider('values'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tUAyj/",
            "exampleDescription": "values is set to [5,15]",
            "dataType": "Array",
            "ts_dataType": "Array<number>",
            "exampleInit": {
                "rangeSlider": "true",
                "values": "[5,15]"
            }
        },
        {
            "name": "width",
            "defaultValue": "300",
            "description": "<P>Sets or gets the slider's width. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider({ width:\"300px\" });</CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxSlider').jqxSlider('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FYE4c/",
            "exampleDescription": "width is set to 300",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "width": "300"
            }
        }
    ],
    "events": [
        {
            "name": "change",
            "description": "<P>This event is triggered when the value of the slider is changed. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>change</CODE> event by type: jqxSlider. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3WdNd/",
            "exampleDescription": "Bind to the change event by type: jqxSlider.",
            "example": "<PRE><CODE>$('#jqxSlider').on('change', function (event) {var value = event.args.value;});</CODE></PRE>"
        },
        {
            "name": "slide",
            "description": "<P>This event is triggered when the user is dragging the sliders thumb. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>slide</CODE> event by type: jqxSlider. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/SFNDS/",
            "exampleDescription": "Bind to the slide event by type: jqxSlider.",
            "example": "<PRE><CODE>$('#jqxSlider').on('slide', function (event) {  var value = event.args.value; }); </CODE></PRE>"
        },
        {
            "name": "slideStart",
            "description": "<P>This event is triggered when the user start dragging slider's thumb. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>slideStart</CODE> event by type: jqxSlider. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/VngpP/",
            "exampleDescription": "Bind to the slideStart event by type: jqxSlider.",
            "example": "<PRE><CODE>$('#jqxSlider').on('slideStart', function (event) { var value = event.args.value; }); </CODE></PRE>"
        },
        {
            "name": "slideEnd",
            "description": "<P>This event is triggered when the user have dragged the slider's thumb and drop it. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>slideEnd</CODE> event by type: jqxSlider. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/fRdK8/",
            "exampleDescription": "Bind to the slideEnd event by type: jqxSlider.",
            "example": "<PRE><CODE>$('#jqxSlider').on('slideEnd', function (event) { var value = event.args.value; }); </CODE></PRE>"
        }
    ],
    "methods": [
        {
            "name": "destroy",
            "description": "<P>Destroys the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider('destroy'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3h6xX/",
            "exampleDescription": "destroy the jqxSlider.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "decrementValue",
            "description": "<P>Decreases the jqxSlider's value with the value of the 'step' property.</P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4C72r/",
            "exampleDescription": "invoke the decrementValue method of the jqxSlider.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "value": "5"
            }
        },
        {
            "name": "disable",
            "description": "<P>Disabling the slider.</P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hge5c/",
            "exampleDescription": "disables the jqxSlider.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "enable",
            "description": "<P>Enables the slider.</P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/pfF53/",
            "exampleDescription": "enables the jqxSlider.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "disabled": "true"
            }
        },
        {
            "name": "focus",
            "description": "<P>Focuses the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>focus</CODE> method. </P>\n<PRE><CODE>$('#jqxSlider').jqxSlider('focus'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/p5kSW/",
            "exampleDescription": "focuses the jqxSlider.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getValue",
            "description": "<P>Gets the slider's value. The returned value is a number or an object. If the Slider is a range slider, the method returns an object with the following fields: rangeStart - the range's start value and rangeEnd - the range's end value..</P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FxYXf/",
            "exampleDescription": "gets the value in the jqxSlider.",
            "returnDataType": "number",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "incrementValue",
            "description": "<P>Increases the jqxSlider's value with the value of the 'step' property. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/WFRCp/",
            "exampleDescription": "invoke the incrementValue method of the jqxSlider.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "setValue",
            "description": "<P>Sets the jqxSlider's value. When the slider is not in range slider mode, the required parameter for the value is a number which should be in the 'min' - 'max' range. Possible value types in range slider mode- array, object or two numbers. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4HeeJ/",
            "exampleDescription": "sets the value in the jqxSlider.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "ts_dataType": "number | number[]",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "5" ]
            }
        },
        {
            "name": "val",
            "description": "<P>Sets or gets the value. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/xZjfX/",
            "exampleDescription": "sets the value in the jqxSlider.",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "value",
                    "dataType": "string",
                    "description": "",
                    "optional": true
                }
            ]
        }
    ]
}