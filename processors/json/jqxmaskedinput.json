{
    "widget": {
        "name": "jqxMaskedInput",
        "description": "Uses a mask to distinguish between proper and improper user input. You can define phone number, ssn, zip code, dates, etc. masks by setting the jqxMaskedInput mask property.",
        "angular2": {
            "name": "jqxMaskedInputComponent",
            "selector": "jqxMaskedInput"
        }
    },
    "dataTypes": [
        {
            "name": "MaskedInputTextAlign",
            "ts_dataType": "enum",
            "enumOptions": [ "left", "right" ]
        }
    ],
    "exampleInit": {
        "width": "250",
        "value": "'1000'"
    },
    "properties": [
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the widget is disabled. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE>$('#jqxMaskedInput').jqxMaskedInput({ disabled: true});<CODE></CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxMaskedInput').jqxMaskedInput('disabled');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/fpjxzo1e/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "height",
            "defaultValue": "null",
            "description": "<P>Sets or gets height of the masked input in pixels. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE>$('#jqxMaskedInput').jqxMaskedInput({ height: '25px'});<CODE></CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxMaskedInput').jqxMaskedInput('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Z3QQB/",
            "exampleDescription": "height is set to '25px'",
            "dataType": "number",
            "ts_dataType": "string | number",
            "exampleInit": {
                "height": "30"
            }
        },
        {
            "name": "mask",
            "defaultValue": "'#####'",
            "description": "<P>Sets or gets the masked input's mask. </P>\n\r\n<UL><LI># - For digit character. Accepts values from 0 to 9 \r\n<LI>9 - For digit character. Accepts values from 0 to 9 \r\n<LI>0 - For digit character. Accepts values from 0 to 9 \r\n<LI>A - For alpha numeric character. Accepts values from 0 to 9 and from a to z and A to Z. \r\n<LI>L - For alpha character. Accepts values from a to z and A to Z \r\n<LI>[abcd] - For character set. Matches any one of the enclosed characters. You can specify a range of characters by using a hyphen. For example, [abcd] is the same as [a-d]. Examples: [0-5] - accepts values from 0 to 5. [ab] - accepts only a or b. </LI></UL>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>mask</CODE> property. </P>\n<PRE><CODE>$(\"#jqxMaskedInput\").jqxMaskedInput({ mask: '###-##-####'});</CODE></PRE>\n\r\n<P>Get the <CODE>mask</CODE> property. </P>\n<PRE><CODE>var mask = $('#jqxMaskedInput').jqxMaskedInput('mask');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/U6MaA/",
            "exampleDescription": "mask is set to '###-##-####'",
            "dataType": "string",
            "exampleInit": {
                "mask": "'###-##-####'"
            }
        },
        {
            "name": "promptChar",
            "defaultValue": "\"_\"",
            "description": "<P>Sets or gets the prompt char displayed when an editable char is empty. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>promptChar</CODE> property. </P>\n<PRE>$('#jqxMaskedInput').jqxMaskedInput({ promptChar: \".\" });<CODE></CODE></PRE>\n\r\n<P>Get the <CODE>promptChar</CODE> property. </P>\n<PRE><CODE>var promptChar = $('#jqxMaskedInput').jqxMaskedInput('promptChar'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/HzcHt/",
            "exampleDescription": "promptChar is set to \"#\"",
            "dataType": "string",
            "ts_dataType": "number | string",
            "exampleInit": {
                "promptChar": "'#'"
            }
        },
        {
            "name": "readOnly",
            "defaultValue": "false",
            "description": "<P>Sets or gets the readOnly state of the input. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>readOnly</CODE> property. </P>\n<PRE>$('#jqxMaskedInput').jqxMaskedInput({ readOnly: true });<CODE></CODE></PRE>\n\r\n<P>Get the <CODE>readOnly</CODE> property. </P>\n<PRE><CODE>var readOnly = $('#jqxMaskedInput').jqxMaskedInput('readOnly'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/xEU4D/",
            "exampleDescription": "readOnly is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "readOnly": "true"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts.</P>",
            "example": "<pre><CODE>$('#jqxMaskedInput').jqxMaskedInput({rtl : true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/GKWAm/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n<PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;\r\n</CODE></PRE>\r\n</CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9kvC6/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "textAlign",
            "defaultValue": "left",
            "description": "<P>Sets or gets the text alignment. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'right'</CODE></PRE>\n<PRE><CODE>'left'</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Initialize a MaskedInput with the <CODE>textAlign</CODE> property specified. </P>\n<PRE>$('#jqxMaskedInput').jqxMaskedInput({ textAlign: \"right\"});<CODE></CODE></PRE>\n\r\n<P>Get the <CODE>textAlign</CODE> property. </P>\n<PRE><CODE>var textAlign = $('#jqxMaskedInput').jqxMaskedInput('textAlign'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/GMfJD/",
            "exampleDescription": "textAlign is set to 'right'",
            "dataType": "string",
            "ts_dataType": "enum:MaskedInputTextAlign",
            "exampleInit": {
                "textAlign": "right"
            }
        },
        {
            "name": "value",
            "defaultValue": "null",
            "description": "<P>Sets or gets the masked input's value. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>value</CODE> property. </P>\n<PRE><CODE>$('#jqxMaskedInput').jqxMaskedInput({value: \"35\" });</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Get the <CODE>value</CODE> property. </P>\n<PRE><CODE>var value = $('#jqxMaskedInput').jqxMaskedInput('value');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/UskHv/",
            "exampleDescription": "value is set to 300",
            "dataType": "string | number",
            "ts_dataType": "number | string"
        },
        {
            "name": "width",
            "defaultValue": "null",
            "description": "<P>Sets or gets width of the masked input in pixels. Only positive values have effect. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE>$('#jqxMaskedInput').jqxMaskedInput({ width: '250px'});<CODE></CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxMaskedInput').jqxMaskedInput('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/mbaZ2/",
            "exampleDescription": "width is set to '250px'",
            "dataType": "number",
            "ts_dataType": "string | number"
        }
    ],
    "events": [
        {
            "name": "change",
            "description": "<P>This event is triggered when the value is changed and the control's focus is lost. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>change</CODE> event by type: jqxMaskedInput. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/94ssJ/",
            "exampleDescription": "Bind to the change event by type:jqxMaskedInput",
            "example": "<PRE><CODE>\r\n$('#jqxMaskedInput').on('change',\r\nfunction (event) \r\n{\r\n    var value = event.args.value;\r\n    var text = event.args.text;\r\n    var type = event.args.type; // keyboard or null depending on how the value was changed.\r\n});\r\n                        </CODE></PRE>"
        },
        {
            "name": "valueChanged",
            "description": "<P>This event is triggered when the value is changed. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>valueChanged</CODE> event by type: jqxMaskedInput. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/YhwxH/",
            "exampleDescription": "Bind to the valueChanged event by type:jqxMaskedInput",
            "example": "<PRE><CODE>\r\n$('#jqxMaskedInput').on('valueChanged',\r\nfunction () \r\n{\r\n    var value = event.args.value;\r\n    var text = event.args.text;\r\n});\r\n                        </CODE></PRE>"
        }
    ],
    "methods": [
        {
            "name": "clear",
            "description": "<P>Clears the value. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>clear</CODE> method. </P>\n<PRE><CODE>$('#jqxMaskedInput').jqxMaskedInput('clear'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/868Dz/",
            "exampleDescription": "clears the jqxMaskedInput",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "destroy",
            "description": "<P>Destroys the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxMaskedInput').jqxMaskedInput('destroy'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4UVA8/",
            "exampleDescription": "destroys the jqxMaskedInput",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "focus",
            "description": "<P>Focuses the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>focus</CODE> method. </P>\n<PRE><CODE>$('#jqxMaskedInput').jqxMaskedInput('focus'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/7tQLD/",
            "exampleDescription": "focuses the jqxMaskedInput",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "val",
            "description": "<P>Sets or gets the value. </P>\n<H4>Code examples</H4>\n<P>Get the value using the val method. </P>\n<PRE><CODE>var value = $('#jqxMaskedInput').jqxMaskedInput('val');</CODE></PRE>\n<PRE><CODE>var value = $('#jqxMaskedInput').val();</CODE></PRE>\n<P>Set the value using the val method. </P>\n<PRE><CODE>$('#jqxMaskedInput').jqxMaskedInput('val', 1242);</CODE></PRE>\n<PRE><CODE>$('#jqxMaskedInput').val(1242);</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/sNbe7/",
            "exampleDescription": "sets the value of the jqxMaskedInput",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "value",
                    "dataType": "string",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": true
                }
            ]
        }
    ]
}