{
    "widget": {
        "name": "jqxFormattedInput",
        "description": "Enables users to format numbers in various numeric formats.",
        "angular2": {
            "name": "jqxFormattedInputComponent",
            "selector": "jqxFormattedInput"
        }
    },
    "dataTypes": [
        {
            "name": "FormattedInputDecimalNotation",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "exponential" ]
        },
        {
            "name": "FormattedInputTemplate",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "primary", "success", "warning", "danger", "info" ]
        }
    ],
    "properties": [
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Enables or disables the jqxFormattedInput. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput({ disabled: false });</CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxFormattedInput').jqxFormattedInput('disabled');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/d46muerj/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "decimalNotation",
            "defaultValue": "\"default\"",
            "description": "<P>Sets or gets the notation in which to display decimal numbers. </P>\n\r\n<H4>Possible values</H4>\n\r\n<P>'default' - the default representation of decimal numbers, e.g. <EM style=\"DISPLAY: none\" jQuery111105208709096072563=\"3\">1590</EM>; </P>\n\r\n<P>'exponential' - representation of decimal numbers in scientific exponential notation (E notation), e.g. <EM style=\"DISPLAY: none\" jQuery111105208709096072563=\"4\">1.59e+3</EM>. </P>",
            "example": "<pre><CODE>$(\"#jqxFormattedInput\").jqxFormattedInput({ decimalNotation: 'exponential' });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/m7yyjf87/",
            "exampleDescription": "decimalNotation is set to \"exponential\"",
            "dataType": "string",
            "ts_dataType": "enum:FormattedInputDecimalNotation",
            "exampleInit": {
                "decimalNotation": "exponential"
            },
            "customExample": {
                "codeType": "get",
                "code": "&lt;template>\n  &lt;JqxFormattedInput ref=\"myFormattedInput\"\n    :decimalNotation=\"'exponential'\" :radix=\"'decimal'\"\n    :value=\"253000\" :width=\"250\" :height=\"25\"\n  />\n&lt;/template>\n \n&lt;script>\n  import JqxFormattedInput from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxformattedinput.vue';\n \n  export default {\n    components: {\n      JqxFormattedInput\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "dropDown",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the jqxFormattedInput's dropdown (pop-up) will be enabled. The dropdown allows the user to choose the radix (numeral system) of the displayed number. </P>\n\r\n<P><EM style=\"DISPLAY: none\" jQuery111105208709096072563=\"6\">Note:</EM> the dropdown requires an additional empty <CODE style=\"DISPLAY: none\" jQuery111105208709096072563=\"71\">div</CODE> element in the initialization <CODE>div</CODE> of jqxFormattedInput. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>dropDown</CODE> property. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput({ dropDown: true });</CODE></PRE>\n\r\n<P>Get the <CODE>dropDown</CODE> property. </P>\n<PRE><CODE>var dropDownWidth = $('#jqxFormattedInput').jqxFormattedInput('dropDown');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vg55ng5f/",
            "exampleDescription": "dropDown is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "dropDown": "true"
            },
            "customExample": {
                "codeType": "get",
                "code": "&lt;template>\n  &lt;JqxFormattedInput :width=\"250\" :height=\"25\" :radix=\"'decimal'\"\n                       :value=\"253000\" :spinButtons=\"true\" :dropDown=\"true\">\n    &lt;/JqxFormattedInput>\n&lt;/template>\n \n&lt;script>\n  import JqxFormattedInput from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxformattedinput.vue';\n \n  export default {\n    components: {\n      JqxFormattedInput\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "dropDownWidth",
            "defaultValue": "null",
            "description": "<P>Sets or gets the width of the jqxFormattedInput's dropdown (pop-up). </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>dropDownWidth</CODE> property. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput({ dropDownWidth: 200 });</CODE></PRE>\n\r\n<P>Get the <CODE>dropDownWidth</CODE> property. </P>\n<PRE><CODE>var dropDownWidth = $('#jqxFormattedInput').jqxFormattedInput('dropDownWidth');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/rg25p17e/",
            "exampleDescription": "dropDownWidth is set to 200",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "dropDownWidth": "200"
            },
            "customExample": {
                "codeType": "get",
                "code": "&lt;template>\n    &lt;JqxFormattedInput :width=\"100\" :height=\"25\" \n        :radix=\"'binary'\" :dropDownWidth=\"200\"\n        :value=\"11111101\" :spinButtons=\"false\" :dropDown=\"true\"\n    />\n&lt;/template>\n \n&lt;script>\nimport JqxFormattedInput from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxformattedinput.vue\";\n\nexport default {\n  components: {\n    JqxFormattedInput\n  }\n};\n&lt;/script>"
            }
        },
        {
            "name": "height",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxFormattedInput's height. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput({ height: \"35px\" });</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxFormattedInput').jqxFormattedInput('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/kbfxk1ve/",
            "exampleDescription": "height is set to 35",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "height": "25",
                "value": "25300"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "min",
            "defaultValue": "'-9223372036854775808'",
            "description": "<P>Sets or gets the minimum value of the widget. The value of min should be in the same numeral system as <CODE>value</CODE>. The min property can be set to no less than '-9223372036854775808' (-2<sup>63</sup>) in decimal. </P>",
            "example": "<pre><CODE>$(\"#jqxFormattedInput\").jqxFormattedInput({ min: 'cc' });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zj7oqnuk/",
            "exampleDescription": "min is set to \"0\"",
            "dataType": "Number | String",
            "ts_dataType": "number | string",
            "exampleInit": {
                "min": "0",
                "spinButtons": "true",
                "value": "1",
                "height": "25"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "max",
            "defaultValue": "'9223372036854775807'",
            "description": "<P>Sets or gets the maximum value of the widget. The value of max should be in the same numeral system as <CODE>value</CODE>. The max property can be set to no more than '9223372036854775807' (2<sup>63</sup> - 1) in decimal. </P>",
            "example": "<pre><CODE>$(\"#jqxFormattedInput\").jqxFormattedInput({ max: \"1001\" });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/qzugkydz/",
            "exampleDescription": "max is set to \"111110100\"",
            "dataType": "Number | String",
            "ts_dataType": "number | string",
            "exampleInit": {
                "max": "111110100",
                "spinButtons": "true",
                "value": "11111101",
                "height": "25"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "placeHolder",
            "defaultValue": "''",
            "description": "<P>Sets or gets the jqxFormattedInput's placeholder. </P>",
            "example": "<pre><CODE>$(\"#jqxFormattedInput\").jqxFormattedInput({ placeHolder: \"Enter a number\" });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ksf4a9vv/",
            "exampleDescription": "placeHolder is set to \"Enter a number\"",
            "dataType": "string",
            "exampleInit": {
                "placeHolder": "Enter a number"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "popupZIndex",
            "defaultValue": "20000",
            "description": "<P>Sets or gets the pop-up's z-index. </P>",
            "example": "<pre><CODE>$(\"#jqxFormattedInput\").jqxFormattedInput({ popupZIndex: 999999 });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ft65obcf/",
            "exampleDescription": "popupZIndex is set to 99999",
            "dataType": "number",
            "exampleInit": {
                "popupZIndex": "99999"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "roundedCorners",
            "defaultValue": "true",
            "description": "<P>Enables or disables the rounded corners functionality. This property setting has effect in browsers which support CSS border-radius. </P>",
            "example": "<pre><CODE>$(\"#jqxFormattedInput\").jqxFormattedInput({ roundedCorners: false });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/7gnswu2L/",
            "exampleDescription": "roundedCorners is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "roundedCorners": "false",
                "height": "25",
                "width": "250",
                "spinButtons": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts. </P>",
            "example": "<pre><CODE>$('#jqxFormattedInput').jqxFormattedInput({ rtl : true });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/26xzzL5j/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true",
                "height": "25",
                "width": "250",
                "spinButtons": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "radix",
            "defaultValue": "10",
            "description": "<P>Sets or gets the radix of the jqxFormattedInput. The radix specifies the numeral system in which to display the widget's value. </P>\n\r\n<H4>Possible values</H4>\n\r\n<P>2 or 'binary' - specifies the binary numeral system. Allowed characters for this numeral system are the digits <EM style=\"DISPLAY: none\" jQuery111105208709096072563=\"16\">0</EM> and <EM style=\"DISPLAY: none\" jQuery111105208709096072563=\"17\">1</EM>; </P>\n\r\n<P>8 or 'octal' - specifies the octal numeral system. Allowed characters for this numeral system are the digits from <EM style=\"DISPLAY: none\" jQuery111105208709096072563=\"18\">0</EM> to <EM style=\"DISPLAY: none\" jQuery111105208709096072563=\"19\">7</EM>; </P>\n\r\n<P>10 or 'decimal' - specifies the decimal numeral system. Allowed characters for this numeral system are the digits from <EM style=\"DISPLAY: none\" jQuery111105208709096072563=\"20\">0</EM> to <EM style=\"DISPLAY: none\" jQuery111105208709096072563=\"21\">9</EM>; </P>\n\r\n<P>16 or 'hexadecimal' - specifies the hexadecimal numeral system. Allowed characters for this numeral system are the digits from <EM style=\"DISPLAY: none\" jQuery111105208709096072563=\"22\">0</EM> to <EM style=\"DISPLAY: none\" jQuery111105208709096072563=\"23\">9</EM> and letters from <EM style=\"DISPLAY: none\" jQuery111105208709096072563=\"24\">a</EM> to <EM style=\"DISPLAY: none\" jQuery111105208709096072563=\"25\">f</EM> (case insenstive). </P>",
            "example": "<pre><CODE>$(\"#jqxFormattedInput\").jqxFormattedInput({ radix: 'hexadecimal' });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/p8ym9zgo/",
            "exampleDescription": "radix is set to \"hexadecimal\"",
            "dataType": "number | string",
            "ts_dataType": "number | string",
            "exampleInit": {
                "radix": "'hexadecimal'",
                "value": "'fd'"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "spinButtons",
            "defaultValue": "true",
            "description": "<P>Shows or hides the spin buttons. </P>\n\r\n<P><EM style=\"DISPLAY: none\" jQuery111105208709096072563=\"27\">Note:</EM> the spin buttons require an additional empty <CODE style=\"DISPLAY: none\" jQuery111105208709096072563=\"82\">div</CODE> element in the initialization <CODE>div</CODE> of jqxFormattedInput. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>spinButtons</CODE> property. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput({ spinButtons: false });</CODE></PRE>\n\r\n<P>Get the <CODE>spinButtons</CODE> property. </P>\n<PRE><CODE>var spinButtons = $('#jqxFormattedInput').jqxFormattedInput('spinButtons');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3r1zhe7c/",
            "exampleDescription": "spinButtons is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "spinButtons": "true",
                "height": "25"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "spinButtonsStep",
            "defaultValue": "1",
            "description": "<P>Sets or gets the increase/decrease step. The value of <CODE>spinButtonsStep</CODE> is a decimal number. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>spinButtonsStep</CODE> property. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput({ spinButtonsStep: 200 });</CODE></PRE>\n\r\n<P>Get the <CODE>spinButtonsStep</CODE> property. </P>\n<PRE><CODE>var spinButtonsStep = $('#jqxFormattedInput').jqxFormattedInput('spinButtonsStep');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/u2j3eekp/",
            "exampleDescription": "spinButtonsStep is set to 2",
            "dataType": "number",
            "exampleInit": {
                "spinButtons": "true",
                "spinButtonsStep": "3",
                "height": "25",
                "width": "250"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "template",
            "defaultValue": "'default'",
            "description": "<P>Determines the template as an alternative of the default styles. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'default' - the default template. The style depends only on the \"theme\" property value.</CODE></PRE>\n<PRE><CODE>'primary' - dark blue style for extra visual weight.</CODE></PRE>\n<PRE><CODE>'success' - green style for successful or positive action.</CODE></PRE>\n<PRE><CODE>'warning' - orange style which indicates caution.</CODE></PRE>\n<PRE><CODE>'danger' - red style which indicates a dangerous or negative action.</CODE></PRE>\n<PRE><CODE>'info' - blue button, not tied to a semantic action or use.</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>template</CODE> property. </P>\n<PRE><CODE>$(\"#jqxFormattedInput\").jqxFormattedInput({ template: 'primary'});</CODE></PRE>\n\r\n<P>Get the <CODE>template</CODE> property. </P>\n<PRE><CODE>var template = $('#jqxFormattedInput').jqxFormattedInput('template');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/nwykewe8/",
            "exampleDescription": "template is set to 'primary'",
            "dataType": "string",
            "ts_dataType": "enum:FormattedInputTemplate",
            "exampleInit": {
                "template": "primary",
                "spinButtons": "true",
                "height": "25",
                "width": "250"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n                                <PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt; </CODE></PRE>\r\n                                </CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ch9xx2ny/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material",
                "spinButtons": "true",
                "height": "25",
                "width": "250"
            }
        },
        {
            "name": "upperCase",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether to use upper case when the <CODE>radix</CODE> property is set to 16 or 'hexadecimal'. </P>",
            "example": "<pre><CODE>$(\"#jqxFormattedInput\").jqxFormattedInput({ upperCase: true });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/d6fs2vg6/",
            "exampleDescription": "upperCase is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "upperCase": "true",
                "radix": "'hexadecimal'",
                "value": "'fd'",
                "height": "25"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "value",
            "defaultValue": "'0'",
            "description": "<P>Sets or gets the value of the jqxFormattedInput widget. The value is in the numeral system specified by the <CODE>radix</CODE> property. </P>",
            "example": "<pre><CODE>$(\"#jqxFormattedInput\").jqxFormattedInput({ value: '112' });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dhgL1zsp/",
            "exampleDescription": "value is set to \"100111101011\"",
            "dataType": "number | string",
            "exampleInit": {
                "value": "25300",
                "height": "25"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "width",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxFormattedInput's width. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput({ width: 200 });</CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxFormattedInput').jqxFormattedInput('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ch9xx2ny/",
            "exampleDescription": "width is set to 200",
            "dataType": "number",
            "ts_dataType": "number | string",
            "customExample": {
                "codeType": "get",
                "code": "&lt;template>\n  &lt;JqxFormattedInput ref=\"myFormattedInput\"\n    :width=\"200\" :height=\"25\" :spinButtons=\"true\" :radix=\"'binary'\" :value=\"11111101\"\n  />\n&lt;/template>\n \n&lt;script>\n  import JqxFormattedInput from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxformattedinput.vue';\n \n  export default {\n    components: {\n      JqxFormattedInput\n    }\n  }\n&lt;/script>"
            }
        }
    ],
    "events": [
        {
            "name": "change",
            "description": "<P>This event is triggered when the value is changed. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>change</CODE> event by type: jqxFormattedInput. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/29fkq3zs/",
            "exampleDescription": "Bind to the change event by type: jqxFormattedInput.",
            "example": "<PRE><CODE>$(\"#jqxFormattedInput\").on(\"change\", function (event) {\r\n    // event arguments\r\n    var args = event.args;\r\n    // new value\r\n    var value = args.value;\r\n    // old value\r\n    var oldValue = args.oldValue;\r\n    // radix\r\n    var radix = args.radix;\r\n    // type\r\n    var type = args.type; // keyboard, mouse or null depending on how the value was changed.                       \r\n});</CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n    &lt;div>\n        &lt;JqxFormattedInput @open=\"onOpen($event)\" @close=\"onClose($event)\"\n                           @change=\"onChange($event)\" @radixChange=\"onRadixChange($event)\"\n                           :width=\"300\" :height=\"25\" :radix=\"'decimal'\"\n                           :value=\"190\" :spinButtons=\"true\" :dropDown=\"true\">\n        &lt;/JqxFormattedInput>\n        &lt;div style=\"margin-top: 150px\">\n            Events log:\n        &lt;/div>\n        &lt;JqxPanel ref=\"myPanel\" :width=\"300\" :height=\"150\">&lt;/JqxPanel>\n    &lt;/div>\n&lt;/template>\n&lt;script>\n    import JqxFormattedInput from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxformattedinput.vue\";\n    import JqxPanel from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxpanel.vue\";\n    export default {\n        components: {\n            JqxFormattedInput,\n            JqxPanel\n        },\n        methods: {\n            onOpen: function (event) {\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />');\n            },\n            onClose: function (event) {\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />');\n            },\n            onChange: function (event) {\n                const args = event.args;\n                const newValue = args.value;\n                const oldValue = args.oldValue;\n                const radix = args.radix;\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />' +\n                    'value: ' + newValue + ', old value: ' + oldValue + ', radix: ' + radix + '&lt;br />');\n            },\n            onRadixChange: function (event) {\n                const args = event.args;\n                const newRadix = args.radix;\n                const oldRadix = args.oldRadix;\n                const newValue = args.value;\n                const oldValue = args.oldValue;\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />' +\n                    'radix: ' + newRadix + ', old radix: ' + oldRadix +\n                    '&lt;br />value: ' + newValue + ', old value: ' + oldValue + '&lt;br />');\n            }\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "close",
            "description": "<P>This event is triggered when the pop-up is closed. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>close</CODE> event by type: jqxFormattedInput. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/gcc6keL3/",
            "exampleDescription": "Bind to the close event by type: jqxFormattedInput.",
            "example": "<PRE><CODE>$('#jqxFormattedInput').on('close', function(){ // type your code here. });\r\n                        </CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n    &lt;div>\n        &lt;JqxFormattedInput @open=\"onOpen($event)\" @close=\"onClose($event)\"\n                           @change=\"onChange($event)\" @radixChange=\"onRadixChange($event)\"\n                           :width=\"300\" :height=\"25\" :radix=\"'decimal'\"\n                           :value=\"190\" :spinButtons=\"true\" :dropDown=\"true\">\n        &lt;/JqxFormattedInput>\n        &lt;div style=\"margin-top: 150px\">\n            Events log:\n        &lt;/div>\n        &lt;JqxPanel ref=\"myPanel\" :width=\"300\" :height=\"150\">&lt;/JqxPanel>\n    &lt;/div>\n&lt;/template>\n&lt;script>\n    import JqxFormattedInput from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxformattedinput.vue\";\n    import JqxPanel from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxpanel.vue\";\n    export default {\n        components: {\n            JqxFormattedInput,\n            JqxPanel\n        },\n        methods: {\n            onOpen: function (event) {\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />');\n            },\n            onClose: function (event) {\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />');\n            },\n            onChange: function (event) {\n                const args = event.args;\n                const newValue = args.value;\n                const oldValue = args.oldValue;\n                const radix = args.radix;\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />' +\n                    'value: ' + newValue + ', old value: ' + oldValue + ', radix: ' + radix + '&lt;br />');\n            },\n            onRadixChange: function (event) {\n                const args = event.args;\n                const newRadix = args.radix;\n                const oldRadix = args.oldRadix;\n                const newValue = args.value;\n                const oldValue = args.oldValue;\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />' +\n                    'radix: ' + newRadix + ', old radix: ' + oldRadix +\n                    '&lt;br />value: ' + newValue + ', old value: ' + oldValue + '&lt;br />');\n            }\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "open",
            "description": "<P>This event is triggered when the pop-up is opened. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>open</CODE> event by type: jqxFormattedInput. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/snmpyor1/",
            "exampleDescription": "Bind to the open event by type: jqxFormattedInput.",
            "example": "<PRE><CODE>$('#jqxFormattedInput').on('open', function(){ // type your code here. });\r\n                        </CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n    &lt;div>\n        &lt;JqxFormattedInput @open=\"onOpen($event)\" @close=\"onClose($event)\"\n                           @change=\"onChange($event)\" @radixChange=\"onRadixChange($event)\"\n                           :width=\"300\" :height=\"25\" :radix=\"'decimal'\"\n                           :value=\"190\" :spinButtons=\"true\" :dropDown=\"true\">\n        &lt;/JqxFormattedInput>\n        &lt;div style=\"margin-top: 150px\">\n            Events log:\n        &lt;/div>\n        &lt;JqxPanel ref=\"myPanel\" :width=\"300\" :height=\"150\">&lt;/JqxPanel>\n    &lt;/div>\n&lt;/template>\n&lt;script>\n    import JqxFormattedInput from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxformattedinput.vue\";\n    import JqxPanel from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxpanel.vue\";\n    export default {\n        components: {\n            JqxFormattedInput,\n            JqxPanel\n        },\n        methods: {\n            onOpen: function (event) {\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />');\n            },\n            onClose: function (event) {\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />');\n            },\n            onChange: function (event) {\n                const args = event.args;\n                const newValue = args.value;\n                const oldValue = args.oldValue;\n                const radix = args.radix;\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />' +\n                    'value: ' + newValue + ', old value: ' + oldValue + ', radix: ' + radix + '&lt;br />');\n            },\n            onRadixChange: function (event) {\n                const args = event.args;\n                const newRadix = args.radix;\n                const oldRadix = args.oldRadix;\n                const newValue = args.value;\n                const oldValue = args.oldValue;\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />' +\n                    'radix: ' + newRadix + ', old radix: ' + oldRadix +\n                    '&lt;br />value: ' + newValue + ', old value: ' + oldValue + '&lt;br />');\n            }\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "radixChange",
            "description": "<P>This event is triggered when the radix is changed. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>radixChange</CODE> event by type: jqxFormattedInput. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/38e5pkb9/",
            "exampleDescription": "Bind to the radixChange event by type: jqxFormattedInput.",
            "example": "<PRE><CODE>$(\"#jqxFormattedInput\").on(\"radixChange\", function (event) {\r\n    // event arguments\r\n    var args = event.args;\r\n    // new radix\r\n    var radix = args.radix;\r\n    // old radix\r\n    var oldRadix = args.oldRadix;\r\n    // new value\r\n    var value = args.value;\r\n    // old value\r\n    var oldValue = args.oldValue;\r\n});</CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n    &lt;div>\n        &lt;JqxFormattedInput @open=\"onOpen($event)\" @close=\"onClose($event)\"\n                           @change=\"onChange($event)\" @radixChange=\"onRadixChange($event)\"\n                           :width=\"300\" :height=\"25\" :radix=\"'decimal'\"\n                           :value=\"190\" :spinButtons=\"true\" :dropDown=\"true\">\n        &lt;/JqxFormattedInput>\n        &lt;div style=\"margin-top: 150px\">\n            Events log:\n        &lt;/div>\n        &lt;JqxPanel ref=\"myPanel\" :width=\"300\" :height=\"150\">&lt;/JqxPanel>\n    &lt;/div>\n&lt;/template>\n&lt;script>\n    import JqxFormattedInput from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxformattedinput.vue\";\n    import JqxPanel from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxpanel.vue\";\n    export default {\n        components: {\n            JqxFormattedInput,\n            JqxPanel\n        },\n        methods: {\n            onOpen: function (event) {\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />');\n            },\n            onClose: function (event) {\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />');\n            },\n            onChange: function (event) {\n                const args = event.args;\n                const newValue = args.value;\n                const oldValue = args.oldValue;\n                const radix = args.radix;\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />' +\n                    'value: ' + newValue + ', old value: ' + oldValue + ', radix: ' + radix + '&lt;br />');\n            },\n            onRadixChange: function (event) {\n                const args = event.args;\n                const newRadix = args.radix;\n                const oldRadix = args.oldRadix;\n                const newValue = args.value;\n                const oldValue = args.oldValue;\n                this.$refs.myPanel.append('&lt;strong>' + event.type + '&lt;/strong>&lt;br />' +\n                    'radix: ' + newRadix + ', old radix: ' + oldRadix +\n                    '&lt;br />value: ' + newValue + ', old value: ' + oldValue + '&lt;br />');\n            }\n        }\n    }\n&lt;/script>"
            }
        }
    ],
    "methods": [
        {
            "name": "close",
            "description": "<P>Closes the jqxFormattedInput pop-up. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>close</CODE> method. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput('close'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8ju2bbgk/",
            "exampleDescription": "closes the jqxFormattedInput dropdown (pop-up)",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxFormattedInput ref=\"myFormattedInput\"\n        :width=\"200\" :height=\"25\" :radix=\"'decimal'\"\n        :value=\"190\" :spinButtons=\"true\" :dropDown=\"true\">\n    &lt;/JqxFormattedInput>\n&lt;/template>\n&lt;script>\n    import JqxFormattedInput from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxformattedinput.vue\";\n\n    export default {\n        components: {\n            JqxFormattedInput\n        },\n        mounted: function () {\n            this.$refs.myFormattedInput.open();\n\n            setTimeout(_ => this.$refs.myFormattedInput.close(), 1000);\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "destroy",
            "description": "<P>Destroys the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput('destroy'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/kk4cvoq3/",
            "exampleDescription": "destroys the formatted input",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "focus",
            "description": "<P>Focuses the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>focus</CODE> method. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput('focus'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dgqLvpux/",
            "exampleDescription": "focuses the formatted input",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "open",
            "description": "<P>Opens the jqxFormattedInput pop-up. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>open</CODE> method. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput('open'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/xe852w1n/",
            "exampleDescription": "opens the jqxFormattedInput dropdown (pop-up)",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxFormattedInput ref=\"myFormattedInput\"\n        :width=\"200\" :height=\"25\" :radix=\"'decimal'\"\n        :value=\"190\" :spinButtons=\"true\" :dropDown=\"true\">\n    &lt;/JqxFormattedInput>\n&lt;/template>\n&lt;script>\n    import JqxFormattedInput from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxformattedinput.vue\";\n\n    export default {\n        components: {\n            JqxFormattedInput\n        },\n        mounted: function () {\n            this.$refs.myFormattedInput.open();\n\n            setTimeout(_ => this.$refs.myFormattedInput.close(), 1000);\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "render",
            "description": "<P>Renders the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>render</CODE> method. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput('render');</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/55w5avpj/",
            "exampleDescription": "renders the formatted input",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "refresh",
            "description": "<P>Refreshes the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>refresh</CODE> method. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput('refresh'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dv6rgpza/",
            "exampleDescription": "refreshes the formatted input",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "selectAll",
            "description": "<P>Selects the text in the input field. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>selectAll</CODE> method. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput('selectAll'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/quv7q587/",
            "exampleDescription": "selects the text in the formatted input",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "value": "123456789"
            }
        },
        {
            "name": "selectFirst",
            "description": "<P>Positions the caret in the beginning of the number in the input. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>selectFirst</CODE> method. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput('selectFirst'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3wjbgu7b/",
            "exampleDescription": "positions the caret at the beginning of the formatted input",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "value": "123456789"
            }
        },
        {
            "name": "selectLast",
            "description": "<P>Positions the caret at the end of the number in the input. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>selectLast</CODE> method. </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput('selectLast'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ct0kh1fc/",
            "exampleDescription": "positions the caret at the end of the formatted input",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "value": "123456789"
            }
        },
        {
            "name": "val",
            "description": "<P>Sets or gets the value. </P>\n<H4>Code examples</H4>\n<P>Get the <CODE>value</CODE>: </P>\n<PRE><CODE>// @param format (optional) - if passed, returns the value in the specified numeral system\r\n(if 'binary', 'octal', 'decimal' or 'hexadecimal' is passed)\r\nor decimal notation (if 'exponential', 'scientific' or 'engineering' is passed).\r\nIf no parameter is passed, returns the displayed value of the jqxFormattedInput;\r\nvar value = $('#jqxFormattedInput').jqxFormattedInput('val', 'binary');\r\nor\r\nvar value = $('#jqxFormattedInput').val();</CODE></PRE>\n<P>Set the <CODE>value</CODE>: </P>\n<PRE><CODE>$('#jqxFormattedInput').jqxFormattedInput('val', 700);\r\nor\r\n$('#jqxFormattedInput').val(700);</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zwgyq720/",
            "exampleDescription": "sets the jqxFormattedInput value",
            "returnDataType": "string",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "value",
                    "dataType": "string/number",
                    "ts_dataType": "number | string",
                    "description": "(if 'binary', 'octal', 'decimal' or 'hexadecimal' is passed) or decimal notation (if 'exponential', 'scientific' or 'engineering' is passed). If no parameter is passed, returns the displayed value of the jqxFormattedInput",
                    "optional": true
                }
            ]
        }
    ]
}