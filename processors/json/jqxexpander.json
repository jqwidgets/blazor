{
    "widget": {
        "name": "jqxExpander",
        "description": "Displays header and content sections(like tabs). Click headers to expand or collapse the content. Optionally you can change the default toggle mode to double-click or mouseover. ",
        "angular2": {
            "name": "jqxExpanderComponent",
            "selector": "jqxExpander"
        }
    },
    "dataTypes": [
        {
            "name": "ExpanderAnimationType",
            "ts_dataType": "enum",
            "enumOptions": [ "none", "slide", "fade" ]
        },
        {
            "name": "ExpanderArrowPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "left", "right" ]
        },
        {
            "name": "ExpanderHeaderPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "top", "bottom" ]
        },
        {
            "name": "ExpanderToggleMode",
            "ts_dataType": "enum",
            "enumOptions": [ "click", "dblclick", "none" ]
        }
    ],
    "exampleInit": {
        "width": "350"
    },
    "exampleExtraTemplate": "<div>Early History of the Internet</div>\n    <div> \n      <ul> \n        <li>1961 First packet-switching papers</li>\n        <li>1966 Merit Network founded</li>\n        <li>1966 ARPANET planning starts</li>\n        <li>1969 ARPANET carries its first packets</li>\n        <li>1970 Mark I network at NPL (UK)</li>\n        <li>1971 Tymnet packet-switched network</li>\n        <li>1973 CYCLADES network demonstrated</li>\n        <li>1974 Telenet packet-switched network</li>\n        <li>1980 Ethernet standard introduced</li>\n      </ul>\n    </div>",
    "properties": [
        {
            "name": "animationType",
            "defaultValue": "'slide'",
            "description": "<P>Sets or gets the animation type. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'slide'</CODE></PRE>\n<PRE><CODE>'fade'</CODE></PRE>\n<PRE><CODE>'none'</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxExpander').jqxExpander({animationType: \"none\" });\r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4vanz/",
            "exampleDescription": "animationType is set to 'fade'",
            "dataType": "string",
            "ts_dataType": "enum:ExpanderAnimationType",
            "exampleInit": {
                "animationType": "fade"
            }
        },
        {
            "name": "arrowPosition",
            "defaultValue": "'right'",
            "description": "<P>Sets or gets header's arrow position. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'left'</CODE></PRE>\n<PRE><CODE>'right'</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxExpander').jqxExpander({arrowPosition: \"right\" });\r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/23ZVn/",
            "exampleDescription": "arrowPosition is set to 'left'",
            "dataType": "string",
            "ts_dataType": "enum:ExpanderArrowPosition",
            "exampleInit": {
                "arrowPosition": "left"
            }
        },
        {
            "name": "collapseAnimationDuration",
            "defaultValue": "400",
            "description": "<P>Sets or gets the collapsing animation duration. </P>",
            "example": "<pre><CODE>$('#jqxExpander').jqxExpander({ width: '200px', collapseAnimationDuration:350}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/b5gJU/",
            "exampleDescription": "collapseAnimationDuration is set to 3000",
            "dataType": "number",
            "exampleInit": {
                "collapseAnimationDuration": "3000"
            }
        },
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the expander is disabled. </P>",
            "example": "<pre><CODE>$('#jqxExpander').jqxExpander({disabled: true }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/r4gML/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "expanded",
            "defaultValue": "true",
            "description": "<P>Sets or gets expander's state (collapsed or expanded). </P>",
            "example": "<pre><CODE>$('#jqxExpander').jqxExpander({expanded: true }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/N2EuL/",
            "exampleDescription": "expanded is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "expanded": "false"
            }
        },
        {
            "name": "expandAnimationDuration",
            "defaultValue": "400",
            "description": "<P>Sets or gets the expanding animation duration. </P>",
            "example": "<pre><CODE>$('#jqxExpander').jqxExpander({expandAnimationDuration:350 });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/h9xTz/",
            "exampleDescription": "expandAnimationDuration is set to 3000",
            "dataType": "number",
            "exampleInit": {
                "expandAnimationDuration": "3000"
            }
        },
        {
            "name": "height",
            "defaultValue": "'auto'",
            "description": "<P>Sets or gets expander's height. Possible values - 'auto' or string like this 'Npx' where N is any number or a numeric value in pixels. </P>",
            "example": "<pre><CODE>$('#jqxExpander').jqxExpander({ height: 200 }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/TbMgj/",
            "exampleDescription": "height is set to 100",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "height": "100"
            }
        },
        {
            "name": "headerPosition",
            "defaultValue": "'top'",
            "description": "<P>Sets or gets header's position. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'top'</CODE></PRE>\n<PRE><CODE>'bottom'</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxExpander').jqxExpander({headerPosition: \"bottom\"}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/e645D/",
            "exampleDescription": "headerPosition is set to 'bottom'",
            "dataType": "string",
            "ts_dataType": "enum:ExpanderHeaderPosition",
            "exampleInit": {
                "headerPosition": "bottom"
            }
        },
        {
            "name": "initContent",
            "defaultValue": "null",
            "description": "<P>Callback function called when the item's content needs to be initialized. Useful for initializing other widgets within the content of jqxExpander. </P>",
            "example": "<pre><CODE>$(\"#jqxExpander\").jqxExpander({ initContent: function () { $(\"#jqxButton\").jqxButton({width: 100, height: 50 }); } });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/QwLqr/",
            "exampleDescription": "initContent is set to",
            "dataType": "function",
            "ts_dataType": "() => void",
            "exampleInit": {
                "initContent": "initContent",
                "exampleData": "// Useful for Initializing Other Widgets Within the Content of jqxExpander\n        // JqxButton must be imported\n        // jqwidgets.createInstance('.initContent', 'jqxButton', { value: 'Button :)'});"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxExpander ref=\"myExpander\"\n         :width=\"350\" :initContent=\"initContent\">\n    &lt;div>Early History of the Internet&lt;/div>\n    &lt;div>\n      &lt;ul>\n        &lt;li>1961 First packet-switching papers&lt;/li>\n        &lt;li>1966 Merit Network founded&lt;/li>\n        &lt;li>1966 ARPANET planning starts&lt;/li>\n        &lt;li>1969 ARPANET carries its first packets&lt;/li>\n        &lt;li>1970 Mark I network at NPL (UK)&lt;/li>\n        &lt;li>1971 Tymnet packet-switched network&lt;/li>\n        &lt;li>1973 CYCLADES network demonstrated&lt;/li>\n        &lt;li>1974 Telenet packet-switched network&lt;/li>\n        &lt;li>1980 Ethernet standard introduced&lt;/li>\n      &lt;/ul>\n      &lt;div class='initContent'>&lt;/div>\n    &lt;/div>\n  &lt;/JqxExpander>\n&lt;/template>\n\n&lt;script>\n  import JqxExpander from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxexpander.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxExpander,\n      JqxButton\n    },\n    methods: {\n      initContent: function () {\n        // Useful for Initializing Other Widgets Within the Content of jqxExpander\n        jqwidgets.createInstance('.initContent', 'jqxButton', { value: 'Button'});\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Determines whether the right-to-left support is enabled. </P>",
            "example": "<pre><CODE>$(\"#jqxExpander\").jqxExpander({ rtl: true }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/QAP8E/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "showArrow",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether header's arrow is going to be shown. </P>",
            "example": "<pre><CODE>$('#jqxExpander').jqxExpander({showArrow: false }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/aRtd9/",
            "exampleDescription": "showArrow is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showArrow": "false"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n<PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt; </CODE></PRE>\r\n                                </CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/wjFab/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "toggleMode",
            "defaultValue": "'click'",
            "description": "<P>Sets or gets user interaction used for expanding or collapsing the content. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'click'</CODE></PRE>\n<PRE><CODE>'dblclick'</CODE></PRE>\n<PRE><CODE>'none'</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxExpander').jqxExpander({toggleMode: \"none\" }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/unCKh/",
            "exampleDescription": "toggleMode is set to 'dblclick'",
            "dataType": "string",
            "ts_dataType": "enum:ExpanderToggleMode",
            "exampleInit": {
                "toggleMode": "dblclick"
            }
        },
        {
            "name": "width",
            "defaultValue": "'auto'",
            "description": "<P>Sets or gets expander's width.Possible values - 'auto' or string like this 'Npx' where N is any number or a numeric value in pixels. </P>",
            "example": "<pre><CODE>$('#jqxExpander').jqxExpander({ width: 'auto' }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/bFLWq/",
            "exampleDescription": "width is set to 200",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "width": "300"
            }
        }
    ],
    "events": [
        {
            "name": "collapsing",
            "description": "<P>This event is triggered when the jqxExpander is going to be collapsed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/AxvVy/",
            "exampleDescription": "Bind to the collapsing event by type:jqxExpander",
            "example": "<PRE><CODE>$('#jqxExpander').on('collapsing', function () { // Some code here. }); </CODE></PRE>"
        },
        {
            "name": "collapsed",
            "description": "<P>This event is triggered when the jqxExpander is collapsed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/GLkqz/",
            "exampleDescription": "Bind to the collapsed event by type:jqxExpander",
            "example": "<PRE><CODE>$('#jqxExpander').on('collapsed', function () { // Some code here. }); </CODE></PRE>"
        },
        {
            "name": "expanding",
            "description": "<P>This event is triggered when the jqxExpander is going to be expanded. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/AfYqF/",
            "exampleDescription": "Bind to the expanding event by type:jqxExpander",
            "example": "<PRE><CODE>$('#jqxExpander').on('expanding', function () { // Some code here. }); </CODE></PRE>"
        },
        {
            "name": "expanded",
            "description": "<P>This event is triggered when the jqxExpander is expanded. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/sLjwh/",
            "exampleDescription": "Bind to the expanded event by type:jqxExpander",
            "example": "<PRE><CODE>$('#jqxExpander').on('expanded', function () { // Some code here. }); </CODE></PRE>"
        }
    ],
    "methods": [
        {
            "name": "collapse",
            "description": "<P>Method which is collapsing the expander. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vsqZ9/",
            "exampleDescription": "collapse the jqxExpander",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "disable",
            "description": "<P>This method is disabling the expander. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FxWF2/",
            "exampleDescription": "disables the jqxExpander",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "destroy",
            "description": "<P>This method destroys the expander. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/wTwZF/",
            "exampleDescription": "destroys the jqxExpander",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "enable",
            "description": "<P>This method is enabling the expander. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/RV2wa/",
            "exampleDescription": "enables the jqxExpander",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxExpander ref=\"myExpander\"\n                 :width=\"350\">\n        &lt;div>Early History of the Internet&lt;/div>\n        &lt;div>\n            &lt;ul>\n                &lt;li>1961 First packet-switching papers&lt;/li>\n                &lt;li>1966 Merit Network founded&lt;/li>\n                &lt;li>1966 ARPANET planning starts&lt;/li>\n                &lt;li>1969 ARPANET carries its first packets&lt;/li>\n                &lt;li>1970 Mark I network at NPL (UK)&lt;/li>\n                &lt;li>1971 Tymnet packet-switched network&lt;/li>\n                &lt;li>1973 CYCLADES network demonstrated&lt;/li>\n                &lt;li>1974 Telenet packet-switched network&lt;/li>\n                &lt;li>1980 Ethernet standard introduced&lt;/li>\n            &lt;/ul>\n        &lt;/div>\n    &lt;/JqxExpander>\n&lt;/template>\n\n&lt;script>\n    import JqxExpander from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxexpander.vue';\n\n    export default {\n        components: {\n            JqxExpander\n        },\n        mounted: function () {\n            this.$refs.myExpander.disable();\n\n            setTimeout(_ => this.$refs.myExpander.enable(), 1000);      \n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "expand",
            "description": "<P>Method used for expanding the expander's content. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8w2ZB/",
            "exampleDescription": "expands the jqxExpander",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;JqxExpander ref=\"myExpander\"\n                 :width=\"350\">\n        &lt;div>Early History of the Internet&lt;/div>\n        &lt;div>\n            &lt;ul>\n                &lt;li>1961 First packet-switching papers&lt;/li>\n                &lt;li>1966 Merit Network founded&lt;/li>\n                &lt;li>1966 ARPANET planning starts&lt;/li>\n                &lt;li>1969 ARPANET carries its first packets&lt;/li>\n                &lt;li>1970 Mark I network at NPL (UK)&lt;/li>\n                &lt;li>1971 Tymnet packet-switched network&lt;/li>\n                &lt;li>1973 CYCLADES network demonstrated&lt;/li>\n                &lt;li>1974 Telenet packet-switched network&lt;/li>\n                &lt;li>1980 Ethernet standard introduced&lt;/li>\n            &lt;/ul>\n        &lt;/div>\n    &lt;/JqxExpander>\n&lt;/template>\n&lt;script>\n    import JqxExpander from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxexpander.vue';\n    export default {\n        components: {\n            JqxExpander\n        },\n        mounted: function () {\n            this.$refs.myExpander.collapse();\n            setTimeout(_ => this.$refs.myExpander.expand(), 1000);\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "focus",
            "description": "<P>This method focuses on the expander. When the widget is focused, keyboard navigation can be used. Here is a list of the keys, supported by jqxExpander and their function: </P>\n<UL><LI><B>Enter</B>/<B>Spacebar</B> - if the focus is on the header, collapses or expands the widget. \r\n<LI><B>Tab</B> - focuses on the header or the next element in the DOM. \r\n<LI><B>Ctrl</B>+<B>Up arrow</B> - if the focus is on the content, focuses on the header. \r\n<LI><B>Ctrl</B>+<B>Down arrow</B> - if the focus is on the header, focuses on the content. </LI></UL>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/RyRSM/",
            "exampleDescription": "focuses the jqxExpander",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getContent",
            "description": "<P>Getting expander's content. Returns a string with the content's HTML. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/6mDmT/",
            "exampleDescription": "gets the content of the jqxExpander",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getHeaderContent",
            "description": "<P>Getting expander's header content. Returns a string with the header's HTML. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/c7nXG/",
            "exampleDescription": "gets the header content of the jqxExpander",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "invalidate",
            "description": "<P>This method refreshes the expander. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/5ChEk/",
            "exampleDescription": "invalidates the jqxExpander",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "refresh",
            "description": "<P>This method refreshes the expander. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/E7YHG/",
            "exampleDescription": "refresh the jqxExpander",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "render",
            "description": "<P>This method renders the expander. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3NjaL/",
            "exampleDescription": "renders the jqxExpander",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "setHeaderContent",
            "description": "<P>This method is setting specific content to the expander's header. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/F2jG9/",
            "exampleDescription": "sets the header of the jqxExpander",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "headerContent",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'New Header'" ]
            }
        },
        {
            "name": "setContent",
            "description": "<P>This method is setting specific content to the expander. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/VysHf/",
            "exampleDescription": "sets the content of the jqxExpander",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "content",
                    "dataType": "string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "'New Awesome Content!'" ]
            }
        }
    ]
}