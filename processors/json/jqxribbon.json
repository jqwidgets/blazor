{
    "widget": {
        "name": "jqxRibbon",
        "description": "Can be used as a tabbed toolbar or a mega menu.",
        "angular2": {
            "name": "jqxRibbonComponent",
            "selector": "jqxRibbon"
        }
    },
    "dataTypes": [
        {
            "name": "RibbonAnimationType",
            "ts_dataType": "enum",
            "enumOptions": [ "fade", "slide", "none" ]
        },
        {
            "name": "RibbonMode",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "popup" ]
        },
        {
            "name": "RibbonPopupCloseMode",
            "ts_dataType": "enum",
            "enumOptions": [ "click", "mouseLeave", "none" ]
        },
        {
            "name": "RibbonPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "top", "bottom", "left", "right" ]
        },
        {
            "name": "RibbonSelectionMode",
            "ts_dataType": "enum",
            "enumOptions": [ "click", "hover", "none" ]
        },
        {
            "name": "RibbonScrollPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "both", "near", "far" ]
        },
        {
            "name": "RibbonLayout",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "near", "far", "center" ]
        },
        {
            "name": "RibbonItem",
            "ts_dataType": "interface",
            "enumOptions": [
                {
                    "name": "title",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Title",
                    "defaultValue": ""
                },
                {
                    "name": "content",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Content",
                    "defaultValue": ""
                }
            ]
        }
    ],
    "exampleInit": {
        "width": "400"
    },
    "exampleExtraTemplate": "<ul>\n      <li>Item 1</li>\n      <li>Item 2</li>\n    </ul>\n    <div>\n      <div>Content 1<input type='button' id='button' value='Button' /></div>\n      <div>Content 2</div>\n    </div>",
    "properties": [
        {
            "name": "animationType",
            "defaultValue": "'fade'",
            "description": "<P>Sets or gets the animation type. </P>\n\r\n<H4>Possible values:</H4>\n\r\n<P>\"fade\" </P>\n\r\n<P>\"slide\" </P>\n\r\n<P>\"none\" </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>animationType</CODE> property. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ animationType: 'slide' });</CODE></PRE>\n\r\n<P>Get the <CODE>animationType</CODE> property. </P>\n<PRE><CODE>var animationType = $('#jqxRibbon').jqxRibbon('animationType');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/o520jym7/",
            "exampleDescription": "animationType is set to 'slide'",
            "dataType": "string",
            "ts_dataType": "enum:RibbonAnimationType",
            "exampleInit": {
                "animationType": "slide"
            }
        },
        {
            "name": "animationDelay",
            "defaultValue": "400",
            "description": "<P>Sets or gets the duration of the ribbon animation. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>animationDelay</CODE> property. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ animationDelay: 400 });</CODE></PRE>\n\r\n<P>Get the <CODE>animationDelay</CODE> property. </P>\n<PRE><CODE>var animationDelay = $('#jqxRibbon').jqxRibbon('animationDelay');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4Lyqqwfr/",
            "exampleDescription": "animationDelay is set to 800",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "animationDelay": "800"
            }
        },
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Enables/disables the ribbon. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ disabled: false });</CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxRibbon').jqxRibbon('disabled');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/pvdt8uha/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "height",
            "defaultValue": "100",
            "description": "<P>Sets or gets the ribbon's height. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ height: 120 });</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxRibbon').jqxRibbon('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/5ap5cc4u/",
            "exampleDescription": "height is set to 100",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "height": "100"
            }
        },
        {
            "name": "initContent",
            "defaultValue": "null",
            "description": "<P>Initializes the content of jqxRibbon. Useful for initializing other widgets. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>initContent</CODE> function. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ initContent: function (index) {\r\n    if (index == 0) {\r\n        $(\"#jqxButton\").jqxButton();\r\n    }\r\n});</CODE></PRE>\n\r\n<P>Get the <CODE>initContent</CODE> function. </P>\n<PRE><CODE>var initContent = $('#jqxRibbon').jqxRibbon('initContent');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/23tgzcmx/",
            "exampleDescription": "initContent is set to a custom function",
            "dataType": "Function",
            "ts_dataType": "(index: any) => void",
            "exampleInit": {
                "initContent": "initContent",
                "exampleData": "jqwidgets.createInstance('#button', 'jqxButton', { width: 50, height: 50 });"
            }
        },
        {
            "name": "mode",
            "defaultValue": "'default'",
            "description": "<P>Sets or gets the ribbon's display mode. </P>\n\r\n<H4>Possible values:</H4>\n\r\n<P>\"default\" - the ribbon's content is included in its height. </P>\n\r\n<P>\"popup\" - the ribbon's content is <EM style=\"DISPLAY: none\" jQuery111109325420967785096=\"7\">not</EM> included in its height and is positioned absolutely. It overlaps elements underneath it. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>mode</CODE> property. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ mode: 'popup' });</CODE></PRE>\n\r\n<P>Get the <CODE>mode</CODE> property. </P>\n<PRE><CODE>var mode = $('#jqxRibbon').jqxRibbon('mode');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/qfm5ksLg/",
            "exampleDescription": "mode is set to 'popup'",
            "dataType": "string",
            "ts_dataType": "enum:RibbonMode",
            "exampleInit": {
                "mode": "popup"
            }
        },
        {
            "name": "popupCloseMode",
            "defaultValue": "'click'",
            "description": "<P>Sets or gets the way to close selected content sections when the <CODE>mode</CODE> property is set to \"popup\". </P>\n\r\n<H4>Possible values:</H4>\n\r\n<P>\"click\" </P>\n\r\n<P>\"mouseLeave\" </P>\n\r\n<P>\"none\" </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>popupCloseMode</CODE> property. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ popupCloseMode: 'mouseLeave' });</CODE></PRE>\n\r\n<P>Get the <CODE>popupCloseMode</CODE> property. </P>\n<PRE><CODE>var popupCloseMode = $('#jqxRibbon').jqxRibbon('popupCloseMode');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/djbnac1q/",
            "exampleDescription": "popupCloseMode is set to 'mouseLeave'",
            "dataType": "string",
            "ts_dataType": "enum:RibbonPopupCloseMode",
            "exampleInit": {
                "mode": "popup",
                "popupCloseMode": "mouseLeave"
            }
        },
        {
            "name": "position",
            "defaultValue": "'top'",
            "description": "<P>Sets or gets whether the ribbon's header is positioned at the top, bottom, left or right of the content. </P>\n\r\n<H4>Possible values:</H4>\n\r\n<P>\"top\" </P>\n\r\n<P>\"bottom\" </P>\n\r\n<P>\"left\" </P>\n\r\n<P>\"right\" </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>position</CODE> property. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ position: \"left\" });</CODE></PRE>\n\r\n<P>Get the <CODE>position</CODE> property. </P>\n<PRE><CODE>var position = $('#jqxRibbon').jqxRibbon('position');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/t8c4mgkp/",
            "exampleDescription": "position is set to \"left\"",
            "dataType": "string",
            "ts_dataType": "enum:RibbonPosition",
            "exampleInit": {
                "position": "bottom"
            }
        },
        {
            "name": "reorder",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the ribbon's tabs can be reordered.",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/2ndpo7t9/",
            "exampleDescription": "reorder is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "reorder": "true"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>rtl</CODE> property. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ rtl: false});</CODE></PRE>\n\r\n<P>Get the <CODE>rtl</CODE> property. </P>\n<PRE><CODE>var rtl = $('#jqxRibbon').jqxRibbon('rtl');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/2ndpo7t9/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "selectedIndex",
            "defaultValue": "0",
            "description": "<P>Sets or gets the selected index (tab). </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>selectedIndex</CODE> property. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ selectedIndex: 0 });</CODE></PRE>\n\r\n<P>Get the <CODE>selectedIndex</CODE> property. </P>\n<PRE><CODE>var selectedIndex = $('#jqxRibbon').jqxRibbon('selectedIndex');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/nf3fat52/",
            "exampleDescription": "selectedIndex is set to 2",
            "dataType": "number",
            "exampleInit": {
                "selectedIndex": "1"
            }
        },
        {
            "name": "selectionMode",
            "defaultValue": "'click'",
            "description": "<P>Sets or gets the selection mode. </P>\n\r\n<H4>Possible values:</H4>\n\r\n<P>\"click\" </P>\n\r\n<P>\"hover\" </P>\n\r\n<P>\"none\" </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>selectionMode</CODE> property. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ selectionMode: 'hover' });</CODE></PRE>\n\r\n<P>Get the <CODE>selectionMode</CODE> property. </P>\n<PRE><CODE>var selectionMode = $('#jqxRibbon').jqxRibbon('selectionMode');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tj23wh3h/",
            "exampleDescription": "selectionMode is set to 'hover'",
            "dataType": "string",
            "ts_dataType": "enum:RibbonSelectionMode",
            "exampleInit": {
                "selectionMode": "hover"
            }
        },
        {
            "name": "scrollPosition",
            "defaultValue": "'both'",
            "description": "<P>Sets or gets the position of the scrollbar buttons. </P>\n\r\n<H4>Possible values:</H4>\n\r\n<P>\"both\" </P>\n\r\n<P>\"near\" </P>\n\r\n<P>\"far\" </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>scrollPosition</CODE> property. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ scrollPosition: 'near' });</CODE></PRE>\n\r\n<P>Get the <CODE>scrollPosition</CODE> property. </P>\n<PRE><CODE>var scrollPosition = $('#jqxRibbon').jqxRibbon('scrollPosition');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ksodo0r9/",
            "exampleDescription": "scrollPosition is set to 'near'",
            "dataType": "string",
            "ts_dataType": "enum:RibbonScrollPosition",
            "exampleInit": {
                "width": "100",
                "scrollPosition": "near"
            }
        },
        {
            "name": "scrollStep",
            "defaultValue": "10",
            "description": "<P>Sets or gets the scroll step. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>scrollStep</CODE> property. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ scrollStep: 20 });</CODE></PRE>\n\r\n<P>Get the <CODE>scrollStep</CODE> property. </P>\n<PRE><CODE>var scrollStep = $('#jqxRibbon').jqxRibbon('scrollStep');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/bxs8oxwu/",
            "exampleDescription": "scrollStep is set to 20",
            "dataType": "number",
            "exampleInit": {
                "width": "100",
                "scrollStep": "20"
            }
        },
        {
            "name": "scrollDelay",
            "defaultValue": "50",
            "description": "<P>Sets or gets the scroll delay. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>scrollDelay</CODE> property. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ scrollDelay: 100 });</CODE></PRE>\n\r\n<P>Get the <CODE>scrollDelay</CODE> property. </P>\n<PRE><CODE>var scrollDelay = $('#jqxRibbon').jqxRibbon('scrollDelay');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/kheu2s0e/",
            "exampleDescription": "scrollDelay is set to 100",
            "dataType": "number",
            "exampleInit": {
                "width": "100",
                "scrollDelay": "100"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\"type=\"text/css\"/&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;</CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. <PRE><CODE>$('#jqxRibbon').jqxRibbon({ theme: 'material' });</CODE></PRE></LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/5xu2ogya/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "width",
            "defaultValue": "null",
            "description": "<P>Sets or gets the ribbon's width. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon({ width: 500 });</CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxRibbon').jqxRibbon('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/5xu2ogya/",
            "exampleDescription": "width is set to 500",
            "dataType": "number",
            "ts_dataType": "string | number"
        }
    ],
    "events": [
        {
            "name": "change",
            "description": "<P>This event is triggered when the user selects or unselects an item. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>change</CODE> event by type: jqxRibbon. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/mzLoj4e5/",
            "exampleDescription": "Bind to the change event by type: jqxRibbon.",
            "example": "<PRE><CODE>$('#jqxRibbon').on('change', function () { // Some code here. }); </CODE></PRE>"
        },
        {
            "name": "reorder",
            "description": "<P>This event is triggered when the user reorders the jqxRibbon items with the mouse. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>reorder</CODE> event by type: jqxRibbon. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zkb60bge/",
            "exampleDescription": "Bind to the reorder event by type: jqxRibbon.",
            "example": "<PRE><CODE>$('#jqxRibbon').on('reorder', function () { // Some code here. }); </CODE></PRE>",
            "exampleInit": {
                "reorder": "true"
            }
        },
        {
            "name": "select",
            "description": "<P>This event is triggered when the user selects an item. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>select</CODE> event by type: jqxRibbon. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/67tgabyu/",
            "exampleDescription": "Bind to the select event by type: jqxRibbon.",
            "example": "<PRE><CODE>$('#jqxRibbon').on('select', function () { // Some code here. }); </CODE></PRE>"
        },
        {
            "name": "unselect",
            "description": "<P>This event is triggered when the user unselects an item. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>unselect</CODE> event by type: jqxRibbon. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9rjscrqo/",
            "exampleDescription": "Bind to the unselect event by type: jqxRibbon.",
            "example": "<PRE><CODE>$('#jqxRibbon').on('unselect', function () { // Some code here. }); </CODE></PRE>"
        }
    ],
    "methods": [
        {
            "name": "addAt",
            "description": "<P>Adds a new item by index. </P>\n<UL><LI>index - number; \r\n<LI>data - object with the following properties: \r\n<UL>\r\n<LI>title - string; \r\n<LI>content - string. </LI></UL></LI></UL>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>addAt</CODE> method. </P>\n<PRE><CODE>$('#jqxRibbon').jqxRibbon('addAt', 2, { title: \"New item\", content: \"New content\" });</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/o5zzspg6/",
            "exampleDescription": "adds a new item in the jqxRibbon",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "item",
                    "dataType": "object",
                    "ts_dataType": "RibbonItem",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "0", "{ title: \"New item\", content: \"New content\" }" ]
            }
        },
        {
            "name": "clearSelection",
            "description": "<P>Unselects the selected item and collapses its content. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>clearSelection</CODE> method. </P>\n<PRE><CODE>$('#jqxRibbon').jqxRibbon('clearSelection'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vzpqkqzq/",
            "exampleDescription": "unselects the selected item in the jqxRibbon",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "disableAt",
            "description": "<P>Disables an item by index. Index is a number. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>disableAt</CODE> method. </P>\n<P>// @param index - number </P>\n<PRE><CODE>$('#jqxRibbon').jqxRibbon('disableAt', 8); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/knfeu2zh/",
            "exampleDescription": "disables an item in the jqxRibbon",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxRibbon ref=\"myRibbon\"\n          :width=\"400\">\n      &lt;ul>\n        &lt;li>Item 1&lt;/li>\n        &lt;li>Item 2&lt;/li>\n      &lt;/ul>\n      &lt;div>\n        &lt;div>Content 1&lt;input type='button' id='button' value='Button' />&lt;/div>\n        &lt;div>Content 2&lt;/div>\n      &lt;/div>\n    &lt;/JqxRibbon>\n    &lt;JqxButton @click=\"enable\">Enable&lt;/JqxButton>\n    &lt;JqxButton @click=\"disable\">Disable&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxRibbon from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxribbon.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxRibbon,\n      JqxButton\n    },\n    methods: {\n      enable: function () {\n        this.$refs.myRibbon.enableAt(0);\n      },\n      disable: function () {\n        this.$refs.myRibbon.disableAt(0);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 15px;\n    margin-right: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "destroy",
            "description": "<P>Destroys the jqxRibbon widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxRibbon').jqxRibbon('destroy'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hk9p3286/",
            "exampleDescription": "destroys the jqxRibbon.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "enableAt",
            "description": "<P>Enables a disabled item by index. Index is a number. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>enableAt</CODE> method. </P>\n<P>// @param index - number </P>\n<PRE><CODE>$('#jqxRibbon').jqxRibbon('enableAt', 3); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/jfp8fzpr/",
            "exampleDescription": "enables an item in the jqxRibbon",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxRibbon ref=\"myRibbon\"\n          :width=\"400\">\n      &lt;ul>\n        &lt;li>Item 1&lt;/li>\n        &lt;li>Item 2&lt;/li>\n      &lt;/ul>\n      &lt;div>\n        &lt;div>Content 1&lt;input type='button' id='button' value='Button' />&lt;/div>\n        &lt;div>Content 2&lt;/div>\n      &lt;/div>\n    &lt;/JqxRibbon>\n    &lt;JqxButton @click=\"enable\">Enable&lt;/JqxButton>\n    &lt;JqxButton @click=\"disable\">Disable&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxRibbon from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxribbon.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxRibbon,\n      JqxButton\n    },\n    methods: {\n      enable: function () {\n        this.$refs.myRibbon.enableAt(0);\n      },\n      disable: function () {\n        this.$refs.myRibbon.disableAt(0);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 15px;\n    margin-right: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "hideAt",
            "description": "<P>Hides an item by index. Index is a number. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>hideAt</CODE> method. </P>\n<P>// @param index - number </P>\n<PRE><CODE>$('#jqxRibbon').jqxRibbon('hideAt', 2); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/yjj1mhmp/",
            "exampleDescription": "hides an item in the jqxRibbon",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxRibbon ref=\"myRibbon\"\n          :width=\"400\">\n      &lt;ul>\n        &lt;li>Item 1&lt;/li>\n        &lt;li>Item 2&lt;/li>\n      &lt;/ul>\n      &lt;div>\n        &lt;div>Content 1&lt;input type='button' id='button' value='Button' />&lt;/div>\n        &lt;div>Content 2&lt;/div>\n      &lt;/div>\n    &lt;/JqxRibbon>\n    &lt;JqxButton @click=\"show\">Show&lt;/JqxButton>\n    &lt;JqxButton @click=\"hide\">Hide&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxRibbon from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxribbon.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxRibbon,\n      JqxButton\n    },\n    methods: {\n      show: function () {\n        this.$refs.myRibbon.showAt(0);\n      },\n      hide: function () {\n        this.$refs.myRibbon.hideAt(0);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 15px;\n    margin-right: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "removeAt",
            "description": "<P>Removes an item from the ribbon. Index is a number. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>removeAt</CODE> method. </P>\n<P>// @param index - number </P>\n<PRE><CODE>$('#jqxRibbon').jqxRibbon('removeAt', 2); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/acghLnum/",
            "exampleDescription": "removes an item in the jqxRibbon",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "0" ]
            }
        },
        {
            "name": "render",
            "description": "<P>Renders the jqxRibbon widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>render</CODE> method. </P>\n<PRE><CODE>$('#jqxRibbon').jqxRibbon('render'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/mmurm8ho/",
            "exampleDescription": "renders the jqxRibbon",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "refresh",
            "description": "<P>Refreshes the jqxRibbon widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>refresh</CODE> method. </P>\n<PRE><CODE>$('#jqxRibbon').jqxRibbon('refresh'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/e3vf11g5/",
            "exampleDescription": "refreshes the jqxRibbon",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "selectAt",
            "description": "<P>Selects the item with indicated index. Index is a number. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>selectAt</CODE> method. </P>\n<P>// @param index - number </P>\n<PRE><CODE>$('#jqxRibbon').jqxRibbon('selectAt', 2); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/b5axjtbq/",
            "exampleDescription": "selects an item in the jqxRibbon",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "1" ]
            }
        },
        {
            "name": "showAt",
            "description": "<P>Shows an item by index. Index is a number. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>showAt</CODE> method. </P>\n<P>// @param index - number </P>\n<PRE><CODE>$('#jqxRibbon').jqxRibbon('showAt', 5); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8m7f1qso/",
            "exampleDescription": "shows item in the jqxRibbon",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxRibbon ref=\"myRibbon\"\n          :width=\"400\">\n      &lt;ul>\n        &lt;li>Item 1&lt;/li>\n        &lt;li>Item 2&lt;/li>\n      &lt;/ul>\n      &lt;div>\n        &lt;div>Content 1&lt;input type='button' id='button' value='Button' />&lt;/div>\n        &lt;div>Content 2&lt;/div>\n      &lt;/div>\n    &lt;/JqxRibbon>\n    &lt;JqxButton @click=\"show\">Show&lt;/JqxButton>\n    &lt;JqxButton @click=\"hide\">Hide&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n&lt;script>\n  import JqxRibbon from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxribbon.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxRibbon,\n      JqxButton\n    },\n    methods: {\n      show: function () {\n        this.$refs.myRibbon.showAt(0);\n      },\n      hide: function () {\n        this.$refs.myRibbon.hideAt(0);\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 15px;\n    margin-right: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "setPopupLayout",
            "description": "<P>Sets the layout of an item's content if mode is set to \"popup\". </P>\n<UL><LI>index - number; \r\n<LI>layout - string, possible values: \r\n<UL>\r\n<LI>\"default\" - the item's content is aligned with the widget's header; \r\n<LI>\"near\" - the item's content is left/top aligned with its title; \r\n<LI>\"far\" - the item's content is right/bottom aligned with its title; \r\n<LI>\"center\" - the item's content is centered under/next to its title. </LI></UL>\r\n<LI>width - number/string; \r\n<LI>height - number/string. </LI></UL>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>setPopupLayout</CODE> method. </P>\n<PRE><CODE>$('#jqxRibbon').jqxRibbon('setPopupLayout', 0, \"center\", 150, 100); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/xoqzq98d/",
            "exampleDescription": "sets the layout of items' content in the jqxRibbon",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "layout",
                    "dataType": "string",
                    "ts_dataType": "any",
                    "description": "\"default\" - the item's content is aligned with the widget's header; \r\n\"near\" - the item's content is left/top aligned with its title; \r\n\"far\" - the item's content is right/bottom aligned with its title; \r\n\"center\" - the item's content is centered under/next to its title. ",
                    "optional": false
                },
                {
                    "name": "width",
                    "dataType": "number/string",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "height",
                    "dataType": "number/string",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "0", "'near'", "200", "200" ]
            },
            "extraData": {
                "mode": "'popup'"
            }
        },
        {
            "name": "updateAt",
            "description": "<P>Updates an item. </P>\n<P><EM style=\"DISPLAY: none\" jQuery111109325420967785096=\"63\">Note:</EM> after an item has been updated with updateAt, initContent will be called again for that item (if set). </P>\n<UL><LI>index - number; \r\n<LI>newData - object with the following properties: \r\n<UL>\r\n<LI>newTitle - string; \r\n<LI>newContent - string. </LI></UL></LI></UL>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>updateAt</CODE> method. </P>\n<PRE><CODE>$('#jqxRibbon').jqxRibbon('updateAt', 1, { newTitle: \"Updated title\", newContent: \"Updated content\" });</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/mhyowh0c/",
            "exampleDescription": "updates an item in the jqxRibbon",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "index",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "item",
                    "dataType": "object",
                    "ts_dataType": "RibbonItem",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "1", "{ newTitle: \"Updated title\", newContent: \"Updated content\" }" ]
            }
        },
        {
            "name": "val",
            "description": "<P>Sets or gets the selected index. Index is a number. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>val</CODE> method. </P>\n<P>//Get the selected index.<BR>//@param index - number </P>\n<PRE><CODE>var index = $(\"#jqxRibbon\").jqxRibbon('val'); </CODE></PRE>\n<P>//Get the index using jQuery's val() </P>\n<PRE><CODE>var index = $(\"#jqxRibbon\").val(); </CODE></PRE>\n<P>//Set the selected index. </P>\n<PRE><CODE>$(\"#jqxRibbon\").jqxRibbon('val', 3); </CODE></PRE>\n<P>//Set index using jQuery's val(). </P>\n<PRE><CODE>$(\"#jqxRibbon\").val(3); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/p9aruxuu/",
            "exampleDescription": "sets or gets the selected index in the jqxRibbon.",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "value",
                    "dataType": "string",
                    "description": "",
                    "optional": true
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxRibbon ref=\"myRibbon\"\n        :width=\"400\">\n    &lt;ul>\n      &lt;li>Item 1&lt;/li>\n      &lt;li>Item 2&lt;/li>\n    &lt;/ul>\n    &lt;div>\n      &lt;div>Content 1&lt;input type='button' id='button' value='Button' />&lt;/div>\n      &lt;div>Content 2&lt;/div>\n    &lt;/div>\n  &lt;/JqxRibbon>\n&lt;/template>\n\n&lt;script>\n  import JqxRibbon from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxribbon.vue';\n\n  export default {\n    components: {\n      JqxRibbon\n    },\n    mounted: function () {\n      this.$refs.myRibbon.val(1);\n    }\n  }\n&lt;/script>"
            }
        }
    ]
}