{
    "widget": {
        "name": "jqxFileUpload",
        "description": "Enables users to select files and upload them to a server. The file upload supports automatic upload and multiple files upload.",
        "angular2": {
            "name": "jqxFileUploadComponent",
            "selector": "jqxFileUpload"
        }
    },
    "exampleNewTemplate": "  &lt;div>\n    &lt;p>Note: to be able to upload a file you would have to set the property uploadUrl to point to a file hosted on your server, which handles the upload process.&lt;/p>\n    &lt;JqxFileUpload ref=\"myFileUpload\" />\n  &lt;/div>\n",
    "dataTypes": [
        {
            "name": "FileUploadTemplate",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "primary", "success", "warning", "danger", "inverse", "info", "link" ]
        },
        {
            "name": "FileUploadLocalization",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "browseButton",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "BrowseButton",
                    "defaultValue": ""
                },
                {
                    "name": "uploadButton",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "UploadButton",
                    "defaultValue": ""
                },
                {
                    "name": "cancelButton",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "CancelButton",
                    "defaultValue": ""
                },
                {
                    "name": "uploadFileTooltip",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "UploadFileTooltip",
                    "defaultValue": ""
                },
                {
                    "name": "cancelFileTooltip",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "CancelFileTooltip",
                    "defaultValue": ""
                }
            ]
        },
        {
            "name": "FileUploadRenderFiles",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "fileName",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "FileName",
                    "defaultValue": ""
                }
            ]
        }
    ],
    "properties": [
        {
            "name": "autoUpload",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether files will be automatically uploaded when selected. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>autoUpload</CODE> property. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload({ autoUpload: true });</CODE></PRE>\n\r\n<P>Get the <CODE>autoUpload</CODE> property. </P>\n<PRE><CODE>var autoUpload = $('#jqxFileUpload').jqxFileUpload('autoUpload');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8gv398yh/",
            "exampleDescription": "autoUpload is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "uploadUrl": "upload.php",
                "autoUpload": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "accept",
            "defaultValue": "null",
            "description": "<P>Sets or gets the file types that can be submitted to the server through jqxFileUpload. This property corresponds to the <CODE>accept</CODE> attribute of the hidden file input which is submitted to the URL specified by the <CODE>uploadUrl</CODE> property. </P>\n<B>Possible values:</B>\n<PRE><CODE>any file extension, for example: '.gif', '.jpg', '.png', '.doc', etc.</CODE></PRE>\n<PRE><CODE>'audio/*' - all sound files are accepted.</CODE></PRE>\n<PRE><CODE>'video/*' - all video files are accepted.</CODE></PRE>\n<PRE><CODE>'image/*' - all image files are accepted.</CODE></PRE>\n<PRE><CODE>any valid media type. For a list, please refer to <A href=\"http://www.iana.org/assignments/media-types/media-types.xhtml\" target=_blank>IANA Media Types</A>.</CODE></PRE>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>accept</CODE> property. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload({ accept: 'image/*' });</CODE></PRE>\n\r\n<P>Get the <CODE>accept</CODE> property. </P>\n<PRE><CODE>var accept = $('#jqxFileUpload').jqxFileUpload('accept');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/scomLbwj/",
            "exampleDescription": "accept is set to 'image/*'",
            "dataType": "string",
            "exampleInit": {
                "uploadUrl": "upload.php",
                "accept": "image/*"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "browseTemplate",
            "defaultValue": "''",
            "description": "<P>Sets or gets the template applied to the 'Browse' button. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'default' - the default button's template. The button's style depends only on the 'theme' property value.</CODE></PRE>\n<PRE><CODE>'primary' - dark blue button for extra visual weight.</CODE></PRE>\n<PRE><CODE>'success' - green button for successful or positive action.</CODE></PRE>\n<PRE><CODE>'warning' - orange button which indicates caution.</CODE></PRE>\n<PRE><CODE>'danger' - red button which indicates a dangerous or negative action.</CODE></PRE>\n<PRE><CODE>'inverse' - dark gray button, not tied to a semantic action or use.</CODE></PRE>\n<PRE><CODE>'info' - blue button, not tied to a semantic action or use.</CODE></PRE>\n<PRE><CODE>'link' - making it look like a link.</CODE></PRE>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>browseTemplate</CODE> property. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload({ browseTemplate: 'success' });</CODE></PRE>\n\r\n<P>Get the <CODE>autoUpload</CODE> property. </P>\n<PRE><CODE>var browseTemplate = $('#jqxFileUpload').jqxFileUpload('browseTemplate');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/uo9makg4/",
            "exampleDescription": "browseTemplate is set to 'primary'",
            "dataType": "string",
            "ts_dataType": "enum:FileUploadTemplate",
            "exampleInit": {
                "uploadUrl": "upload.php",
                "browseTemplate": "primary"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "cancelTemplate",
            "defaultValue": "''",
            "description": "<P>Sets or gets the template applied to the 'Cancel All' button. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'default' - the default button's template. The button's style depends only on the 'theme' property value.</CODE></PRE>\n<PRE><CODE>'primary' - dark blue button for extra visual weight.</CODE></PRE>\n<PRE><CODE>'success' - green button for successful or positive action.</CODE></PRE>\n<PRE><CODE>'warning' - orange button which indicates caution.</CODE></PRE>\n<PRE><CODE>'danger' - red button which indicates a dangerous or negative action.</CODE></PRE>\n<PRE><CODE>'inverse' - dark gray button, not tied to a semantic action or use.</CODE></PRE>\n<PRE><CODE>'info' - blue button, not tied to a semantic action or use.</CODE></PRE>\n<PRE><CODE>'link' - making it look like a link.</CODE></PRE>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>cancelTemplate</CODE> property. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload({ cancelTemplate: 'inverse' });</CODE></PRE>\n\r\n<P>Get the <CODE>cancelTemplate</CODE> property. </P>\n<PRE><CODE>var cancelTemplate = $('#jqxFileUpload').jqxFileUpload('cancelTemplate');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/qesg1pwe/",
            "exampleDescription": "cancelTemplate is set to 'danger'",
            "dataType": "string",
            "ts_dataType": "enum:FileUploadTemplate",
            "exampleInit": {
                "uploadUrl": "upload.php",
                "cancelTemplate": "danger"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Enables or disables the jqxFileUpload. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload({ disabled: false });</CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxFileUpload').jqxFileUpload('disabled');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/73qmxdq0/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "uploadUrl": "upload.php",
                "disabled": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "fileInputName",
            "defaultValue": "''",
            "description": "<P>Sets or gets the <CODE>name</CODE> attribute of the hidden file input which is submitted to the URL specified by the <CODE>uploadUrl</CODE> property. This name is applied to the file input of the file about to be uploaded and after the upload the name attribute is removed so that it can be set to the next hidden file input (if any). As a result, there is only one file input with this name attribute at a time. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>fileInputName</CODE> property. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload({ fileInputName: 'fileToUpload' });</CODE></PRE>\n\r\n<P>Get the <CODE>fileInputName</CODE> property. </P>\n<PRE><CODE>var fileInputName = $('#jqxFileUpload').jqxFileUpload('fileInputName'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/opcdqgym/",
            "exampleDescription": "fileInputName is set to a custom string",
            "dataType": "string",
            "exampleInit": {
                "uploadUrl": "upload.php",
                "fileInputName": "fileToUpload"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "height",
            "defaultValue": "'auto'",
            "description": "<P>Sets or gets the jqxFileUpload's height. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload({ height: '150px' });</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxFileUpload').jqxFileUpload('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/z8oqe6bv/",
            "exampleDescription": "height is set to 150",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "uploadUrl": "upload.php",
                "height": "150"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "localization",
            "defaultValue": "null",
            "description": "<P>Sets the various text values used in the widget. Useful for localization. </P>\n\r\n<P>The localization object has the following fields: </P>\n<PRE><CODE>browseButton - sets the text of the 'Browse' button.</CODE></PRE>\n<PRE><CODE>uploadButton - sets the text of the 'Upload All' button.</CODE></PRE>\n<PRE><CODE>cancelButton - sets the text of the 'Cancel All' button.</CODE></PRE>\n<PRE><CODE>uploadFileTooltip - sets the text of the 'Upload File' tooltip.</CODE></PRE>\n<PRE><CODE>cancelFileTooltip - sets the text of the 'Cancel' tooltip.</CODE></PRE>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>localization</CODE> property. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload({ localization: { browseButton: 'Blättern', uploadButton: 'Laden Sie alle', cancelButton: 'alle Abbrechen', uploadFileTooltip: 'Datei hochladen', cancelFileTooltip: 'aufheben' } });</CODE></PRE>\n\r\n<P>Get the <CODE>localization</CODE> property. </P>\n<PRE><CODE>var localization = $('#jqxFileUpload').jqxFileUpload('localization');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ghnmp6r4/",
            "exampleDescription": "localization is set to a custom object.",
            "dataType": "object",
            "ts_dataType": "FileUploadLocalization",
            "exampleInit": {
                "uploadUrl": "upload.php",
                "localization": "localization",
                "exampleData": "{ browseButton: 'Bl&#228;ttern', uploadButton: 'Laden Sie alle', cancelButton: 'alle Abbrechen', uploadFileTooltip: 'Datei hochladen', cancelFileTooltip: 'aufheben' }"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "multipleFilesUpload",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether multiple files selection and upload are allowed. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>multipleFilesUpload</CODE> property. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload({ multipleFilesUpload: false });</CODE></PRE>\n\r\n<P>Get the <CODE>multipleFilesUpload</CODE> property. </P>\n<PRE><CODE>var multipleFilesUpload = $('#jqxFileUpload').jqxFileUpload('multipleFilesUpload');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/e3zshL7L/",
            "exampleDescription": "multipleFilesUpload is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "uploadUrl": "upload.php",
                "multipleFilesUpload": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "renderFiles",
            "defaultValue": "null",
            "description": "<P>A callback function used for rendering the file selection rows. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>renderFiles</CODE> property. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload({ width: 300, uploadUrl: 'upload.php', fileInputName: 'fileToUpload',\r\n    renderFiles: function (fileName) {\r\n        var stopIndex = fileName.indexOf('.');\r\n        var name = fileName.slice(0, stopIndex);\r\n        var extension = fileName.slice(stopIndex);\r\n        return name + '&lt;strong&gt;' + extension + '&lt;/strong&gt;';\r\n    }\r\n}); </CODE></PRE>\n\r\n<P>Get the <CODE>renderFiles</CODE> property. </P>\n<PRE><CODE>var renderFiles = $('#jqxFileUpload').jqxFileUpload('renderFiles');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/fq3st28h/",
            "exampleDescription": "renderFiles is set to a custom function",
            "dataType": "function",
            "ts_dataType": "(filename:FileUploadRenderFiles['fileName']) => void",
            "exampleInit": {
                "uploadUrl": "upload.php",
                "renderFiles": "renderFiles",
                "exampleData": "return fileName.toUpperCase();"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>rtl</CODE> property. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload({ rtl : true });</CODE></PRE>\n\r\n<P>Get the <CODE>rtl</CODE> property. </P>\n<PRE><CODE>var rtl = $('#jqxFileUpload').jqxFileUpload('rtl');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/s5fu604a/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "uploadUrl": "upload.php",
                "rtl": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n                                                                                        <PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt; </CODE></PRE>\r\n                                </CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8rb3ghxh/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "uploadUrl": "upload.php",
                "theme": "material"
            }
        },
        {
            "name": "uploadUrl",
            "defaultValue": "''",
            "description": "<P>Sets or gets the upload URL. This property corresponds to the upload form's <CODE>action</CODE> attribute. For example, the uploadUrl property can point to a PHP file, which to handle the upload operation server-side. Here is a sample PHP file that allows only images no larger than 500 kB to be uploaded to the server: </P>\n<PRE class=code style=\"MAX-WIDTH: 700px; WIDTH: 700px; MARGIN: 10px\">&lt;?php<DIV>$target_dir = <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"uploads/\"</SPAN>;<DIV>$target_file = $target_dir . basename($_FILES[<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"fileToUpload\"][\"name\"</SPAN>]);<DIV>$uploadOk = 1;<DIV>$imageFileType = pathinfo($target_file,PATHINFO_EXTENSION);<DIV>// Check if image file is a actual image or fake image<DIV>if(isset($_POST[<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"submit\"</SPAN>])) {<DIV>    $check = getimagesize($_FILES[<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"fileToUpload\"][\"tmp_name\"</SPAN>]);<DIV>    if($check !== false) {<DIV>        echo <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"File is an image - \" . $check[\"mime\"] . \".\"</SPAN>;<DIV>        $uploadOk = 1;<DIV>    } else {<DIV>        echo <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"File is not an image.\"</SPAN>;<DIV>        $uploadOk = 0;<DIV>    }<DIV>}<DIV>// Check if file already exists<DIV>if (file_exists($target_file)) {<DIV>    echo <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"Sorry, file already exists.\"</SPAN>;<DIV>    $uploadOk = 0;<DIV>}<DIV>// Check file size<DIV>if ($_FILES[<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"fileToUpload\"][\"size\"</SPAN>] &gt; 500000) {<DIV>    echo <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"Sorry, your file is too large.\"</SPAN>;<DIV>    $uploadOk = 0;<DIV>}<DIV>// Allow certain file formats<DIV>if($imageFileType != <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"jpg\" &amp;&amp; $imageFileType != \"png\" &amp;&amp; $imageFileType != \"jpeg\"</SPAN><DIV>&amp;&amp; $imageFileType != <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"gif\"</SPAN> ) {<DIV>    echo <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"Sorry, only JPG, JPEG, PNG &amp; GIF files are allowed.\"</SPAN>;<DIV>    $uploadOk = 0;<DIV>}<DIV>// Check if $uploadOk is set to 0 by an error<DIV>if ($uploadOk == 0) {<DIV>    echo <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"Sorry, your file was not uploaded.\"</SPAN>;<DIV>// if everything is ok, try to upload file<DIV>} else {<DIV>    if (move_uploaded_file($_FILES[<SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"fileToUpload\"][\"tmp_name\"</SPAN>], $target_file)) {<DIV>        echo <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"The file \". basename( $_FILES[\"fileToUpload\"][\"name\"]). \" has been uploaded.\"</SPAN>;<DIV>    } else {<DIV>        echo <SPAN style=\"COLOR: #a24; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; CLEAR: both; MARGIN: 0px; PADDING-RIGHT: 0px\">\"Sorry, there was an error uploading your file.\"</SPAN>;<DIV>    }<DIV>}<DIV>?&gt;<DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></PRE>\n\r\n<P><EM style=\"DISPLAY: none\" jQuery1111015916433064073576=\"14\">A few notes about file uploads in PHP:</EM> </P>\n\r\n<P>Many shared hosting servers allow a very low maximum file upload size. If you plan on accepting larger files, you should consider a dedicated or virtual dedicated server. To adjust the file upload size in PHP, modify the php.ini file's \"upload_max_filesize\" value. You can also adjust this value using PHP's .ini_set() function. The file upload counts towards the hosting environment's $_POST size, so you may need to increase the php.ini file's post_max_size value. Be sure to do a lot of file validation when allowing users to upload files. How horrible would it be to allow a user to upload a .exe file to your server? They could do horrible things on the server. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>uploadUrl</CODE> property. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload({ uploadUrl: 'upload.php' });</CODE></PRE>\n\r\n<P>Get the <CODE>uploadUrl</CODE> property. </P>\n<PRE><CODE>var uploadUrl = $('#jqxFileUpload').jqxFileUpload('uploadUrl');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Lvyujd10/",
            "exampleDescription": "uploadUrl is set to a custom string.",
            "dataType": "string",
            "exampleInit": {
                "uploadUrl": "upload.php"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "uploadTemplate",
            "defaultValue": "''",
            "description": "<P>Sets or gets the template applied to the 'Upload All' button. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'default' - the default button's template. The button's style depends only on the 'theme' property value.</CODE></PRE>\n<PRE><CODE>'primary' - dark blue button for extra visual weight.</CODE></PRE>\n<PRE><CODE>'success' - green button for successful or positive action.</CODE></PRE>\n<PRE><CODE>'warning' - orange button which indicates caution.</CODE></PRE>\n<PRE><CODE>'danger' - red button which indicates a dangerous or negative action.</CODE></PRE>\n<PRE><CODE>'inverse' - dark gray button, not tied to a semantic action or use.</CODE></PRE>\n<PRE><CODE>'info' - blue button, not tied to a semantic action or use.</CODE></PRE>\n<PRE><CODE>'link' - making it look like a link.</CODE></PRE>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>uploadTemplate</CODE> property. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload({ uploadTemplate: 'primary' });</CODE></PRE>\n\r\n<P>Get the <CODE>uploadTemplate</CODE> property. </P>\n<PRE><CODE>var uploadTemplate = $('#jqxFileUpload').jqxFileUpload('uploadTemplate');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/e274rnhq/",
            "exampleDescription": "uploadTemplate is set to 'warning'",
            "dataType": "string",
            "ts_dataType": "enum:FileUploadTemplate",
            "exampleInit": {
                "uploadUrl": "upload.php",
                "uploadTemplate": "warning"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "width",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxFileUpload's width. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload({ width: 300 });</CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxFileUpload').jqxFileUpload('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8rb3ghxh/",
            "exampleDescription": "width is set to 400",
            "dataType": "number",
            "ts_dataType": "string | number",
            "exampleInit": {
                "uploadUrl": "upload.php",
                "width": "400"
            },
            "customExample": {
                "uploadUrl": "upload.php",
                "codeType": "get"
            }
        }
    ],
    "events": [
        {
            "name": "remove",
            "description": "<P>This event is triggered when a file row has been removed. </P>\n<H4>Code examples </H4>\n<P>Bind to the <CODE>remove</CODE> event by type: jqxFileUpload. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Lhbsdh1s/",
            "exampleDescription": "Bind to the remove event by type: jqxFileUpload.",
            "example": "<PRE><CODE>$('#jqxFileUpload').on('remove', function (event) {\r\n    var fileName = event.args.file;\r\n    // Your code here.\r\n});</CODE></PRE>"
        },
        {
            "name": "select",
            "description": "<P>This event is triggered when a file has been selected. </P>\n<H4>Code examples </H4>\n<P>Bind to the <CODE>select</CODE> event by type: jqxFileUpload. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/yefLatk3/",
            "exampleDescription": "Bind to the select event by type: jqxFileUpload.",
            "example": "<PRE><CODE>$('#jqxFileUpload').on('select', function (event) {\r\n    var args = event.args;\r\n    var fileName = args.file;\r\n    var fileSize = args.size; // Note: Internet Explorer 9 and earlier do not support getting the file size.\r\n    // Your code here.\r\n});</CODE></PRE>"
        },
        {
            "name": "uploadStart",
            "description": "<P>This event is triggered when a file upload operation has started. </P>\n<H4>Code examples </H4>\n<P>Bind to the <CODE>uploadStart</CODE> event by type: jqxFileUpload. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/d95so4k3/",
            "exampleDescription": "Bind to the uploadStart event by type: jqxFileUpload.",
            "example": "<PRE><CODE>$('#jqxFileUpload').on('uploadStart', function (event) {\r\n    var fileName = event.args.file;\r\n    // Your code here.\r\n}); </CODE></PRE>"
        },
        {
            "name": "uploadEnd",
            "description": "<P>This event is triggered when a file upload operation has ended. </P>\n<H4>Code examples </H4>\n<P>Bind to the <CODE>uploadEnd</CODE> event by type: jqxFileUpload. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/u2pzf3e6/",
            "exampleDescription": "Bind to the uploadEnd event by type: jqxFileUpload.",
            "example": "<PRE><CODE>$('#jqxFileUpload').on('uploadEnd', function (event) {\r\n    var args = event.args;\r\n    var fileName = args.file;\r\n    var serverResponce = args.response;\r\n    // Your code here.\r\n});</CODE></PRE>"
        }
    ],
    "methods": [
        {
            "name": "browse",
            "description": "<P>Browses for a file. </P><P>Due to browser restrictions, this method would not work on Internet Explorer 9 or earlier. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>browse</CODE> method. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload('browse');</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/qocqou3m/",
            "exampleDescription": "browse for a file",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;div>\n        &lt;p>Note: to be able to upload a file you would have to set the property uploadUrl to point to a file hosted on your server, which handles the upload process.&lt;/p>\n        &lt;JqxFileUpload ref=\"myFileUpload\" />\n        &lt;br />\n        &lt;JqxButton @click=\"onClick()\" :width=\"120\">Browse For a File&lt;/JqxButton>\n    &lt;/div>\n&lt;/template>\n\n&lt;script>\n    import JqxFileUpload from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxfileupload.vue';\n    import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n    export default {\n        components: {\n            JqxFileUpload,\n            JqxButton\n        },\n        methods: {\n            onClick: function () {\n                this.$refs.myFileUpload.browse();\n            }\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "cancelFile",
            "description": "<P>Cancels a selected file. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>cancelFile</CODE> method. </P>\n<PRE><CODE>// @param int. The expected parameter is the file index.\r\n                        \r\n$('#jqxFileUpload').jqxFileUpload('cancelFile', 3);</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/uxqbu3aL/",
            "exampleDescription": "cancel a file",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "fileIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;div>\n        &lt;p>Note: to be able to upload a file you would have to set the property uploadUrl to point to a file hosted on your server, which handles the upload process.&lt;/p>\n        &lt;JqxFileUpload ref=\"myFileUpload\" />\n        &lt;p>You should browse for a file and then click the button to cancel it:&lt;/p>\n        &lt;JqxButton @click=\"onClick()\" :width=\"120\">Cancel File&lt;/JqxButton>\n    &lt;/div>\n&lt;/template>\n\n&lt;script>\n    import JqxFileUpload from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxfileupload.vue';\n    import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n    export default {\n        components: {\n            JqxFileUpload,\n            JqxButton\n        },\n        methods: {\n            onClick: function() {\n                this.$refs.myFileUpload.cancelFile(0);\n            }    \n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "cancelAll",
            "description": "<P>Cancels all selected files. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>cancelAll</CODE> method. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload('cancelAll');</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/f91fLcLr/",
            "exampleDescription": "cancel all files",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;div>\n        &lt;p>Note: to be able to upload a file you would have to set the property uploadUrl to point to a file hosted on your server, which handles the upload process.&lt;/p>\n        &lt;JqxFileUpload ref=\"myFileUpload\" />\n        &lt;p>You should browse for a file/files and then click the button to cancel them:&lt;/p>\n        &lt;JqxButton @click=\"onClick()\" :width=\"120\">Cancel Files&lt;/JqxButton>\n    &lt;/div>\n&lt;/template>\n\n&lt;script>\n    import JqxFileUpload from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxfileupload.vue';\n    import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n    export default {\n        components: {\n            JqxFileUpload,\n            JqxButton\n        },\n        methods: {\n            onClick: function() {\n                this.$refs.myFileUpload.cancelAll();\n            }    \n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "destroy",
            "description": "<P>Destroys the jqxFileUpload. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload('destroy'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9m72b294/",
            "exampleDescription": "destroy the jqxFileUpload",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "render",
            "description": "<P>Renders the widget. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>render</CODE> method. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload('render');</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/2yLcxgau/",
            "exampleDescription": "render the jqxFileUpload",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "refresh",
            "description": "<P>Refreshes the widget. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>refresh</CODE> method. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload('refresh'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/166qn1mc/",
            "exampleDescription": "refresh the jqxFileUpload",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "uploadFile",
            "description": "<P>Uploads a selected file. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>uploadFile</CODE> method. </P>\n<PRE><CODE>// @param int. The expected parameter is the file index.\r\n                        \r\n$('#jqxFileUpload').jqxFileUpload('uploadFile', 1);</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/6q7h9xcj/",
            "exampleDescription": "upload a file",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "fileIndex",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;div>\n        &lt;p>Note: to be able to upload a file you would have to set the property uploadUrl to point to a file hosted on your server, which handles the upload process.&lt;/p>\n        &lt;JqxFileUpload ref=\"myFileUpload\" @uploadStart=\"onUploadStart($event)\" />\n        &lt;p>You should browse for a file and then click the button to upload it:&lt;/p>\n        &lt;JqxButton @click=\"onClick()\" :width=\"120\">Upload File&lt;/JqxButton>\n    &lt;/div>\n&lt;/template>\n&lt;script>\n    import JqxFileUpload from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxfileupload.vue';\n    import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n    export default {\n        components: {\n            JqxFileUpload,\n            JqxButton\n        },\n        methods: {\n            onClick: function () {\n                this.$refs.myFileUpload.uploadFile(0);\n            },\n            onUploadStart: function (event) {\n                alert('Uploading File...');\n            }\n        }\n    }\n&lt;/script>"
            }
        },
        {
            "name": "uploadAll",
            "description": "<P>Uploads all selected files. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>uploadAll</CODE> method. </P>\n<PRE><CODE>$('#jqxFileUpload').jqxFileUpload('uploadAll');</CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3u0rmp8w/",
            "exampleDescription": "upload all files",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n    &lt;div>\n        &lt;p>Note: to be able to upload a file you would have to set the property uploadUrl to point to a file hosted on your server, which handles the upload process.&lt;/p>\n        &lt;JqxFileUpload ref=\"myFileUpload\" @uploadStart=\"onUploadStart($event)\" />\n        &lt;p>You should browse for a file/files and then click the button to upload them:&lt;/p>\n        &lt;JqxButton @click=\"onClick()\" :width=\"120\">Upload Files&lt;/JqxButton>\n    &lt;/div>\n&lt;/template>\n&lt;script>\n    import JqxFileUpload from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxfileupload.vue';\n    import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n    export default {\n        components: {\n            JqxFileUpload,\n            JqxButton\n        },\n        methods: {\n            onClick: function () {\n                this.$refs.myFileUpload.uploadAll();\n            },\n            onUploadStart: function (event) {\n                alert('Uploading Files...');\n            }\n        }\n    }\n&lt;/script>"
            }
        }
    ]
}