{
    "widget": {
        "name": "jqxNotification",
        "description": "Displays an unobtrusive notification to the user. Multiple instances of the same notification can be shown at the same time.",
        "angular2": {
            "name": "jqxNotificationComponent",
            "selector": "jqxNotification"
        }
    },
    "dataTypes": [
        {
            "name": "NotificationPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "top-left", "top-right", "bottom-left", "bottom-right" ]
        },
        {
            "name": "NotificationTemplate",
            "ts_dataType": "enum",
            "enumOptions": [ "info", "warning", "success", "error", "mail", "time", "null" ]
        },
        {
            "name": "NotificationIcon",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "width",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Width",
                    "defaultValue": ""
                },
                {
                    "name": "height",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Height",
                    "defaultValue": ""
                },
                {
                    "name": "url",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Url",
                    "defaultValue": ""
                },
                {
                    "name": "padding",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Padding",
                    "defaultValue": ""
                }
            ]
        }
    ],
    "exampleExtraTemplate": "Sample Notification",
    "exampleInit": {
        "autoOpen": "true"
    },
    "properties": [
        {
            "name": "appendContainer",
            "defaultValue": "null",
            "description": "<P>If set, specifies the notification container. The value of appendContainer should be a string with the id of the container element preceeded by \"#\". </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>appendContainer</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ appendContainer: \"#container\" });</CODE></PRE>\n\r\n<P>Get the <CODE>appendContainer</CODE> property. </P>\n<PRE><CODE>var appendContainer = $('#jqxNotification').jqxNotification('appendContainer');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Lnd7P/",
            "exampleDescription": "appendContainer is set to \"#container\"",
            "dataType": "string",
            "exampleInit": {
                "appendContainer": "#container"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;div>\n    &lt;jqxButton :width=\"200\" @click=\"open()\">Open Notification&lt;/jqxButton>\n    &lt;JqxNotification ref=\"myNotification\" :appendContainer=\"'#container'\"> \n      Sample Notification \n    &lt;/JqxNotification>\n    &lt;div id=\"container\" style=\"width: 300px; height: 400px; margin-top: 15px; background-color: #F2F2F2;\n      border: 1px dashed #AAAAAA; overflow: auto;\">&lt;/div>\n  &lt;/div> \n&lt;/template> \n \n&lt;script> \n  import JqxNotification from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxnotification.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue'; \n \n  export default { \n    components: { \n      JqxNotification, \n      JqxButton \n    }, \n    methods: { \n      open: function () { \n        this.$refs.myNotification.open(); \n      } \n    } \n  } \n&lt;/script>"
            }
        },
        {
            "name": "autoOpen",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the notification will open automatically. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>autoOpen</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ autoOpen: true }); </CODE></PRE>\n\r\n<P>Get the <CODE>notificationOffset</CODE> property. </P>\n<PRE><CODE>var autoOpen = $('#jqxNotification').jqxNotification('autoOpen');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/fa83W/",
            "exampleDescription": "autoOpen is set to true",
            "dataType": "boolean"
        },
        {
            "name": "animationOpenDelay",
            "defaultValue": "400",
            "description": "<P>Sets or gets the duration of the notification animation at open. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>animationOpenDelay</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ animationOpenDelay: \"fast\" }); </CODE></PRE>\n\r\n<P>Get the <CODE>animationOpenDelay</CODE> property. </P>\n<PRE><CODE>var animationOpenDelay = $('#jqxNotification').jqxNotification('animationOpenDelay');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/A3gZA/",
            "exampleDescription": "animationOpenDelay is set to 600",
            "dataType": "number",
            "exampleInit": {
                "animationOpenDelay": "600"
            }
        },
        {
            "name": "animationCloseDelay",
            "defaultValue": "800",
            "description": "<P>Sets or gets the duration of the tooltip animation at close. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>animationCloseDelay</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ animationCloseDelay: 1000 }); </CODE></PRE>\n\r\n<P>Get the <CODE>animationCloseDelay</CODE> property. </P>\n<PRE><CODE>var animationCloseDelay = $('#jqxNotification').jqxNotification('animationCloseDelay');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/SBf88/",
            "exampleDescription": "animationCloseDelay is set to 1000",
            "dataType": "number",
            "exampleInit": {
                "animationCloseDelay": "1000"
            }
        },
        {
            "name": "autoClose",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether the notification will automatically close after duration equal to the autoCloseDelay property. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>autoClose</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ autoClose: false }); </CODE></PRE>\n\r\n<P>Get the <CODE>autoClose</CODE> property. </P>\n<PRE><CODE>var autoClose = $('#jqxNotification').jqxNotification('autoClose');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/sRY73/",
            "exampleDescription": "autoClose is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "autoClose": "false"
            }
        },
        {
            "name": "autoCloseDelay",
            "defaultValue": "3000",
            "description": "<P>Sets or gets the duration after which the notification automatically closes (works only if the autoClose property is set to true). </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>autoCloseDelay</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ autoCloseDelay: 1000 }); </CODE></PRE>\n\r\n<P>Get the <CODE>autoCloseDelay</CODE> property. </P>\n<PRE><CODE>var autoCloseDelay = $('#jqxNotification').jqxNotification('autoCloseDelay');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4UBck/",
            "exampleDescription": "autoCloseDelay is set to 5000",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "autoCloseDelay": "5000"
            }
        },
        {
            "name": "blink",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the notification blinks when opened. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>blink</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ blink: true }); </CODE></PRE>\n\r\n<P>Get the <CODE>blink</CODE> property. </P>\n<PRE><CODE>var blink = $('#jqxNotification').jqxNotification('blink');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Ffjfd/",
            "exampleDescription": "blink is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "blink": "true"
            }
        },
        {
            "name": "browserBoundsOffset",
            "defaultValue": "5",
            "description": "<P>Sets ot gets the notifications' offset from the window bounds. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>browserBoundsOffset</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ browserBoundsOffset: 10 }); </CODE></PRE>\n\r\n<P>Get the <CODE>browserBoundsOffset</CODE> property. </P>\n<PRE><CODE>var browserBoundsOffset = $('#jqxNotification').jqxNotification('browserBoundsOffset');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/GSG7q/",
            "exampleDescription": "browserBoundsOffset is set to 10",
            "dataType": "number",
            "exampleInit": {
                "browserBoundsOffset": "10"
            }
        },
        {
            "name": "closeOnClick",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether the notification will close if it is clicked. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>closeOnClick</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ closeOnClick: true }); </CODE></PRE>\n\r\n<P>Get the <CODE>closeOnClick</CODE> property. </P>\n<PRE><CODE>var closeOnClick = $('#jqxNotification').jqxNotification('closeOnClick');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/C8a3M/",
            "exampleDescription": "closeOnClick is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "closeOnClick": "false"
            }
        },
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the notification is disabled (it cannot be opened). </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ disabled: true }); </CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxNotification').jqxNotification('disabled');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/6T2zy/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "height",
            "defaultValue": "'auto'",
            "description": "<P>Sets ot gets the notification's height. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$(\"#jqxNotification\").jqxNotification({ height: 25 });</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxNotification').jqxNotification('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dG3Gx/",
            "exampleDescription": "height is set to \"100px\"",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "height": "200"
            }
        },
        {
            "name": "hoverOpacity",
            "defaultValue": "1",
            "description": "<P>Sets or gets the notification's opacity when it is hovered with the mouse. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>hoverOpacity</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ hoverOpacity: 10 }); </CODE></PRE>\n\r\n<P>Get the <CODE>hoverOpacity</CODE> property. </P>\n<PRE><CODE>var hoverOpacity = $('#jqxNotification').jqxNotification('hoverOpacity');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/B4PAE/",
            "exampleDescription": "hoverOpacity is set to 2",
            "dataType": "number",
            "exampleInit": {
                "hoverOpacity": "0.3"
            }
        },
        {
            "name": "icon",
            "defaultValue": "null",
            "description": "<P>Sets or gets an object which specifies a custom notification icon. The icon property is disregarded if template is set. </P>\n<B>object fields:</B>\n<PRE><CODE>width</CODE></PRE>\n<PRE><CODE>height</CODE></PRE>\n<PRE><CODE>url</CODE></PRE>\n<PRE><CODE>padding</CODE> - specifies the distance from the icon to the content.</PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>icon</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ icon: { width: 25, height: 25, url:\r\n                            '../../images/smiley.png', padding: 5} }); </CODE></PRE>\n\r\n<P>Get the <CODE>icon</CODE> property. </P>\n<PRE><CODE>var icon = $('#jqxNotification').jqxNotification('icon');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3JrUf/",
            "exampleDescription": "icon is set to a custom object",
            "dataType": "object",
            "ts_dataType": "NotificationIcon",
            "exampleInit": {
                "template": "null",
                "icon": "icon",
                "exampleData": "{\n          width: 25,\n          height: 25,\n          url: '../../images/smiley.png',\n          padding: 5\n        }"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;JqxNotification ref=\"myNotification\"\n    :autoOpen=\"true\" :template=\"null\" :icon=\"icon\">\n    Sample Notification\n  &lt;/JqxNotification>\n&lt;/template> \n \n&lt;script>\n  import JqxNotification from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxnotification.vue';\n \n  export default {\n    components: {\n      JqxNotification\n    },\n    data: function () {\n      return {\n        icon: {\n          width: 25,\n          height: 25,\n          url: '../../images/smiley.png',\n          padding: 5\n        }\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "notificationOffset",
            "defaultValue": "5",
            "description": "<P>Sets or gets the offset between notifications. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>notificationOffset</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ notificationOffset: 10 }); </CODE></PRE>\n\r\n<P>Get the <CODE>notificationOffset</CODE> property. </P>\n<PRE><CODE>var toggled = $('#jqxNotification').jqxNotification('notificationOffset');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/D2G43/",
            "exampleDescription": "notificationOffset is set to 10",
            "dataType": "number",
            "exampleInit": {
                "notificationOffset": "10"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template> \n  &lt;div> \n    &lt;JqxNotification ref=\"myNotification\" :autoOpen=\"true\" :notificationOffset=\"10\">Sample Notification&lt;/JqxNotification> \n    &lt;JqxNotification ref=\"myNotification\" :autoOpen=\"true\" :notificationOffset=\"10\">Sample Notification&lt;/JqxNotification>\n  &lt;/div> \n&lt;/template> \n \n&lt;script>\n  import JqxNotification from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxnotification.vue'; \n \n  export default {\n    components: {\n      JqxNotification\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "opacity",
            "defaultValue": "0.9",
            "description": "<P>Sets or gets the notification's opacity. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>opacity</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ opacity: 1 }); </CODE></PRE>\n\r\n<P>Get the <CODE>notificationOffset</CODE> property. </P>\n<PRE><CODE>var opacity = $('#jqxNotification').jqxNotification('opacity');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/M7aRd/",
            "exampleDescription": "opacity is set to 1",
            "dataType": "number",
            "exampleInit": {
                "opacity": "1"
            }
        },
        {
            "name": "position",
            "defaultValue": "'top-right'",
            "description": "<P>Sets the part of the browser window where the notifications will be positioned. The position property is disregarded if appendContainer is set. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'top-left'</CODE></PRE>\n<PRE><CODE>'top-right'</CODE></PRE>\n<PRE><CODE>'bottom-left'</CODE></PRE>\n<PRE><CODE>'bottom-right'</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>position</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ position: 'top-left' }); </CODE></PRE>\n\r\n<P>Get the <CODE>position</CODE> property. </P>\n<PRE><CODE>var position = $('#jqxNotification').jqxNotification('position');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/the9U/",
            "exampleDescription": "position is set to \"top-left\"",
            "dataType": "string",
            "ts_dataType": "enum:NotificationPosition",
            "exampleInit": {
                "position": "top-left"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts. </P>",
            "example": "<pre><CODE>$('#jqxNotification').jqxNotification({ rtl : true }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/T9HPA/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "showCloseButton",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether to show the notification's close button. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>showCloseButton</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ showCloseButton: false }); </CODE></PRE>\n\r\n<P>Get the <CODE>showCloseButton</CODE> property. </P>\n<PRE><CODE>var showCloseButton = $('#jqxNotification').jqxNotification('showCloseButton');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/R597D/",
            "exampleDescription": "showCloseButton is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showCloseButton": "false"
            }
        },
        {
            "name": "template",
            "defaultValue": "'info'",
            "description": "<P>Sets or gets the notification template. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'info'</CODE></PRE>\n<PRE><CODE>'warning'</CODE></PRE>\n<PRE><CODE>'success'</CODE></PRE>\n<PRE><CODE>'error'</CODE></PRE>\n<PRE><CODE>'mail'</CODE></PRE>\n<PRE><CODE>'time'</CODE></PRE>\n<PRE><CODE>null</CODE></PRE>\n\r\n<P>If template is set to null, the theme setting is applied to the notification. In that case, the notification icon can be set with the icon property. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>template</CODE> property. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification({ template: 'mail' }); </CODE></PRE>\n\r\n<P>Get the <CODE>template</CODE> property. </P>\n<PRE><CODE>var template = $('#jqxNotification').jqxNotification('template');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/5LmXw/",
            "exampleDescription": "template is set to 'success'",
            "dataType": "string",
            "ts_dataType": "enum:NotificationTemplate",
            "exampleInit": {
                "template": "success"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n                                <PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n &lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt; </CODE></PRE>\r\n                                </CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/n53BJ/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "width",
            "defaultValue": "'auto'",
            "description": "<P>Sets ot gets the notification's width. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$(\"#jqxNotification\").jqxNotification({ width: 100 });</CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxNotification').jqxNotification('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/gGzCb/",
            "exampleDescription": "width is set to \"250px\"",
            "dataType": "number",
            "ts_dataType": "string | number",
            "exampleInit": {
                "width": "200"
            }
        }
    ],
    "events": [
        {
            "name": "close",
            "description": "<P>This event is triggered when the notification is closed. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>close</CODE> event by type: jqxNotification. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/f6wHT/",
            "exampleDescription": "Bind to the close event by type: jqxNotification.",
            "example": "<PRE><CODE>$('#jqxNotification').on('close', function () { // Some code here. }); </CODE></PRE>"
        },
        {
            "name": "click",
            "description": "<P>This event is triggered when the notification is clicked. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>click</CODE> event by type: jqxNotification. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/cZ8AD/",
            "exampleDescription": "Bind to the click event by type: jqxNotification.",
            "example": "<PRE><CODE>$('#jqxNotification').on('click', function () { // Some code here. }); </CODE></PRE>"
        },
        {
            "name": "open",
            "description": "<P>This event is triggered when the notification is opened. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>open</CODE> event by type: jqxNotification. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Qy6we/",
            "exampleDescription": "Bind to the open event by type: jqxNotification.",
            "example": "<PRE><CODE>$('#jqxNotification').on('open', function () { // Some code here. }); </CODE></PRE>"
        }
    ],
    "methods": [
        {
            "name": "closeAll",
            "description": "<P>Closes all notification instances. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>closeAll</CODE> method. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification('closeAll'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/n8yD3/",
            "exampleDescription": "closes all notifications",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxNotification ref=\"myNotification\"\n             :autoOpen=\"true\">\n      Sample Notification\n    &lt;/JqxNotification>\n    &lt;JqxButton @click=\"open\">Open&lt;/JqxButton>\n    &lt;JqxButton @click=\"closeLast\">Close Last&lt;/JqxButton>\n    &lt;JqxButton @click=\"closeAll\">Close All&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxNotification from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxnotification.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxNotification,\n      JqxButton\n    },\n    methods: {\n      open: function () {\n        this.$refs.myNotification.open();\n      },\n      closeLast: function () {\n        this.$refs.myNotification.closeLast();\n      },\n      closeAll: function () {\n        this.$refs.myNotification.closeAll();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 15px;\n    margin-right: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "closeLast",
            "description": "<P>Closes the last notification instances. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>closeLast</CODE> method. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification('closeLast'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/wQbTE/",
            "exampleDescription": "closes the last notifications",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxNotification ref=\"myNotification\"\n             :autoOpen=\"true\">\n      Sample Notification\n    &lt;/JqxNotification>\n    &lt;JqxButton @click=\"open\">Open&lt;/JqxButton>\n    &lt;JqxButton @click=\"closeLast\">Close Last&lt;/JqxButton>\n    &lt;JqxButton @click=\"closeAll\">Close All&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxNotification from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxnotification.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxNotification,\n      JqxButton\n    },\n    methods: {\n      open: function () {\n        this.$refs.myNotification.open();\n      },\n      closeLast: function () {\n        this.$refs.myNotification.closeLast();\n      },\n      closeAll: function () {\n        this.$refs.myNotification.closeAll();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 15px;\n    margin-right: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "destroy",
            "description": "<P>Destroys the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification('destroy'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/X7asy/",
            "exampleDescription": "destroy the notification",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "open",
            "description": "<P>Opens the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>open</CODE> method. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification('open'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9uxyL/",
            "exampleDescription": "opens the notification",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxNotification ref=\"myNotification\"\n             :autoOpen=\"true\">\n      Sample Notification\n    &lt;/JqxNotification>\n    &lt;JqxButton @click=\"open\">Open&lt;/JqxButton>\n    &lt;JqxButton @click=\"closeLast\">Close Last&lt;/JqxButton>\n    &lt;JqxButton @click=\"closeAll\">Close All&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxNotification from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxnotification.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxNotification,\n      JqxButton\n    },\n    methods: {\n      open: function () {\n        this.$refs.myNotification.open();\n      },\n      closeLast: function () {\n        this.$refs.myNotification.closeLast();\n      },\n      closeAll: function () {\n        this.$refs.myNotification.closeAll();\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 15px;\n    margin-right: 20px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "refresh",
            "description": "<P>Refreshes the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>refresh</CODE> method. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification('refresh'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/6CF44/",
            "exampleDescription": "refresh the notification",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "render",
            "description": "<P>Renders the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>render</CODE> method. </P>\n<PRE><CODE>$('#jqxNotification').jqxNotification('render'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/EUUVh/",
            "exampleDescription": "renders the notification",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        }
    ]
}