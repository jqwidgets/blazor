<div tabIndex="1" style="float: left;">
    <JqxTree @ref="myTree" onComponentReady="onReady" width="250" height="350" source="source"></JqxTree>
</div>
<div style="font-family: Verdana; font-size: 12px; width: 400px; margin-left: 20px; float: left;">
    <ul>
        <li><b>Tab</b> - Like other widgets, the jqxTree widget receives focus by tabbing into it. Once focus is received, users will be able to use the keyboard to change the selection. A second tab will take the user out of the widget.</li>
        <li><b>Shift+Tab</b> - reverses the direction of the tab order. Once in the widget, a Shift+Tab will take the user to the previous focusable element in the tab order.</li>
        <li><b>Up and Down</b> arrow keys - move between visible items.</li>
        <li><b>Left Arrow</b> key - on an expanded item, collapses the item.</li>
        <li><b>Left Arrow</b> key - on a collapsed or end item moves focus to the item's parent item.</li>
        <li><b>Right Arrow</b> key - on a collapsed item expands the item.</li>
        <li><b>Right Arrow</b> key - on an expanded item, moves to the first child item, or does nothing on an end item.</li>
        <li><b>Home</b> key - moves to the top item in the tree view.</li>
        <li><b>End</b> key - moves to the last item in the tree view.</li>
    </ul>
</div>

@code {
    JqxTree myTree;

    Dictionary<string, object>[] source = new Dictionary<string, object>[]
    {
        new Dictionary<string, object>()
        {
            { "icon", "../../images/mailIcon.png" },
            { "label", "Mail" },
            { "expanded", "true" },
            {
                "items",
                new Dictionary<string, object>[]
                {
                    new Dictionary<string, object>()
                    {
                        { "icon", "../../images/calendarIcon.png" },
                        { "label", "Calendar" }
                    },
                    new Dictionary<string, object>()
                    {
                        { "icon", "../../images/contactsIcon.png" },
                        { "label", "Contacts" },
                        { "selected", "true" }
                    }
                }
            }
        },
        new Dictionary<string, object>()
        {
            { "icon", "../../images/folder.png" },
            { "label", "Inbox" },
            { "expanded", "true" },
            {
                "items",
                new Dictionary<string, object>[]
                {
                    new Dictionary<string, object>()
                    {
                        { "icon", "../../images/folder.png" },
                        { "label", "Admin" }
                    },
                    new Dictionary<string, object>()
                    {
                        { "icon", "../../images/folder.png" },
                        { "label", "Corporate" }
                    },
                    new Dictionary<string, object>()
                    {
                        { "icon", "../../images/folder.png" },
                        { "label", "Finance" }
                    },
                    new Dictionary<string, object>()
                    {
                        { "icon", "../../images/folder.png" },
                        { "label", "Other" }
                    }                    
                }
            }
        },
        new Dictionary<string, object>()
        {
            { "icon", "../../images/recycle.png" },
            { "label", "Deleted Items" }
        },
        new Dictionary<string, object>()
        {
            { "icon", "../../images/notesIcon.png" },
            { "label", "Notes" }
        },
        new Dictionary<string, object>()
        {
            { "icon", "../../images/settings.png" },
            { "label", "Settings" },
            { "iconsize", 14 }
        },
        new Dictionary<string, object>()
        {
            { "icon", "../../images/favorites.png" },
            { "label", "Favorites" }
        }
    };
    
    private void onReady()
    {
        myTree.focus();
    }
}
