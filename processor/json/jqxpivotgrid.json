{
    "widget": {
        "name": "jqxPivotGrid",
        "angular2": {
            "name": "jqxPivotGridComponent",
            "selector": "jqxPivotGrid",
            "function_call_ngOnChanges": "this.refresh();"
        }
    },
    "dataTypes": [
        {
            "name": "PivotGridItemsRenderer",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "pivotItem",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "PivotItem"
                }
            ]
        },
        {
            "name": "PivotGridCellsRenderer",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "pivotCell",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "optional": "true",
                    "displayName": "PivotCell"
                }
            ]
        },
        {
            "name": "PivotGridDesigner",
            "properties": [
                {
                    "name": "type",
                    "description": "Gets or sets the type of the pivot designer - pivotGrid or pivotChart.",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Type",
                    "defaultValue": "pivotGrid",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n  &lt;table>\n    &lt;tr>\n      &lt;td>\n        &lt;JqxPivotDesigner style=\"width: 250px; height: 400px;\"\n          ref=\"pivotDesigner\" :type=\"'pivotGrid'\">\n        &lt;/JqxPivotDesigner>\n      &lt;/td>\n      &lt;td>\n        &lt;JqxPivotGrid style=\"width: 550px; height: 400px;\"\n          ref=\"pivotGrid\"  :source=\"source\"  :treeStyleRows=\"false\"\n          :autoResize=\"false\" :multipleSelectionEnabled=\"true\">\n        &lt;/JqxPivotGrid>\n      &lt;/td>\n    &lt;/tr>\n  &lt;/table>\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    import JqxPivotDesigner from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotdesigner.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid,\n            JqxPivotDesigner\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                let data = new Array();\n                const firstNames =\n                    [\n                        'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'\n                    ];\n                const lastNames =\n                    [\n                        'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'\n                    ];\n                const productNames =\n                    [\n                        'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Cramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'\n                    ];\n                const priceValues =\n                    [\n                        '2.25', '1.5', '3.0', '3.3', '4.5', '3.6', '3.8', '2.5', '5.0', '1.75', '3.25', '4.0'\n                    ];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 'First Name' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname', align: 'left' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                text: 'Product name',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'Sum', align: 'left', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'center' }, cellsClassName: 'myItemStyle', cellsClassNameSelected: 'myItemStyleSelected' },\n                            { dataField: 'price', 'function': 'count', text: 'Count', className: 'myItemStyle', classNameSelected: 'myItemStyleSelected' }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            };\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotGridInstance = this.$refs.pivotGrid.getInstance();\n            this.$refs.pivotDesigner.target = pivotGridInstance;\n            this.$refs.pivotDesigner.refresh();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "target",
                    "description": "Gets or sets the instance of the widget component controlled by the pivot designer component.",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "optional": "false",
                    "displayName": "Target component",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n  &lt;table>\n    &lt;tr>\n      &lt;td>\n        &lt;JqxPivotDesigner style=\"width: 250px; height: 400px;\"\n          ref=\"pivotDesigner\" :type=\"'pivotGrid'\">\n        &lt;/JqxPivotDesigner>\n      &lt;/td>\n      &lt;td>\n        &lt;JqxPivotGrid style=\"width: 550px; height: 400px;\"\n          ref=\"pivotGrid\"  :source=\"source\"  :treeStyleRows=\"false\"\n          :autoResize=\"false\" :multipleSelectionEnabled=\"true\">\n        &lt;/JqxPivotGrid>\n      &lt;/td>\n    &lt;/tr>\n  &lt;/table>\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    import JqxPivotDesigner from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotdesigner.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid,\n            JqxPivotDesigner\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                let data = new Array();\n                const firstNames =\n                    [\n                        'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'\n                    ];\n                const lastNames =\n                    [\n                        'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'\n                    ];\n                const productNames =\n                    [\n                        'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Cramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'\n                    ];\n                const priceValues =\n                    [\n                        '2.25', '1.5', '3.0', '3.3', '4.5', '3.6', '3.8', '2.5', '5.0', '1.75', '3.25', '4.0'\n                    ];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 'First Name' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname', align: 'left' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                text: 'Product name',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'Sum', align: 'left', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'center' }, cellsClassName: 'myItemStyle', cellsClassNameSelected: 'myItemStyleSelected' },\n                            { dataField: 'price', 'function': 'count', text: 'Count', className: 'myItemStyle', classNameSelected: 'myItemStyleSelected' }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            };\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotGridInstance = this.$refs.pivotGrid.getInstance();\n            this.$refs.pivotDesigner.target = pivotGridInstance;\n            this.$refs.pivotDesigner.refresh();\n        }\n    }\n&lt;/script>"
                    }
                }
            ],
            "methods": [
                {
                    "name": "refresh",
                    "description": "Refreshes the content of the pivot designer component.",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n  &lt;table>\n    &lt;tr>\n      &lt;td>\n        &lt;JqxPivotDesigner style=\"width: 250px; height: 400px;\"\n          ref=\"pivotDesigner\" :type=\"'pivotGrid'\">\n        &lt;/JqxPivotDesigner>\n      &lt;/td>\n      &lt;td>\n        &lt;JqxPivotGrid style=\"width: 550px; height: 400px;\"\n          ref=\"pivotGrid\"  :source=\"source\"  :treeStyleRows=\"false\"\n          :autoResize=\"false\" :multipleSelectionEnabled=\"true\">\n        &lt;/JqxPivotGrid>\n      &lt;/td>\n    &lt;/tr>\n  &lt;/table>\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    import JqxPivotDesigner from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotdesigner.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid,\n            JqxPivotDesigner\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                let data = new Array();\n                const firstNames =\n                    [\n                        'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'\n                    ];\n                const lastNames =\n                    [\n                        'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'\n                    ];\n                const productNames =\n                    [\n                        'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Cramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'\n                    ];\n                const priceValues =\n                    [\n                        '2.25', '1.5', '3.0', '3.3', '4.5', '3.6', '3.8', '2.5', '5.0', '1.75', '3.25', '4.0'\n                    ];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 'First Name' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname', align: 'left' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                text: 'Product name',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'Sum', align: 'left', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'center' }, cellsClassName: 'myItemStyle', cellsClassNameSelected: 'myItemStyleSelected' },\n                            { dataField: 'price', 'function': 'count', text: 'Count', className: 'myItemStyle', classNameSelected: 'myItemStyleSelected' }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            };\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotGridInstance = this.$refs.pivotGrid.getInstance();\n            this.$refs.pivotDesigner.target = pivotGridInstance;\n            this.$refs.pivotDesigner.refresh();\n        }\n    }\n&lt;/script>"
                    }
                }
            ]
        },
        {
            "name": "PivotGridCell",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "pivotRow",
                    "optional": "false",
                    "description": "The row of the pivot cell.",
                    "dataType": "object",
                    "ts_dataType": "PivotGridItem",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "\n&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" :cellsRenderer=\"myCellsRenderer\" />\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        methods: {\n            myCellsRenderer: function (pivotCell) {\n\n                const colors = ['rgba(248, 105, 107, 255)', 'rgba(250,170,120,255)', 'rgba(255,230,130,255)', 'rgba(175,215,130,255)', 'rgba(100,190,120,255)'];\n                const selectedColors = ['rgba(228, 85, 87, 255)', 'rgba(230,150,100,255)', 'rgba(235,210,110,255)', 'rgba(155,195,110,255)', 'rgba(80,170,100,255)'];\n\n                const val = Math.min(pivotCell.value, 20);\n                let backgroundColor = pivotCell.isSelected ? selectedColors[Math.round(val / 5)] : colors[Math.round(val / 5)];\n\n                // Pivot Column\n                if (pivotCell.pivotColumn.text !== 'sum')\n                    backgroundColor = pivotCell.isSelected ? 'rgba(225, 225, 225, 255)' : 'rgba(255, 255, 255, 255)';\n\n                if (pivotCell.isSelected)\n                    backgroundColor\n\n                const cellText = pivotCell.value == 0 ? '' : pivotCell.formattedValue;\n\n                return '&lt;div style=\"background: ' + backgroundColor + '; width: calc(100%-8px); height: 100%; padding: 4px; margin: 0px;\">' + cellText + '&lt;/div>';\n            }\n        }\n    }\n&lt;/script>\n\n"
                    }
                },
                {
                    "name": "pivotColumn",
                    "optional": "false",
                    "description": "The column of the pivot cell.",
                    "dataType": "object",
                    "ts_dataType": "PivotGridItem",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "\n&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" :cellsRenderer=\"myCellsRenderer\" />\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        methods: {\n            myCellsRenderer: function (pivotCell) {\n\n                const colors = ['rgba(248, 105, 107, 255)', 'rgba(250,170,120,255)', 'rgba(255,230,130,255)', 'rgba(175,215,130,255)', 'rgba(100,190,120,255)'];\n                const selectedColors = ['rgba(228, 85, 87, 255)', 'rgba(230,150,100,255)', 'rgba(235,210,110,255)', 'rgba(155,195,110,255)', 'rgba(80,170,100,255)'];\n\n                const val = Math.min(pivotCell.value, 20);\n                let backgroundColor = pivotCell.isSelected ? selectedColors[Math.round(val / 5)] : colors[Math.round(val / 5)];\n\n                // Pivot Row\n                if (pivotCell.pivotRow.text !== 'Nancy')\n                    backgroundColor = pivotCell.isSelected ? 'rgba(225, 225, 225, 255)' : 'rgba(255, 255, 255, 255)';\n\n                if (pivotCell.isSelected)\n                    backgroundColor\n\n                const cellText = pivotCell.value == 0 ? '' : pivotCell.formattedValue;\n\n                return '&lt;div style=\"background: ' + backgroundColor + '; width: calc(100%-8px); height: 100%; padding: 4px; margin: 0px;\">' + cellText + '&lt;/div>';\n            }\n        }\n    }\n&lt;/script>\n\n"
                    }
                }
            ]
        },
        {
            "name": "PivotGridCellFormatting",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "prefix",
                    "description": "Optional text that appears at the start of the formatted string.",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Prefix",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {   // PREFIX\n                                dataField: 'price', 'function': 'sum', text: 'sum',\n                                formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "sufix",
                    "description": "Optional text that appears at the end of the formatted string.",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Sufix",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {   // SUFIX\n                                dataField: 'price', 'function': 'sum', text: 'sum',\n                                formatSettings: { sufix: '$', decimalPlaces: 2, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "decimalSeparator",
                    "description": "Separator for the decimal point in the cell's value.",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Decimal separator",
                    "defaultValue": ".",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {   // Decimal Separator\n                                dataField: 'price', 'function': 'sum', text: 'sum',\n                                formatSettings: { decimalSeparator: '...', decimalPlaces: 2, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "thousandsSeparator",
                    "description": "Separator for the thousands in the cell's value.",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "Thousands separator",
                    "defaultValue": ",",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['200000.25', '10000.5', '30000.0', '30000.3', '40000.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {   // Thousands  Separator\n                                dataField: 'price', 'function': 'sum', text: 'sum',\n                                formatSettings: { thousandsSeparator: '...', decimalPlaces: 2, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "decimalPlaces",
                    "description": "Number of decimal places for the cell's value.",
                    "dataType": "number",
                    "optional": "true",
                    "displayName": "Decimal places",
                    "defaultValue": "2",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {   // Decimal Places\n                                dataField: 'price', 'function': 'sum', text: 'sum',\n                                formatSettings: {  decimalPlaces: 4, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "negativeWithBrackets",
                    "description": "Determines if negative numbers will be displayed in brackets () or with a negative sign -  .",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Display negatives in brackets",
                    "defaultValue": "false",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['-2.25', '-1.5', '-3.0', '-3.3', '-4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {   // Negative With Brackets\n                                dataField: 'price', 'function': 'sum', text: 'sum',\n                                formatSettings: {  negativeWithBrackets: true, decimalPlaces: 2, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>"
                    }
                }
            ]
        },
        {
            "name": "PivotGridCells",
            "ts_dataType": "interface",
            "properties": [
            ],
            "methods": [
                {
                    "name": "hitTest",
                    "description": "Returns the pivot cell at the corresponding position if exists",
                    "exampleURL": "",
                    "returnDataType": "object",
                    "ts_returnDataType": "any",
                    "arguments": [
                        {
                            "name": "point",
                            "optional": "false",
                            "description": "The coordinate of the hit test point.",
                            "dataType": "object",
                            "ts_dataType": "PivotGridPoint"
                        }
                    ],
                    "customExample": {
                        "customCode": ""
                    }
                },
                {
                    "name": "clear",
                    "description": "Clears all pivot cells",
                    "ts_returnDataType": "void",
                    "arguments": [
                    ],
                    "customExample": {
                        "customCode": ""
                    }
                },
                {
                    "name": "setCellValue",
                    "description": "Sets the value of a pivot cell",
                    "ts_returnDataType": "void",
                    "arguments": [
                        {
                            "name": "pivotRow",
                            "optional": "false",
                            "description": "The row of the pivot cell.",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem"
                        },
                        {
                            "name": "pivotColumn",
                            "optional": "false",
                            "description": "The column of the pivot cell.",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem"
                        },
                        {
                            "name": "value",
                            "optional": "false",
                            "description": "The value of the pivot cell.",
                            "dataType": "object",
                            "ts_dataType": "any"
                        }
                    ],
                    "customExample": {
                        "customCode": ""
                    }
                },
                {
                    "name": "getCellValue",
                    "description": "Gets the value of a pivot cell",
                    "returnDataType": "object",
                    "ts_returnDataType": "any",
                    "arguments": [
                        {
                            "name": "pivotRow",
                            "optional": "false",
                            "description": "The row of the pivot cell.",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem"
                        },
                        {
                            "name": "pivotColumn",
                            "optional": "false",
                            "description": "The column of the pivot cell.",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem"
                        }
                    ],
                    "customExample": {
                        "customCode": "\n&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotGridInstance = this.$refs.myPivotGrid.getInstance();\n            const pivotRow = this.$refs.myPivotGrid.getPivotRows().items[0];\n            const pivotColumn = this.$refs.myPivotGrid.getPivotColumns().items[0].valueItems[0];\n            const cellValue = pivotGridInstance.getPivotCells().getCellValue(pivotRow, pivotColumn);\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "drillThroughCell",
                    "description": "Drills through a pivot cells and returns the respective source data records",
                    "returnDataType": "Array",
                    "ts_returnDataType": "Array<any>",
                    "arguments": [
                        {
                            "name": "pivotRow",
                            "optional": "false",
                            "description": "The row of the pivot cell.",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem"
                        },
                        {
                            "name": "pivotColumn",
                            "optional": "false",
                            "description": "The column of the pivot cell.",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem"
                        }
                    ],
                    "customExample": {
                        "customCode": "\n&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotGridInstance = this.$refs.myPivotGrid.getInstance();\n            const pivotRow = this.$refs.myPivotGrid.getPivotRows().items[0];\n            const pivotColumn = this.$refs.myPivotGrid.getPivotColumns().items[0].valueItems[0];\n\n            const drillThroughCell = pivotGridInstance.getPivotCells().drillThroughCell(pivotRow, pivotColumn);\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "selectCell",
                    "description": "Selects a pivot cell",
                    "ts_returnDataType": "void",
                    "arguments": [
                        {
                            "name": "pivotRow",
                            "optional": "false",
                            "description": "The row of the pivot cell.",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem"
                        },
                        {
                            "name": "pivotColumn",
                            "optional": "false",
                            "description": "The column of the pivot cell.",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem"
                        }
                    ],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotGridInstance = this.$refs.myPivotGrid.getInstance();\n            const pivotRow = this.$refs.myPivotGrid.getPivotRows().items[2];\n            const pivotColumn = this.$refs.myPivotGrid.getPivotColumns().items[0].valueItems[2];\n\n            // use the arrow keys to see that the 3rth row, 3rth sub column cell is selected\n            pivotGridInstance.getPivotCells().selectCell(pivotRow, pivotColumn);\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "unselectCell",
                    "description": "Unselects a pivot cell",
                    "ts_returnDataType": "void",
                    "arguments": [
                        {
                            "name": "pivotRow",
                            "optional": "false",
                            "description": "The row of the pivot cell.",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem"
                        },
                        {
                            "name": "pivotColumn",
                            "optional": "false",
                            "description": "The column of the pivot cell.",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem"
                        }
                    ],
                    "customExample": {
                        "customCode": ""
                    }
                },
                {
                    "name": "clearSelection",
                    "description": "Clears the selection of all selected pivot cells",
                    "ts_returnDataType": "void",
                    "arguments": [
                    ],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" @pivotcellclick=\"pivotcellclick\"/>\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        methods: {\n            pivotcellclick: function (event) {\n                const pivotInstance = this.$refs.myPivotGrid.getInstance();\n\n                pivotInstance.getPivotCells().clearSelection();\n            }\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "isCellSelected",
                    "description": "Checks if a pivot cell is selected",
                    "returnDataType": "boolean",
                    "ts_returnDataType": "boolean",
                    "arguments": [
                        {
                            "name": "pivotRow",
                            "optional": "false",
                            "description": "The row of the pivot cell.",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem"
                        },
                        {
                            "name": "pivotColumn",
                            "optional": "false",
                            "description": "The column of the pivot cell.",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem"
                        }
                    ],
                    "customExample": {
                        "customCode": "\n&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" />\n\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotGridInstance = this.$refs.myPivotGrid.getInstance();\n            const pivotRow = this.$refs.myPivotGrid.getPivotRows().items[2];\n            const pivotColumn = this.$refs.myPivotGrid.getPivotColumns().items[0].valueItems[2];\n\n            // false\n            let isCellSelected = pivotGridInstance.getPivotCells().isCellSelected(pivotRow, pivotColumn);\n            \n            pivotGridInstance.getPivotCells().selectCell(pivotRow, pivotColumn);\n            // true\n            isCellSelected = pivotGridInstance.getPivotCells().isCellSelected(pivotRow, pivotColumn);\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "getSelectedCellsCount",
                    "description": "Returns the number of selected cells",
                    "returnDataType": "number",
                    "ts_returnDataType": "number",
                    "arguments": [
                    ],
                    "customExample": {
                        "customCode": ""
                    }
                },
                {
                    "name": "getSelectedCells",
                    "description": "Returns an array of all selected cells",
                    "returnDataType": "Array",
                    "ts_returnDataType": "Array<PivotGridCell>",
                    "arguments": [
                    ],
                    "customExample": {
                        "customCode": "\n&lt;template>\n\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" />\n\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotGridInstance = this.$refs.myPivotGrid.getInstance();\n            const pivotRow = this.$refs.myPivotGrid.getPivotRows().items[2];\n            const pivotColumn = this.$refs.myPivotGrid.getPivotColumns().items[0].valueItems[2];\n\n            // use the arrow keys to see that the 3rth row, 3rth sub column cell is selected\n            pivotGridInstance.getPivotCells().selectCell(pivotRow, pivotColumn);\n\n            const selectedCells = pivotGridInstance.getPivotCells().getSelectedCells();\n        }     \n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "getNextCell",
                    "description": "Returns the cell left, right, above or below a specific pivot cell",
                    "returnDataType": "object",
                    "ts_returnDataType": "any",
                    "arguments": [
                        {
                            "name": "pivotCell",
                            "optional": "false",
                            "description": "The pivot cell",
                            "dataType": "object",
                            "ts_dataType": "PivotGridCell"
                        },
                        {
                            "name": "position",
                            "optional": "false",
                            "description": "Position relative to the cell: 'left', 'right', 'top', 'bottom'",
                            "dataType": "string"
                        }
                    ],
                    "customExample": {
                        "customCode": "\n&lt;template>\n\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" :cellsRenderer=\"cellsRenderer\" />\n\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        methods: {\n            cellsRenderer: function (pivotCell) {\n                const pivotGridInstance = this.$refs.myPivotGrid.getInstance();\n  \n                const nextCell = pivotGridInstance.getPivotCells().getNextCell(pivotCell);\n\n                return pivotCell.formattedValue;\n            }\n        }    \n    }\n&lt;/script>"
                    }
                }
            ]

        },
        {
            "name": "PivotGridColumns",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "resizable",
                    "optional": "false",
                    "description": "Gets or sets if the collection of pivot items is resizable.",
                    "dataType": "boolean",
                    "displayName": "resizable",
                    "defaultValue": "true",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            this.$refs.myPivotGrid.getPivotColumns().resizable = false;\n        }     \n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "sortable",
                    "optional": "false",
                    "description": "Gets or sets if the collection of pivot items is sortable.",
                    "dataType": "boolean",
                    "displayName": "sortable",
                    "defaultValue": "true",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            this.$refs.myPivotGrid.getPivotColumns().sortable = false;\n        }     \n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "showExpandCollapseButtons",
                    "optional": "false",
                    "description": "Gets or sets if expand/collapse buttons are visible.",
                    "dataType": "boolean",
                    "displayName": "showExpandCollapseButtons",
                    "defaultValue": "true",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" @pivotcellclick=\"pivotcellclick\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [ { dataField: 'lastname' }],\n                        columns: [{ dataField: 'firstname' },{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        methods: {\n            pivotcellclick: function (event) {\n                const pivotInstance = this.$refs.myPivotGrid.getInstance();\n                pivotInstance.getPivotColumns().showExpandCollapseButtons = false;\n                pivotInstance.refresh();\n            }\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "parentPivotGrid",
                    "optional": "false",
                    "description": "Returns a reference to the parent pivot grid instance.",
                    "dataType": "object",
                    "ts_dataType": "object",
                    "displayName": "Parent pivot grid",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const parentPivotGrid = this.$refs.myPivotGrid.getPivotColumns().parentPivotGrid;\n        }     \n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "items",
                    "optional": "false",
                    "description": "Returns an array of all child pivot items.",
                    "dataType": "Array",
                    "ts_dataType": "Array<PivotGridItem>",
                    "displayName": "items",
                    "defaultValue": "[]",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotColumn = this.$refs.myPivotGrid.getPivotColumns().items;\n        }     \n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "valueItems",
                    "optional": "false",
                    "description": "Returns an array of all child pivot value items.",
                    "dataType": "Array",
                    "ts_dataType": "Array<PivotGridItem>",
                    "displayName": "valueItems",
                    "defaultValue": "[]",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const valueItems = this.$refs.myPivotGrid.getPivotColumns().items[0].valueItems[2];\n        }     \n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "isHidden",
                    "optional": "false",
                    "description": "Returns true if the pivot items collection is hidden.",
                    "dataType": "boolean",
                    "displayName": "isHidden",
                    "defaultValue": "false",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const isHidden = this.$refs.myPivotGrid.getPivotColumns().isHidden;\n        }     \n    }\n&lt;/script>"
                    }
                }

            ],
            "methods": [
                {
                    "name": "show",
                    "description": "Makes the pivot items collection visible",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotColumns = this.$refs.myPivotGrid.getInstance().getPivotColumns();\n\n            pivotColumns.hide();\n            pivotColumns.refresh();\n            setTimeout(_ => {\n                pivotColumns.show();\n                pivotColumns.refresh();\n            }, 2000)\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "hide",
                    "description": "Hides the pivot items collection",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotColumns = this.$refs.myPivotGrid.getInstance().getPivotColumns();\n\n            pivotColumns.hide();\n            pivotColumns.refresh();\n            setTimeout(_ => {\n                pivotColumns.show();\n                pivotColumns.refresh();\n            }, 2000)\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "refresh",
                    "description": "Refreshes the content of the pivot items collection",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotColumns = this.$refs.myPivotGrid.getInstance().getPivotColumns();\n\n            pivotColumns.hide();\n            pivotColumns.refresh();\n            setTimeout(_ => {\n                pivotColumns.show();\n                pivotColumns.refresh();\n            }, 2000)\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "getHierarchyDepth",
                    "description": "Returns the depth of the collection",
                    "exampleURL": "",
                    "returnDataType": "number",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const hierarchyDepth = this.$refs.myPivotGrid.getPivotColumns().getHierarchyDepth();\n        }     \n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "autoResize",
                    "description": "Auto resizes the pivot items collection.  <br/> autoResizeMode: \"default\", \"fitAll\", \"fitItemContent\"",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [
                        {
                            "name": "autoResizeMode",
                            "dataType": "string",
                            "description": "",
                            "optional": "false"
                        }

                    ],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n        \n            pivotRows.autoResize('fitItemContent');\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "getSortItem",
                    "description": "Returns the sort item of the collection",
                    "exampleURL": "",
                    "returnDataType": "object",
                    "ts_returnDataType": "any",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" @sortchanged=\"sortchanged\" />\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        methods: {\n            sortchanged: function () {\n                const sortItem = this.$refs.myPivotGrid.getPivotColumns().getSortItem();\n            }\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "getSortOrder",
                    "description": "Returns the sort order of the collection",
                    "exampleURL": "",
                    "returnDataType": "object",
                    "ts_returnDataType": "any",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" @sortchanged=\"sortchanged\" />\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        methods: {\n            sortchanged: function () {\n                const sortOrder = this.$refs.myPivotGrid.getPivotColumns().getSortOrder();\n            }\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "sortBy",
                    "description": "Sorts the items collection",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [
                        {
                            "name": "pivotItem",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem",
                            "description": "",
                            "optional": "false"
                        },
                        {
                            "name": "order",
                            "dataType": "string",
                            "description": "Sort order of the collection - 'asc' or 'desc'",
                            "optional": "false"
                        }
                    ],
                    "customExample": {
                        "customCode": ""
                    }
                },
                {
                    "name": "removeSort",
                    "description": "Removes the sort order of the collection",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" @sortchanged=\"sortchanged\" />\n&lt;/template>\n\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        methods: {\n            sortchanged: function () {\n                setTimeout(_ => this.$refs.myPivotGrid.getPivotColumns().removeSort(), 2000);\n            }\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "selectItem",
                    "description": "Selects a pivot item",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [
                        {
                            "name": "pivotItem",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem",
                            "description": "",
                            "optional": "false"
                        }
                    ],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotColumns = this.$refs.myPivotGrid.getInstance().getPivotColumns();\n            pivotColumns.selectItem(pivotColumns.items[1]);\n            pivotColumns.refresh();\n            setTimeout(_ => {\n                pivotColumns.unselectItem(pivotColumns.items[1]);\n                pivotColumns.refresh();\n            }, 2000);\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "unselectItem",
                    "description": "Clears the selection of a pivot item",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [
                        {
                            "name": "pivotItem",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem",
                            "description": "",
                            "optional": "false"
                        }
                    ],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotColumns = this.$refs.myPivotGrid.getInstance().getPivotColumns();\n            pivotColumns.selectItem(pivotColumns.items[1]);\n            pivotColumns.refresh();\n            setTimeout(_ => {\n                pivotColumns.unselectItem(pivotColumns.items[1]);\n                pivotColumns.refresh();\n            }, 2000);\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "clearSelection",
                    "description": "Clears the selection of all items in the collection",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [
                    ],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotColumns = this.$refs.myPivotGrid.getInstance().getPivotColumns();\n\n            pivotColumns.selectItem(pivotColumns.items[1])\n            pivotColumns.refresh();\n            setTimeout(_ => {\n                pivotColumns.clearSelection();\n                pivotColumns.refresh();\n            }, 2000);\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "getSelectedItems",
                    "description": "Returns all selected items in an array",
                    "exampleURL": "",
                    "returnDataType": "Array",
                    "ts_returnDataType": "Array<any>",
                    "arguments": [
                    ],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;div>\n        &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                      :source=\"source\" :autoResize=\"true\" />\n        &lt;br />\n        &lt;p>Select several columns(CTRL + mousedown) and then click the button.&lt;/p>\n        &lt;button @click=\"getSelectedItems()\">Get Selected Items&lt;/button>\n        &lt;p id=\"panel\">&lt;/p>\n    &lt;/div>\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        methods: {\n            getSelectedItems: function () {\n                const items = this.$refs.myPivotGrid.getPivotColumns().getSelectedItems();\n                document.querySelector('#panel').innerHTML = items;\n            }\n        }\n    }\n&lt;/script>"
                    }
                }
            ]
        },
        {
            "name": "PivotGridField",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "dataField",
                    "optional": "false",
                    "description": "The dataField in the data source used for this pivot field.",
                    "dataType": "string",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n     &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n\n    }\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n&lt;/style>"
                    }
                },
                {
                    "name": "text",
                    "description": "The text which will appear in the pivot designer when using this field.",
                    "dataType": "string",
                    "optional": "true",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n     &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n\n    }\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n&lt;/style>"
                    }
                },
                {
                    "name": "align",
                    "description": "Text alignment when the value of this field is displayed on the pivot rows or pivot columns.(\"left\", \"center\", \"right\")",
                    "optional": "true",
                    "dataType": "string",
                    "enumOptions": [ "left", "center", "right" ],
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n     &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n\n    }\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n&lt;/style>"
                    }
                },
                {
                    "name": "className",
                    "description": "Name of style to use when displaying this field on the pivot rows or columns.",
                    "dataType": "string",
                    "optional": "true",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n     &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n\n    }\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n&lt;/style>"
                    }
                },
                {
                    "name": "classNameSelected",
                    "description": "Name of style to use when displaying this field on the pivot rows or columns and column or row is selected.",
                    "dataType": "string",
                    "optional": "true",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n     &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n\n    }\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n&lt;/style>"
                    }
                }
            ]
        },
        {
            "name": "PivotGridFilterField",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "dataField",
                    "description": "The dataField in the data source used for this pivot filter field.",
                    "dataType": "string",
                    "optional": "false",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n     &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        // Pivot Filter Field\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                text: 'New Text',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "text",
                    "description": "The text which will appear in the pivot designer when using this field.",
                    "dataType": "string",
                    "optional": "true",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n     &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        // Pivot Filter Field\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                text: 'New Text',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "filterFunction",
                    "description": "Implementation of the filtering function used to skip/filter records from the data source. The function should return true if the record should be filtered, otherwise false.",
                    "dataType": "function",
                    "ts_dataType": "(value: any) => boolean",
                    "optional": "false",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n     &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        // Pivot Filter Field\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                text: 'New Text',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>"
                    }
                }
            ]
        },
        {
            "name": "PivotGridItem",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "isExpanded",
                    "optional": "false",
                    "description": "Returns true if the pivot item is expanded.",
                    "dataType": "boolean",
                    "displayName": "isExpanded",
                    "defaultValue": "false",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const rowItem = this.$refs.myPivotGrid.getInstance().getPivotRows().items[2];\n            const columnItem = this.$refs.myPivotGrid.getInstance().getPivotColumns().items[2];\n\n            const isExpanded = rowItem.isExpanded;\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "isHidden",
                    "optional": "false",
                    "description": "Returns true if the pivot item is hidden.",
                    "dataType": "boolean",
                    "displayName": "isHidden",
                    "defaultValue": "false",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const rowItem = this.$refs.myPivotGrid.getInstance().getPivotRows().items[2];\n            const columnItem = this.$refs.myPivotGrid.getInstance().getPivotColumns().items[2];\n\n            const isHidden = rowItem.isHidden;\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "isSelected",
                    "optional": "false",
                    "description": "Returns true if the pivot item is hidden.",
                    "dataType": "boolean",
                    "displayName": "isSelected",
                    "defaultValue": "false",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const rowItem = this.$refs.myPivotGrid.getInstance().getPivotRows().items[2];\n            const columnItem = this.$refs.myPivotGrid.getInstance().getPivotColumns().items[2];\n\n            const isSelected = rowItem.isSelected;\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "parentItem",
                    "optional": "false",
                    "description": "Returns a reference to the parent item.",
                    "dataType": "object",
                    "ts_dataType": "PivotGridItem",
                    "displayName": "Parent item",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const rowItem = this.$refs.myPivotGrid.getInstance().getPivotRows().items[2];\n            const columnItem = this.$refs.myPivotGrid.getInstance().getPivotColumns().items[2];\n\n            const parentItem = rowItem.parentItem;\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "hierarchy",
                    "optional": "false",
                    "description": "Returns a reference to the parent rows or columns hierarchy.",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "displayName": "Parent item",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const rowItem = this.$refs.myPivotGrid.getInstance().getPivotRows().items[2];\n            const columnItem = this.$refs.myPivotGrid.getInstance().getPivotColumns().items[2];\n\n            const hierarchy = rowItem.hierarchy;\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "parentPivotGrid",
                    "optional": "false",
                    "description": "Returns a reference to the parent pivot grid instance.",
                    "dataType": "object",
                    "ts_dataType": "object",
                    "displayName": "Parent pivot grid",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const rowItem = this.$refs.myPivotGrid.getInstance().getPivotRows().items[2];\n            const columnItem = this.$refs.myPivotGrid.getInstance().getPivotColumns().items[2];\n\n            const parentPivotGrid = rowItem.parentPivotGrid;\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "items",
                    "optional": "false",
                    "description": "Returns an array of all child pivot items.",
                    "dataType": "Array",
                    "ts_dataType": "Array<PivotGridItem>",
                    "displayName": "items",
                    "defaultValue": "[]",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const rowItem = this.$refs.myPivotGrid.getInstance().getPivotRows().items[2];\n            const columnItem = this.$refs.myPivotGrid.getInstance().getPivotColumns().items[2];\n\n            const items = rowItem.items;\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "valueItems",
                    "optional": "false",
                    "description": "Returns an array of all child pivot value items.",
                    "dataType": "Array",
                    "ts_dataType": "Array<PivotGridItem>",
                    "displayName": "valueItems",
                    "defaultValue": "[]",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const rowItem = this.$refs.myPivotGrid.getInstance().getPivotRows().items[2];\n            const columnItem = this.$refs.myPivotGrid.getInstance().getPivotColumns().items[2];\n\n            const valueItems = columnItem .valueItems;\n        }\n    }\n&lt;/script>"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getWidth",
                    "description": "Gets the width of the pivot item",
                    "exampleURL": "",
                    "returnDataType": "number",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const rowItem = this.$refs.myPivotGrid.getInstance().getPivotRows().items[2];\n            const columnItem = this.$refs.myPivotGrid.getInstance().getPivotColumns().items[2];\n\n            const width = rowItem.getWidth();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "getDisplayWidth",
                    "description": "Gets the displayed width of the pivot item",
                    "exampleURL": "",
                    "returnDataType": "number",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const rowItem = this.$refs.myPivotGrid.getInstance().getPivotRows().items[2];\n            const columnItem = this.$refs.myPivotGrid.getInstance().getPivotColumns().items[2];\n\n            const displayWidth = rowItem.getDisplayWidth();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "autoResize",
                    "description": "Auto resizes the pivot item",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const rowItem = this.$refs.myPivotGrid.getInstance().getPivotRows().items[2];\n            const columnItem = this.$refs.myPivotGrid.getInstance().getPivotColumns().items[2];\n\n            rowItem.autoResize();\n        }\n    }\n&lt;/script>"
                    }
                },

                {
                    "name": "getHeight",
                    "description": "Gets the height of the pivot item",
                    "exampleURL": "",
                    "returnDataType": "number",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const rowItem = this.$refs.myPivotGrid.getInstance().getPivotRows().items[2];\n            const columnItem = this.$refs.myPivotGrid.getInstance().getPivotColumns().items[2];\n\n            const height = rowItem.getHeight();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "getDisplayHeight",
                    "description": "Gets the displayed height of the pivot item",
                    "exampleURL": "",
                    "returnDataType": "number",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const rowItem = this.$refs.myPivotGrid.getInstance().getPivotRows().items[2];\n            const columnItem = this.$refs.myPivotGrid.getInstance().getPivotColumns().items[2];\n\n            const displayHeight = rowItem.getDisplayHeight();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "setHeight",
                    "description": "Sets the height of the pivot item",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [
                        {
                            "name": "height",
                            "dataType": "number",
                            "description": "",
                            "optional": "false"
                        }
                    ],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotInstance = this.$refs.myPivotGrid.getInstance();\n            const rowItem = pivotInstance.getPivotRows().items[2];\n            const columnItem = pivotInstance.getPivotColumns().items[0];\n            columnItem.setHeight(20);\n            pivotInstance.getPivotColumns().refresh();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "expand",
                    "description": "Expands the pivot item so all sub-items will be visible",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotInstance = this.$refs.myPivotGrid.getInstance();\n            const rowItem = pivotInstance.getPivotRows().items[0];\n            const columnItem = pivotInstance.getPivotColumns().items[2];\n\n            rowItem.expand();\n            pivotInstance.getPivotRows().refresh();\n\n            setTimeout(_ => {\n                rowItem.collapse();\n                pivotInstance.getPivotRows().refresh();\n            }, 2000);\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "collapse",
                    "description": "Collapses the pivot item so all sub-items will be invisible",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotInstance = this.$refs.myPivotGrid.getInstance();\n            const rowItem = pivotInstance.getPivotRows().items[0];\n            const columnItem = pivotInstance.getPivotColumns().items[2];\n\n            rowItem.expand();\n            pivotInstance.getPivotRows().refresh();\n\n            setTimeout(_ => {\n                rowItem.collapse();\n                pivotInstance.getPivotRows().refresh();\n            }, 2000);\n        }\n    }\n&lt;/script>"
                    }
                }
            ]
        },
        {
            "name": "PivotGridRows",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "resizable",
                    "optional": "false",
                    "description": "Gets or sets if the collection of pivot items is resizable.",
                    "dataType": "boolean",
                    "displayName": "resizable",
                    "defaultValue": "true",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n\n            const isResizable = pivotRows.resizable;\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "sortable",
                    "optional": "false",
                    "description": "Gets or sets if the collection of pivot items is sortable.",
                    "dataType": "boolean",
                    "displayName": "sortable",
                    "defaultValue": "true",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n\n            const isSortable= pivotRows.sortable;\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "showExpandCollapseButtons",
                    "optional": "false",
                    "description": "Gets or sets if expand/collapse buttons are visible.",
                    "dataType": "boolean",
                    "displayName": "showExpandCollapseButtons",
                    "defaultValue": "true",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                  :source=\"source\" :autoResize=\"true\" @pivotcellclick=\"pivotcellclick\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        methods: {\n            pivotcellclick: function (event) {\n                const pivotInstance = this.$refs.myPivotGrid.getInstance();\n                pivotInstance.getPivotRows().showExpandCollapseButtons = false;\n                pivotInstance.refresh();\n            }\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "parentPivotGrid",
                    "optional": "false",
                    "description": "Returns a reference to the parent pivot grid instance.",
                    "dataType": "object",
                    "ts_dataType": "object",
                    "displayName": "Parent pivot grid",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n\n            const parentPivotGrid= pivotRows.parentPivotGrid;\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "items",
                    "optional": "false",
                    "description": "Returns an array of all child pivot items.",
                    "dataType": "Array",
                    "ts_dataType": "Array<PivotGridItem>",
                    "displayName": "items",
                    "defaultValue": "[]",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n\n            const items = pivotRows.items;\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "valueItems",
                    "optional": "false",
                    "description": "Returns an array of all child pivot value items.",
                    "dataType": "Array",
                    "ts_dataType": "Array<PivotGridItem>",
                    "displayName": "valueItems",
                    "defaultValue": "[]",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n\n            const valueItems = pivotRows.valueItems;\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "isHidden",
                    "description": "Returns true if the pivot items collection is hidden.",
                    "dataType": "boolean",
                    "displayName": "isHidden",
                    "defaultValue": "false",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n\n            const isHidden= pivotRows.isHidden;\n        }\n    }\n&lt;/script>"
                    }
                }

            ],
            "methods": [
                {
                    "name": "show",
                    "description": "Makes the pivot items collection visible",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n        \n            pivotRows.hide(); \n            pivotRows.refresh();\n\n            setTimeout(_ => {\n                pivotRows.show();\n                pivotRows.refresh();\n            }, 2000)\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "hide",
                    "description": "Hides the pivot items collection",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n        \n            pivotRows.hide(); \n            pivotRows.refresh();\n\n            setTimeout(_ => {\n                pivotRows.show();\n                pivotRows.refresh();\n            }, 2000)\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "refresh",
                    "description": "Refreshes the content of the pivot items collection",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n        \n            pivotRows.hide(); \n            pivotRows.refresh();\n\n            setTimeout(_ => {\n                pivotRows.show();\n                pivotRows.refresh();\n            }, 2000)\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "getHierarchyDepth",
                    "description": "Returns the depth of the collection",
                    "exampleURL": "",
                    "returnDataType": "number",
                    "ts_returnDataType": "number",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n        \n            const hierarchyDepth = pivotRows.getHierarchyDepth();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "autoResize",
                    "description": "Auto resizes the pivot items collection. <br/> autoResizeMode: \"default\", \"fitAll\", \"fitItemContent\"",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [
                        {
                            "name": "autoResizeMode",
                            "dataType": "string",
                            "description": "",
                            "optional": "false"
                        }
                    ],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n\n            pivotRows.autoResize('fitItemContent');\n        }\n    }\n&lt;/script>"
                    }
                },

                {
                    "name": "getSortItem",
                    "description": "Returns the sort item of the collection",
                    "exampleURL": "",
                    "returnDataType": "object",
                    "ts_returnDataType": "any",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" @sortchanged=\"sortchanged\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        methods: {\n            sortchanged: function () {\n                const sortItem = this.$refs.myPivotGrid.getPivotRows().getSortItem();\n            }\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "getSortOrder",
                    "description": "Returns the sort order of the collection",
                    "exampleURL": "",
                    "returnDataType": "object",
                    "ts_returnDataType": "any",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" @sortchanged=\"sortchanged\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        methods: {\n            sortchanged: function () {\n                const sortItem = this.$refs.myPivotGrid.getPivotRows().getSortOrder();\n            }\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "sortBy",
                    "description": "Sorts the items collection",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [
                        {
                            "name": "pivotItem",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem",
                            "description": "",
                            "optional": "false"
                        },
                        {
                            "name": "sortOrder",
                            "dataType": "string",
                            "description": "Sort order of the collection - 'asc' or 'desc'",
                            "optional": "false"
                        }
                    ],
                    "customExample": {
                        "customCode": ""
                    }
                },
                {
                    "name": "removeSort",
                    "description": "Removes the sort order of the collection",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" @sortchanged=\"sortchanged\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        methods: {\n            sortchanged: function () {\n                setTimeout(_ => this.$refs.myPivotGrid.getPivotRows().removeSort(), 2000);\n            }\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "selectItem",
                    "description": "Selects a pivot item",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [
                        {
                            "name": "pivotItem",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem",
                            "description": "",
                            "optional": "false"
                        }
                    ],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n            \n            pivotRows.selectItem(pivotRows.items[1])\n            pivotRows.refresh();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "unselectItem",
                    "description": "Clears the selection of a pivot item",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [
                        {
                            "name": "pivotItem",
                            "dataType": "object",
                            "ts_dataType": "PivotGridItem",
                            "description": "",
                            "optional": "false"
                        }
                    ],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n\n            pivotRows.selectItem(pivotRows.items[1])\n            pivotRows.refresh();\n\n            setTimeout(_ => {\n                pivotRows.unselectItem(pivotRows.items[1])\n                pivotRows.refresh();\n            }, 2000)\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "clearSelection",
                    "description": "Clears the selection of all items in the collection",
                    "exampleURL": "",
                    "ts_returnDataType": "void",
                    "arguments": [
                    ],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        mounted: function () {\n            const pivotRows = this.$refs.myPivotGrid.getInstance().getPivotRows();\n\n            pivotRows.selectItem(pivotRows.items[1])\n            pivotRows.refresh();\n\n            setTimeout(_ => {\n                pivotRows.clearSelection();\n                pivotRows.refresh();\n            }, 2000)\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "getSelectedItems",
                    "description": "Returns all selected items in an array",
                    "exampleURL": "",
                    "returnDataType": "Array",
                    "ts_returnDataType": "Array<any>",
                    "arguments": [
                    ],
                    "customExample": {
                        "customCode": "&lt;template>\n    &lt;div>\n        &lt;JqxPivotGrid ref=\"myPivotGrid\"\n                      :source=\"source\" :autoResize=\"true\" />\n        &lt;br />\n        &lt;p>Select several rows(CTRL + mousedown) and then click the button.&lt;/p>\n        &lt;button @click=\"getSelectedItems()\">Get Selected Items&lt;/button>\n        &lt;p id=\"panel\">&lt;/p>\n    &lt;/div>\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        },\n        methods: {\n            getSelectedItems: function () {\n                const items = this.$refs.myPivotGrid.getPivotRows().getSelectedItems();\n                document.querySelector('#panel').innerHTML = items;\n            }\n        }\n    }\n&lt;/script>"
                    }
                }
            ]
        },
        {
            "name": "PivotGridSettings",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "pivotValuesOnRows",
                    "description": "Determines whether the pivot values will be displayed on rows or columns.",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Pivot Values On Rows",
                    "defaultValue": "false",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        // Pivot Grid Values On Rows\n                        pivotValuesOnRows: false,\n                        // Pivot Grid Rows\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        // Pivot Grid Columns\n                        columns: [{ dataField: 'productname' }],\n                        // Pivot Grid Filters\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        // Pivot Grid Values\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "rows",
                    "ts_dataType": "Array<PivotGridField>",
                    "description": "A list of data fields which will be used to build the pivot rows.",
                    "dataType": "boolean",
                    "optional": "false",
                    "displayName": "Pivot Rows",
                    "defaultValue": "[]",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        // Pivot Grid Values On Rows\n                        pivotValuesOnRows: false,\n                        // Pivot Grid Rows\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        // Pivot Grid Columns\n                        columns: [{ dataField: 'productname' }],\n                        // Pivot Grid Filters\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        // Pivot Grid Values\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "columns",
                    "ts_dataType": "Array<PivotGridField>",
                    "description": "A list of data fields which will be used to build the pivot columns.",
                    "dataType": "boolean",
                    "optional": "false",
                    "displayName": "Pivot Columns",
                    "defaultValue": "[]",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        // Pivot Grid Values On Rows\n                        pivotValuesOnRows: false,\n                        // Pivot Grid Rows\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        // Pivot Grid Columns\n                        columns: [{ dataField: 'productname' }],\n                        // Pivot Grid Filters\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        // Pivot Grid Values\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "values",
                    "ts_dataType": "Array<PivotGridValueField>",
                    "description": "A list of data fields which will be used to build the pivot values.",
                    "dataType": "boolean",
                    "optional": "false",
                    "displayName": "Pivot Values",
                    "defaultValue": "[]",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        // Pivot Grid Values On Rows\n                        pivotValuesOnRows: false,\n                        // Pivot Grid Rows\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        // Pivot Grid Columns\n                        columns: [{ dataField: 'productname' }],\n                        // Pivot Grid Filters\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        // Pivot Grid Values\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "filters",
                    "ts_dataType": "Array<PivotGridFilterField>",
                    "description": "A list of filters to apply on the source records while building the pivot table.",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Pivot Filters",
                    "defaultValue": "[]",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        // Pivot Grid Values On Rows\n                        pivotValuesOnRows: false,\n                        // Pivot Grid Rows\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        // Pivot Grid Columns\n                        columns: [{ dataField: 'productname' }],\n                        // Pivot Grid Filters\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        // Pivot Grid Values\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>"
                    }
                },
                {
                    "name": "theme",
                    "defaultValue": "''",
                    "description": "<P>Sets the widget's theme. Include the theme's CSS file after jqx.base.css.",
                    "example": "",
                    "exampleDescription": "theme is set to 'material'",
                    "dataType": "string",
                    "exampleInit": {
                        "theme": "material"
                    }
                }
            ]
        },
        {
            "name": "PivotGridValueField",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "dataField",
                    "optional": "false",
                    "description": "The dataField in the data source used for this pivot field.",
                    "dataType": "string",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n&lt;/style>\ntext\tString\tnull\nalign\tString\tnull\nclassName\tString\tnull\nclassNameSelected\tString\tnull\nName of style to use when displaying this field on the pivot rows or columns and column or row is selected.\n&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {\n                                dataField: 'price', 'function': 'sum', text: 'sum', align: 'right',\n                                className: 'red', classNameSelected: 'blue',\n                                cellsClassName: 'green', cellsClassNameSelected: 'yellow',\n                                formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            { dataField: 'quantity', text: 'variance', 'function': 'var', formatSettings: { decimalPlaces: 2 } }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n\n    .green {\n        color: white;\n        background-color: green;\n    }\n\n    .yellow {\n        color: white;\n        background-color: yellow;\n    }\n&lt;/style>"
                    }
                },
                {
                    "name": "function",
                    "optional": "false",
                    "dataType": "string|function",
                    "ts_dataType": "any",
                    "description": "The data aggregation function to use when calculating the cells values. You can either use the name of one of the built in functions like 'sum', 'count', 'min', 'max', 'product', 'average' or provide the implementation of your own function.</p>",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n&lt;/style>\ntext\tString\tnull\nalign\tString\tnull\nclassName\tString\tnull\nclassNameSelected\tString\tnull\nName of style to use when displaying this field on the pivot rows or columns and column or row is selected.\n&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {\n                                dataField: 'price', 'function': 'sum', text: 'sum', align: 'right',\n                                className: 'red', classNameSelected: 'blue',\n                                cellsClassName: 'green', cellsClassNameSelected: 'yellow',\n                                formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            { dataField: 'quantity', text: 'variance', 'function': 'var', formatSettings: { decimalPlaces: 2 } }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n\n    .green {\n        color: white;\n        background-color: green;\n    }\n\n    .yellow {\n        color: white;\n        background-color: yellow;\n    }\n&lt;/style>"
                    }
                },
                {
                    "name": "text",
                    "description": "The text which will appear in the pivot designer when using this field.",
                    "dataType": "string",
                    "optional": "true",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n&lt;/style>\ntext\tString\tnull\nalign\tString\tnull\nclassName\tString\tnull\nclassNameSelected\tString\tnull\nName of style to use when displaying this field on the pivot rows or columns and column or row is selected.\n&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {\n                                dataField: 'price', 'function': 'sum', text: 'sum', align: 'right',\n                                className: 'red', classNameSelected: 'blue',\n                                cellsClassName: 'green', cellsClassNameSelected: 'yellow',\n                                formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            { dataField: 'quantity', text: 'variance', 'function': 'var', formatSettings: { decimalPlaces: 2 } }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n\n    .green {\n        color: white;\n        background-color: green;\n    }\n\n    .yellow {\n        color: white;\n        background-color: yellow;\n    }\n&lt;/style>"
                    }
                },
                {
                    "name": "align",
                    "description": "Text alignment when the value of this field is displayed on the pivot rows or pivot columns.",
                    "optional": "true",
                    "dataType": "string",
                    "enumOptions": [ "left", "center", "right" ],
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n&lt;/style>\ntext\tString\tnull\nalign\tString\tnull\nclassName\tString\tnull\nclassNameSelected\tString\tnull\nName of style to use when displaying this field on the pivot rows or columns and column or row is selected.\n&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {\n                                dataField: 'price', 'function': 'sum', text: 'sum', align: 'right',\n                                className: 'red', classNameSelected: 'blue',\n                                cellsClassName: 'green', cellsClassNameSelected: 'yellow',\n                                formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            { dataField: 'quantity', text: 'variance', 'function': 'var', formatSettings: { decimalPlaces: 2 } }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n\n    .green {\n        color: white;\n        background-color: green;\n    }\n\n    .yellow {\n        color: white;\n        background-color: yellow;\n    }\n&lt;/style>"
                    }
                },
                {
                    "name": "className",
                    "description": "Name of style to use when displaying this field on the pivot rows or columns.",
                    "dataType": "string",
                    "optional": "true",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n&lt;/style>\ntext\tString\tnull\nalign\tString\tnull\nclassName\tString\tnull\nclassNameSelected\tString\tnull\nName of style to use when displaying this field on the pivot rows or columns and column or row is selected.\n&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {\n                                dataField: 'price', 'function': 'sum', text: 'sum', align: 'right',\n                                className: 'red', classNameSelected: 'blue',\n                                cellsClassName: 'green', cellsClassNameSelected: 'yellow',\n                                formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            { dataField: 'quantity', text: 'variance', 'function': 'var', formatSettings: { decimalPlaces: 2 } }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n\n    .green {\n        color: white;\n        background-color: green;\n    }\n\n    .yellow {\n        color: white;\n        background-color: yellow;\n    }\n&lt;/style>"
                    }
                },
                {
                    "name": "classNameSelected",
                    "description": "Name of style to use when displaying this field on the pivot rows or columns and column or row is selected.",
                    "dataType": "string",
                    "optional": "true",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n&lt;/style>\ntext\tString\tnull\nalign\tString\tnull\nclassName\tString\tnull\nclassNameSelected\tString\tnull\nName of style to use when displaying this field on the pivot rows or columns and column or row is selected.\n&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {\n                                dataField: 'price', 'function': 'sum', text: 'sum', align: 'right',\n                                className: 'red', classNameSelected: 'blue',\n                                cellsClassName: 'green', cellsClassNameSelected: 'yellow',\n                                formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            { dataField: 'quantity', text: 'variance', 'function': 'var', formatSettings: { decimalPlaces: 2 } }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n\n    .green {\n        color: white;\n        background-color: green;\n    }\n\n    .yellow {\n        color: white;\n        background-color: yellow;\n    }\n&lt;/style>"
                    }
                },
                {
                    "name": "cellsClassName",
                    "description": "Name of style to use when displaying the cells of this pivot value field.",
                    "dataType": "string",
                    "optional": "true",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n&lt;/style>\ntext\tString\tnull\nalign\tString\tnull\nclassName\tString\tnull\nclassNameSelected\tString\tnull\nName of style to use when displaying this field on the pivot rows or columns and column or row is selected.\n&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {\n                                dataField: 'price', 'function': 'sum', text: 'sum', align: 'right',\n                                className: 'red', classNameSelected: 'blue',\n                                cellsClassName: 'green', cellsClassNameSelected: 'yellow',\n                                formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            { dataField: 'quantity', text: 'variance', 'function': 'var', formatSettings: { decimalPlaces: 2 } }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n\n    .green {\n        color: white;\n        background-color: green;\n    }\n\n    .yellow {\n        color: white;\n        background-color: yellow;\n    }\n&lt;/style>"
                    }
                },
                {
                    "name": "cellsClassNameSelected",
                    "description": "Name of style to use when displaying this cells this pivot value field when the cells are selected.",
                    "dataType": "string",
                    "optional": "true",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n&lt;/style>\ntext\tString\tnull\nalign\tString\tnull\nclassName\tString\tnull\nclassNameSelected\tString\tnull\nName of style to use when displaying this field on the pivot rows or columns and column or row is selected.\n&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {\n                                dataField: 'price', 'function': 'sum', text: 'sum', align: 'right',\n                                className: 'red', classNameSelected: 'blue',\n                                cellsClassName: 'green', cellsClassNameSelected: 'yellow',\n                                formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            { dataField: 'quantity', text: 'variance', 'function': 'var', formatSettings: { decimalPlaces: 2 } }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n\n    .green {\n        color: white;\n        background-color: green;\n    }\n\n    .yellow {\n        color: white;\n        background-color: yellow;\n    }\n&lt;/style>"
                    }
                },
                {
                    "name": "formatSettings",
                    "dataType": "object",
                    "ts_dataType": "PivotGridCellFormatting",
                    "optional": "true",
                    "displayName": "Pivot cell format settings",
                    "defaultValue": "{}",
                    "customExample": {
                        "codeType": "custom",
                        "code": "&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n&lt;/style>\ntext\tString\tnull\nalign\tString\tnull\nclassName\tString\tnull\nclassNameSelected\tString\tnull\nName of style to use when displaying this field on the pivot rows or columns and column or row is selected.\n&lt;template>\n    &lt;JqxPivotGrid ref=\"myPivotGrid\" :source=\"source\" :autoResize=\"true\" />\n&lt;/template>\n&lt;script>\n    import JqxPivotGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxpivotgrid.vue';\n    export default {\n        components: {\n            JqxPivotGrid\n        },\n        beforeCreate: function () {\n            const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi'];\n                const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase'];\n                const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte'];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname', text: 1111, align: 'left', className: 'red', classNameSelected: 'blue' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            {\n                                dataField: 'price', 'function': 'sum', text: 'sum', align: 'right',\n                                className: 'red', classNameSelected: 'blue',\n                                cellsClassName: 'green', cellsClassNameSelected: 'yellow',\n                                formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' }\n                            },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            { dataField: 'quantity', text: 'variance', 'function': 'var', formatSettings: { decimalPlaces: 2 } }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();\n        }\n    }\n&lt;/script>\n&lt;style>\n    .red {\n        color: white;\n        background-color: red;\n    }\n\n    .blue {\n        color: white;\n        background-color: blue;\n    }\n\n    .green {\n        color: white;\n        background-color: green;\n    }\n\n    .yellow {\n        color: white;\n        background-color: yellow;\n    }\n&lt;/style>"
                    }
                }
            ]
        },
        {
            "name": "PivotGridPoint",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "x",
                    "optional": "false",
                    "description": "X coordinate",
                    "dataType": "number",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": ""
                    }
                },
                {
                    "name": "y",
                    "optional": "false",
                    "description": "Y coordinate",
                    "dataType": "number",
                    "defaultValue": "null",
                    "customExample": {
                        "codeType": "custom",
                        "code": ""
                    }
                }
            ]
        }
    ],
    "exampleInit": {
        "source": "source",
        "autoResize": "true"
    },
    "exampledInitExtraData": {
        "properties": "",
        "beforeCreate": "const createPivotDataSource = function () {\n                // prepare sample data\n                const data = new Array();\n                const firstNames = [  'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi' ];\n                const lastNames = [ 'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase' ];\n                const productNames = [  'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte' ];\n                const priceValues = ['2.25', '1.5', '3.0', '3.3', '4.5'];\n\n                for (let i = 0; i &lt; 50; i++) {\n                    const row = {};\n                    const productindex = Math.floor(Math.random() * productNames.length);\n                    const price = parseFloat(priceValues[productindex]);\n                    const quantity = 1 + Math.round(Math.random() * 10);\n                    row['firstname'] = firstNames[Math.floor(Math.random() * firstNames.length)];\n                    row['lastname'] = lastNames[Math.floor(Math.random() * lastNames.length)];\n                    row['productname'] = productNames[productindex];\n                    row['price'] = price;\n                    row['quantity'] = quantity;\n                    row['total'] = price * quantity;\n                    data[i] = row;\n                }\n                // create a data source and data adapter\n                const source =\n                {\n                    localdata: data,\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ]\n                };\n                const dataAdapter = new jqx.dataAdapter(source);\n                dataAdapter.dataBind();\n                // create a pivot data source from the dataAdapter\n                const pivotDataSource = new jqx.pivot(\n                    dataAdapter,\n                    {\n                        customAggregationFunctions: {\n                            'var': function (values) {\n                                if (values.length &lt;= 1)\n                                    return 0;\n                                // sample's mean\n                                let mean = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    mean += values[i];\n                                mean /= values.length;\n                                // calc squared sum\n                                let ssum = 0;\n                                for (let i = 0; i &lt; values.length; i++)\n                                    ssum += Math.pow(values[i] - mean, 2)\n                                // calc the variance\n                                const variance = ssum / values.length;\n                                return variance;\n                            }\n                        },\n                        pivotValuesOnRows: false,\n                        rows: [{ dataField: 'firstname' }, { dataField: 'lastname' }],\n                        columns: [{ dataField: 'productname' }],\n                        filters: [\n                            {\n                                dataField: 'productname',\n                                filterFunction: function (value) {\n                                    if (value == 'Black Tea' || value == 'Green Tea')\n                                        return true;\n                                    return false;\n                                }\n                            }\n                        ],\n                        values: [\n                            { dataField: 'price', 'function': 'sum', text: 'sum', formatSettings: { prefix: '$', decimalPlaces: 2, align: 'right' } },\n                            { dataField: 'price', 'function': 'count', text: 'count' },\n                            {\n                                dataField: 'quantity',\n                                text: 'variance',\n                                'function': 'var',\n                                formatSettings: { decimalPlaces: 2 }\n                            }\n                        ]\n                    }\n                );\n                return pivotDataSource;\n            }\n            this.source = createPivotDataSource();",
        "mounted": "",
        "methods": ""
    },
    "exampleElementsInit": {
        "source": "pivotDataSource",
        "treeStyleRows": true,
        "autoResize": false,
        "multipleSelectionEnabled": true
    },
    "properties": [
        {
            "name": "source",
            "description": "Gets or sets pivot source adapter used to supply data to the pivot grid.",
            "ts_dataType": "any",
            "dataType": "object",
            "optional": "false",
            "displayName": "Data source",
            "defaultValue": "null",
            "example": "<PRE><CODE>var column1Values =\n[\n   'a', 'b', 'c', 'd'\n];\n\nvar column2Values =\n[\n   'e', 'f', 'g', 'h'\n];\n\nvar column3Values =\n[\n   'i', 'j', 'k', 'l'\n];\n\nvar column4Values =\n[\n   '2.25', '1.5', '3.0', '3.3', '4.5'\n];\n\nvar myData = [];\nfor (var i = 0; i < 500; i++) {\n   var row = {};\n\n   row.column1 = column1Values[Math.floor(Math.random() * column1Values.length)];\n   row.column2 = column2Values[Math.floor(Math.random() * column2Values.length)];\n   row.column3 = column3Values[Math.floor(Math.random() * column3Values.length)];\n   row.column4 = parseFloat(column4Values[Math.floor(Math.random() * column4Values.length)]);\n\n   myData.push(row);\n}\n\n\nvar source = {\n   localdata: myData,\n   datatype: 'array',\n   datafields:\n   [\n      { name: 'column1', type: 'string' },\n      { name: 'column2', type: 'string' },\n      { name: 'column3', type: 'string' },\n      { name: 'column4', type: 'number' }\n   ]\n};\n\nvar dataAdapter = new $.jqx.dataAdapter(source);\ndataAdapter.dataBind();\n\n// create a pivotDataSource from the dataAdapter\nvar pivotDataSource = new $.jqx.pivot(\n   dataAdapter,\n   {\n      pivotValuesOnRows: false,\n      rows: [{ dataField: 'column1' }, { dataField: 'column2'}],\n      columns: [{ dataField: 'column3'}],\n      values: [\n         { dataField: 'column4', text: 'Sum of column4', 'function': 'sum'},\n         { dataField: 'column4', text: 'Count of column4', 'function': 'count'}\n      ]\n   });\n\n// create a pivot grid\n$('#divPivotGrid').jqxPivotGrid({\n   source: pivotDataSource\n});\n</CODE></PRE>"
        },
        {
            "name": "localization",
            "description": "Gets or sets the localization object used to localize the text elements of the pivot grid.",
            "ts_dataType": "any",
            "dataType": "object",
            "optional": "true",
            "displayName": "Localization object",
            "defaultValue": "null",
            "example": "<PRE><CODE>var customLocalizationObj = {\n sortascendingstring: 'Sortiere aufsteigend',\n sortdescendingstring: 'Sortiere absteigend',\n sortremovestring: 'Entferne Sortierung'\n};\n\n$('#myPivotGrid').jqxPivotGrid({localization: customLocalizationObj});</PRE></CODE>",
            "exampleInit": {
                "localization": "localization",
                "exampleData": "{\n          sortascendingstring: 'Sortiere aufsteigend',\n          sortdescendingstring: 'Sortiere absteigend',\n          sortremovestring: 'Entferne Sortierung'\n        }"
            }
        },
        {
            "name": "scrollBarsEnabled",
            "description": "Gets or sets whether the scrollbars of the pivot grid are enabled or disabled.",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "ScrollBars Enabled",
            "defaultValue": "true",
            "designTimeFilterKeys": [ "basic" ],
            "exampleInit": { "scrollBarsEnabled": "false" }
        },
        {
            "name": "selectionEnabled",
            "description": "Gets or sets whether selection in the pivot grid is enabled or disabled.",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "Selection Enabled",
            "defaultValue": "true",
            "designTimeFilterKeys": [ "basic" ],
            "exampleInit": { "selectionEnabled": "false" }
        },
        {
            "name": "multipleSelectionEnabled",
            "description": "Gets or sets whether the multiple selection in the pivot grid is enabled or disabled.",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "Multiple Selection Enabled",
            "defaultValue": "true",
            "designTimeFilterKeys": [ "basic" ],
            "exampleInit": { "multipleSelectionEnabled": "false" }
        },

        {
            "name": "treeStyleRows",
            "description": "Gets or sets the rows of the pivot grid are displayed as a tree structure or using classic OLAP style.",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "Tree style rows",
            "defaultValue": "true",
            "designTimeFilterKeys": [ "basic" ],
            "exampleInit": { "treeStyleRows": "false" }
        },
        {
            "name": "autoResize",
            "description": "Gets or sets if the size of pivot grid adjusts automatically to display the entire content.",
            "dataType": "boolean",
            "optional": "true",
            "displayName": "Auto resize",
            "defaultValue": "false",
            "designTimeFilterKeys": [ "basic" ]
        },
        {
            "name": "itemsRenderer",
            "description": "Custom rendering function used to render the pivot rows and columns. The function should return a string which is valid HTML.",
            "dataType": "function",
            "ts_dataType": "(pivotItem: PivotGridItemsRenderer['pivotItem']) => string",
            "optional": "true",
            "displayName": "Items renderer",
            "defaultValue": "null",
            "example": "<PRE><CODE>$('#myPivotGrid').jqxPivotGrid(\n{\n   source: pivotDataSource,\n   itemsRenderer: function (pivotItem) {\n      var backgroundColor = pivotItem.isColumn ? 'rgba(187, 232, 227, 255)' : 'rgba(203, 254, 187, 255)';\n\n      return \"&lt;div style='background: \" \n         +  backgroundColor\n         + \"; width: calc(100% - 8px); height: calc(100% - 8px); padding: 4px;'&gt;\"\n         + pivotItem.text\n         + \"&lt;/div&gt;\";\n   },\n   cellsRenderer: function (pivotCell) {\n      var backgroundColor = 'rgba(253, 254, 207, 255)';\n      var cellText = pivotCell.value == 0 ? '' : pivotCell.formattedValue;\n\n      return \"&lt;div style='background: \" + backgroundColor + \"; width: calc(100%-8px); height: 100%; padding: 4px; margin: 0px;'&gt;\" + cellText + \"&lt;/div&gt;\";\n   }\n});\n</CODE></PRE>",
            "exampleInit": {
                "itemsRenderer": "itemsRenderer",
                "exampleData": "const backgroundColor = pivotItem.isColumn ? 'rgba(187, 232, 227, 255)' : 'rgba(203, 254, 187, 255)';\n                return '&lt;div style=\"background: '\n                    + backgroundColor\n                    + '; width: calc(100% - 8px); height: calc(100% - 8px); padding: 4px;\">'\n                    + pivotItem.text\n                    + '&lt;/div>';"
            }
        },
        {
            "name": "cellsRenderer",
            "description": "Custom rendering function used to render the pivot cells. The function should return a string which is valid HTML.",
            "dataType": "function",
            "ts_dataType": "(pivotCell: PivotGridCellsRenderer['pivotCell']) => string",
            "optional": "true",
            "displayName": "Cells renderer",
            "defaultValue": "null",
            "example": "<PRE><CODE>$('#myPivotGrid').jqxPivotGrid(\n{\n   source: pivotDataSource,\n   itemsRenderer: function (pivotItem) {\n      var backgroundColor = pivotItem.isColumn ? 'rgba(187, 232, 227, 255)' : 'rgba(203, 254, 187, 255)';\n\n      return \"&lt;div style='background: \" \n         +  backgroundColor\n         + \"; width: calc(100% - 8px); height: calc(100% - 8px); padding: 4px;'&gt;\"\n         + pivotItem.text\n         + \"&lt;/div&gt;\";\n   },\n   cellsRenderer: function (pivotCell) {\n      var backgroundColor = 'rgba(253, 254, 207, 255)';\n      var cellText = pivotCell.value == 0 ? '' : pivotCell.formattedValue;\n\n      return \"&lt;div style='background: \" + backgroundColor + \"; width: calc(100%-8px); height: 100%; padding: 4px; margin: 0px;'&gt;\" + cellText + \"&lt;/div&gt;\";\n   }\n});\n</CODE></PRE>",
            "exampleInit": {
                "cellsRenderer": "cellsRenderer",
                "exampleData": "const backgroundColor = 'rgba(253, 254, 207, 255)';\n                const cellText = pivotCell.value == 0 ? '' : pivotCell.formattedValue;\n                return '&lt;div style=\"background: ' + backgroundColor + '; width: calc(100%-8px); height: 100%; padding: 4px; margin: 0px;\">' + cellText + '&lt;/div>';"
            }
        }
    ],
    "events": [
        {
            "name": "pivotitemexpanding",
            "description": "This event is triggered when a pivot item is expanding. You may use the event's cancel flag to stop further processing.",
            "exampleDescription": "Handling the pivotitemexpanding event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('pivotitemexpanding', function (event) {\r\n     alert('Pivot item expanding: ' + event.args.pivotItem.text);\r\n});</CODE></PRE>"
        },
        {
            "name": "pivotitemexpanded",
            "description": "This event is triggered after a pivot item is expanded.",
            "exampleDescription": "Handling the pivotitemexpanded event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('pivotitemexpanded', function (event) {\r\n     alert('Pivot item expanded: ' + event.args.pivotItem.text);\r\n});</CODE></PRE>"
        },
        {
            "name": "pivotitemcollapsing",
            "description": "This event is triggered when a pivot item is collapsing. You may use the event's cancel flag to stop further processing.",
            "exampleDescription": "Handling the pivotitemcollapsing event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('pivotitemcollapsing', function (event) {\r\n     alert('Pivot item collapsing: ' + event.args.pivotItem.text);\r\n});</CODE></PRE>"
        },
        {
            "name": "pivotitemcollapsed",
            "description": "This event is triggered after a pivot item is collapsed.",
            "exampleDescription": "Handling the pivotitemcollapsed event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('pivotitemcollapsed', function (event) {\r\n     alert('Pivot item collapsed: ' + event.args.pivotItem.text);\r\n});</CODE></PRE>"
        },
        {
            "name": "sortchanging",
            "description": "This event is triggered the sorting is about to change. You may use the event's cancel flag to stop further processing.",
            "exampleDescription": "Handling the sortchanging event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('sortchanging', function (event) {\r\n     alert('Sort changing triggered. Pivot item: ' + event.args.pivotItem.text + ' , Sort order:' + event.args.sortOrder );\r\n});</CODE></PRE>"
        },
        {
            "name": "sortchanged",
            "description": "This event is triggered after the sorting order has changed.",
            "exampleDescription": "Handling the sortchanged event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('sortchanged', function (event) {\r\n     alert('Sort changed. Pivot item: ' + event.args.pivotItem.text + ' , Sort order:' + event.args.sortOrder );\r\n});</CODE></PRE>"
        },
        {
            "name": "sortremoving",
            "description": "This event is triggered the sorting is about to be removed. You may use the event's cancel flag to stop further processing.",
            "exampleDescription": "Handling the sortremoving event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('sortremoving', function (event) {\r\n     alert('Sort removing triggered. Pivot item: ' + event.args.pivotItem.text + ' , Sort order:' + event.args.sortOrder );\r\n});</CODE></PRE>"
        },
        {
            "name": "sortremoved",
            "description": "This event is triggered after the sorting has been removed.",
            "exampleDescription": "Handling the sortremoved event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('sortremoved', function (event) {\r\n     alert('Sort removed. Pivot item: ' + event.args.pivotItem.text + ' , Sort order:' + event.args.sortOrder );\r\n});</CODE></PRE>"
        },
        {
            "name": "pivotitemselectionchanged",
            "description": "This event is triggered after the selection of a pivot item has changed.",
            "exampleDescription": "Handling the pivotitemselectionchanged event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('pivotitemselectionchanged', function (event) {\r\n     alert('Pivot item: ' + event.args.pivotItem.text + ' , selected:' + event.args.selected );\r\n});</CODE></PRE>"
        },
        {
            "name": "pivotcellmousedown",
            "description": "This event is triggered on mousedown over a pivot grid cell. You may use the event's cancel flag to stop further processing.",
            "exampleDescription": "Handling the pivotcellmousedown event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('pivotcellmousedown', function (event) {\r\n     alert('cell mousedown, row: ' + event.args.pivotRow.text + ' , column:' + event.args.pivotColumn.text + ' , mouse button:' + event.args.mousebutton );\r\n});</CODE></PRE>"
        },
        {
            "name": "pivotcellmouseup",
            "description": "This event is triggered on mouseup over a pivot grid cell. You may use the event's cancel flag to stop further processing.",
            "exampleDescription": "Handling the pivotcellmouseup event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('pivotcellmouseup', function (event) {\r\n     alert('cell mouseup, row: ' + event.args.pivotRow.text + ' , column:' + event.args.pivotColumn.text + ' , mouse button:' + event.args.mousebutton );\r\n});</CODE></PRE>"
        },
        {
            "name": "pivotcellclick",
            "description": "This event is triggered on click over a pivot grid cell. You may use the event's cancel flag to stop further processing.",
            "exampleDescription": "Handling the pivotcellclick event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('pivotcellclick', function (event) {\r\n     alert('cell click, row: ' + event.args.pivotRow.text + ' , column:' + event.args.pivotColumn.text + ' , mouse button:' + event.args.mousebutton );\r\n});</CODE></PRE>"
        },
        {
            "name": "pivotcelldblclick",
            "description": "This event is triggered on double click over a pivot grid cell. You may use the event's cancel flag to stop further processing.",
            "exampleDescription": "Handling the pivotcelldblclick event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('pivotcelldblclick', function (event) {\r\n     alert('cell double click, row: ' + event.args.pivotRow.text + ' , column:' + event.args.pivotColumn.text + ' , mouse button:' + event.args.mousebutton );\r\n});</CODE></PRE>"
        },

        {
            "name": "pivotitemmousedown",
            "description": "This event is triggered on mousedown over a pivot grid item. You may use the event's cancel flag to stop further processing.",
            "exampleDescription": "Handling the pivotitemmousedown event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('pivotitemmousedown', function (event) {\r\n     alert('Pivot item mousedown: ' + event.args.pivotItem.text + ' , mouse button:' + event.args.mousebutton );\r\n});</CODE></PRE>"
        },
        {
            "name": "pivotitemmouseup",
            "description": "This event is triggered on mouseup over a pivot grid item. You may use the event's cancel flag to stop further processing.",
            "exampleDescription": "Handling the pivotitemmouseup event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('pivotitemmouseup', function (event) {\r\n     alert('Pivot item mouseup: ' + event.args.pivotItem.text + ' , mouse button:' + event.args.mousebutton );\r\n});</CODE></PRE>"
        },
        {
            "name": "pivotitemclick",
            "description": "This event is triggered on click over a pivot grid item. You may use the event's cancel flag to stop further processing.",
            "exampleDescription": "Handling the pivotitemclick event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('pivotitemclick', function (event) {\r\n     alert('Pivot item click: ' + event.args.pivotItem.text + ' , mouse button:' + event.args.mousebutton );\r\n});</CODE></PRE>"
        },
        {
            "name": "pivotitemdblclick",
            "description": "This event is triggered on double click over a pivot grid item. You may use the event's cancel flag to stop further processing.",
            "exampleDescription": "Handling the pivotitemdblclick event:",
            "example": "<PRE><CODE>$('#myPivotGrid').on('pivotitemdblclick', function (event) {\r\n     alert('Pivot item double click: ' + event.args.pivotItem.text + ' , mouse button:' + event.args.mousebutton );\r\n});</CODE></PRE>"
        }


    ],
    "methods": [
        {
            "name": "getInstance",
            "description": "Returns the instance of the pivot grid component",
            "exampleURL": "",
            "exampleDescription": "",
            "example": "<PRE><CODE>var myPivotGridInstance = $('#myPivotGrid').jqxPivotGrid('getInstance');</CODE></PRE>",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": []
        },
        {
            "name": "refresh",
            "description": "Refreshes the content of the pivot grid component",
            "exampleURL": "",
            "exampleDescription": "",
            "example": "<PRE><CODE>$('#myPivotGrid').jqxPivotGrid('refresh');</CODE></PRE>",
            "ts_returnDataType": "void",
            "arguments": []
        },
        {
            "name": "getPivotRows",
            "description": "Return the pivot rows of the pivot grid",
            "exampleURL": "",
            "exampleDescription": "",
            "example": "<PRE><CODE>var myPivotGridRows = $('#myPivotGrid').jqxPivotGrid('getPivotRows');\nalert('The pivot grid has ' + myPivotGridRows.items.length + ' rows.');</CODE></PRE>",
            "returnDataType": "object",
            "ts_returnDataType": "PivotGridRows",
            "arguments": []
        },
        {
            "name": "getPivotColumns",
            "description": "Return the pivot columns of the pivot grid",
            "exampleURL": "",
            "exampleDescription": "",
            "example": "<PRE><CODE>var myPivotGridColumns = $('#myPivotGrid').jqxPivotGrid('getPivotColumns');\nalert('The pivot grid has ' + myPivotGridColumns.items.length + ' columns.');</CODE></PRE>",
            "returnDataType": "object",
            "ts_returnDataType": "PivotGridColumns",
            "arguments": []
        },
        {
            "name": "getPivotCells",
            "description": "Return the pivot cells of the pivot grid",
            "example": "<PRE><CODE>var myPivotGridCells = $('#myPivotGrid').jqxPivotGrid('getPivotCells');</CODE></PRE>",
            "exampleURL": "",
            "exampleDescription": "",
            "returnDataType": "object",
            "ts_returnDataType": "PivotGridCells",
            "arguments": []
        }
    ]
}