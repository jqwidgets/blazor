{
    "widget": {
        "name": "jqxDateTimeInput",
        "description": "Enables the user to easily pick a date or time from an input or calendar displays in a drop-down.",
        "angular2": {
            "name": "jqxDateTimeInputComponent",
            "selector": "jqxDateTimeInput"
        }
    },
    "dataTypes": [
        {
            "name": "DateTimeInputAnimationType",
            "ts_dataType": "enum",
            "enumOptions": [ "fade", "slide", "none" ]
        },
        {
            "name": "DateTimeInputDropDownHorizontalAlignment",
            "ts_dataType": "enum",
            "enumOptions": [ "left", "right" ]
        },
        {
            "name": "DateTimeInputDropDownVerticalAlignment",
            "ts_dataType": "enum",
            "enumOptions": [ "top", "bottom" ]
        },
        {
            "name": "DateTimeInputSelectionMode",
            "ts_dataType": "enum",
            "enumOptions": [ "none", "default", "range" ]
        },
        {
            "name": "DateTimeInputFormatString",
            "ts_dataType": "enum",
            "enumOptions": [ "d", "f", "F", "n", "c", "p", "d", "dd", "ddd", "dddd", "D", "h", "hh", "H", "HH", "m", "mm", "M", "MM", "MMM", "MMMM", "s", "ss", "t", "tt", "T", "y", "yy", "yyy", "yyyy", "Y", "dddd-MMMM-yyyy" ]
        },
        {
            "name": "DateTimeInputTemplate",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "primary", "success", "warning", "danger", "info" ]
        },
        {
            "name": "DateTimeInputTextAlign",
            "ts_dataType": "enum",
            "enumOptions": [ "left", "right", "center" ]
        }
    ],
    "exampleInit": {
        "width": "250",
        "height": "30"
    },
    "properties": [
        {
            "name": "animationType",
            "defaultValue": "'slide'",
            "description": "<P>Sets or gets the type of the animation. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'fade'</CODE></PRE>\n<PRE><CODE>'slide'</CODE></PRE>\n<PRE><CODE>'none'</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({animationType: 'none'});\r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3qKpT/",
            "exampleDescription": "animationType is set to 'fade'",
            "dataType": "string",
            "ts_dataType": "enum:DateTimeInputAnimationType",
            "exampleInit": {
                "animationType": "fade"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "allowNullDate",
            "defaultValue": "true",
            "description": "<P>Determines whether Null is allowed as a value. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({allowNullDate: false});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hYdWh/",
            "exampleDescription": "allowNullDate is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "allowNullDate": "false"
            },
            "customExample": {
                "codeType": "get",
                "code": "&lt;template>\n  &lt;JqxDateTimeInput ref=\"myDateTimeInput\"\n    :width=\"250\" :height=\"30\" :allowNullDate=\"true\"\n  />\n&lt;/template>\n \n&lt;script>\n  import JqxDateTimeInput from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxdatetimeinput.vue';\n \n  export default {\n    components: {\n      JqxDateTimeInput\n    },\n    mounted: function () {\n        this.$refs.myDateTimeInput.val(null);\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "allowKeyboardDelete",
            "defaultValue": "true",
            "description": "<P>Determines whether <CODE>Backspace</CODE> and <CODE>Delete</CODE> keys are handled by the widget. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({allowKeyboardDelete: false});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dRL6b/",
            "exampleDescription": "allowKeyboardDelete is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "allowKeyboardDelete": "false"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "clearString",
            "defaultValue": "'Clear'",
            "description": "<P>Sets or gets the 'Clear' string displayed when the 'showFooter' property is true. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ clearString: 'Clear' });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ThYCa/",
            "exampleDescription": "clearString is set to 'Clear'",
            "dataType": "string",
            "exampleInit": {
                "clearString": "Clear"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "culture",
            "defaultValue": "default",
            "description": "<P>Sets or gets the jqxDateTimeInput's culture. The culture settings are contained within a file with the language code appended to the name, e.g. jquery.glob.de-DE.js for German. To set the culture, you need to include the jquery.glob.de-DE.js and set the culture property to the culture's name, e.g. 'de-DE'. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({culture: 'en-US' });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/xZYXn/",
            "exampleDescription": "culture is set to 'de-DE'",
            "dataType": "string",
            "exampleInit": {
                "culture": "de-DE"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "closeDelay",
            "defaultValue": "400",
            "description": "<P>Specifies the animation duration of the popup calendar when it is going to be hidden. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ closeDelay: 200 }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/JgcfP/",
            "exampleDescription": "closeDelay is set to 2000",
            "dataType": "number",
            "exampleInit": {
                "closeDelay": "2000"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "closeCalendarAfterSelection",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether or not the popup calendar must be closed after selection. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ closeCalendarAfterSelection:false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/uP3rK/",
            "exampleDescription": "closeCalendarAfterSelection is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "closeCalendarAfterSelection": "false"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "dropDownHorizontalAlignment",
            "defaultValue": "'left'",
            "description": "<P>Sets the DropDown's alignment. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'left'</CODE></PRE>\n<PRE><CODE>right'</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ dropDownHorizontalAlignment: 'right'}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/WbzUw/",
            "exampleDescription": "dropDownHorizontalAlignment is set to 'right'",
            "dataType": "string",
            "ts_dataType": "enum:DateTimeInputDropDownHorizontalAlignment",
            "exampleInit": {
                "dropDownHorizontalAlignment": "right"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "dropDownVerticalAlignment",
            "defaultValue": "'bottom'",
            "description": "<P>Sets or gets the DropDown's alignment. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'top'</CODE></PRE>\n<PRE><CODE>'bottom'</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ dropDownVerticalAlignment: 'top'}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/1k90z3x1/",
            "exampleDescription": "dropDownVerticalAlignment is set to \"top\"",
            "dataType": "string",
            "ts_dataType": "enum:DateTimeInputDropDownVerticalAlignment",
            "exampleInit": {
                "dropDownVerticalAlignment": "top"
            },
            "customExample": {
                "codeType": "get",
                "code": "&lt;template>\n  &lt;JqxDateTimeInput ref=\"myDateTimeInput\" style=\"margin-top: 250px;\"\n    :width=\"250\" :height=\"30\" :dropDownVerticalAlignment=\"'top'\"\n  />\n&lt;/template>\n \n&lt;script>\n  import JqxDateTimeInput from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxdatetimeinput.vue';\n \n  export default {\n    components: {\n      JqxDateTimeInput\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Determines whether the widget is disabled. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({disabled: false});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/L9aaR/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "enableBrowserBoundsDetection",
            "defaultValue": "false",
            "description": "<P>When this property is set to true, the popup calendar may open above the input, if there's not enough space below the DateTimeInput. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ enableBrowserBoundsDetection: false}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/c8HyD/",
            "exampleDescription": "enableBrowserBoundsDetection is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "enableBrowserBoundsDetection": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "enableAbsoluteSelection",
            "defaultValue": "false",
            "description": "<P>This setting enables the user to select only one symbol at a time when typing into the text input field. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ enableAbsoluteSelection: true });\r\n                        </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8cxPC/",
            "exampleDescription": "enableAbsoluteSelection is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "enableAbsoluteSelection": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "firstDayOfWeek",
            "defaultValue": "0",
            "description": "<P>Sets or gets which day to display in the first day column. By default the calendar displays 'Sunday' as first day. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ firstDayOfWeek: 1 });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/27DsA/",
            "exampleDescription": "firstDayOfWeek is set to 3",
            "dataType": "number",
            "exampleInit": {
                "firstDayOfWeek": "3"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "formatString",
            "defaultValue": "dd/MM/yyyy",
            "description": "<P>Sets or gets the date time input format of the date. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'d'-the day of the month</CODE></PRE>\n<PRE><CODE>'dd'-the day of the month</CODE></PRE>\n<PRE><CODE>'ddd'-the abbreviated name of the day of the week</CODE></PRE>\n<PRE><CODE>'dddd'-the full name of the day of the week</CODE></PRE>\n<PRE><CODE>'h'-the hour, using a 12-hour clock from 1 to 12</CODE></PRE>\n<PRE><CODE>'hh'-the hour, using a 12-hour clock from 01 to 12</CODE></PRE>\n<PRE><CODE>'H'-the hour, using a 24-hour clock from 0 to 23</CODE></PRE>\n<PRE><CODE>'HH'-the hour, using a 24-hour clock from 00 to 23</CODE></PRE>\n<PRE><CODE>'m'-the minute, from 0 through 59</CODE></PRE>\n<PRE><CODE>'mm'-the minutes,from 00 though59</CODE></PRE>\n<PRE><CODE>'M'-the month, from 1 through 12;</CODE></PRE>\n<PRE><CODE>'MM'-the month, from 01 through 12</CODE></PRE>\n<PRE><CODE>'MMM'-the abbreviated name of the month</CODE></PRE>\n<PRE><CODE>'MMMM'-the full name of the month</CODE></PRE>\n<PRE><CODE>'s'-the second, from 0 through 59</CODE></PRE>\n<PRE><CODE>'ss'-the second, from 00 through 59</CODE></PRE>\n<PRE><CODE>'t'-the first character of the AM/PM designator</CODE></PRE>\n<PRE><CODE>'tt'-the AM/PM designator</CODE></PRE>\n<PRE><CODE>'y'-the year, from 0 to 99</CODE></PRE>\n<PRE><CODE>'yy'-the year, from 00 to 99</CODE></PRE>\n<PRE><CODE>'yyy'-the year, with a minimum of three digits</CODE></PRE>\n<PRE><CODE>'yyyy'-the year as a four-digit number</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ formatString: \"dd\"});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/TeQMx/",
            "exampleDescription": "formatString is set to \"dddd\"",
            "dataType": "string",
            "ts_dataType": "string",
            "exampleInit": {
                "formatString": "d"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "height",
            "defaultValue": "null",
            "description": "<P>Sets or gets the height of the jqxDateTimeInput widget. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({  height: '25px'});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/CuG54/",
            "exampleDescription": "height is set to \"25px\"",
            "dataType": "number",
            "ts_dataType": "string | number",
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "min",
            "defaultValue": "Date(1900, 1, 1)",
            "description": "<P>Sets or gets the jqxDateTimeInput's minumun date. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ min: new Date(2000, 0, 1) });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/XEvPK/",
            "exampleDescription": "min is set to (2013, 0, 1)",
            "dataType": "Date",
            "ts_dataType": "Date",
            "exampleInit": {
                "min": "min",
                "max": "max",
                "exampleData": "moreThanOnePropsExample; new Date(2018, 0, 1); new Date(2019, 0, 1)"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "max",
            "defaultValue": "Date(2100, 1, 1)",
            "description": "<P>Sets or gets the jqxDateTimeInput's maximum date. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ max: new Date(2013, 0, 1) });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/CfJEQ/",
            "exampleDescription": "max is set to (2014, 0, 1)",
            "dataType": "Date",
            "ts_dataType": "Date",
            "exampleInit": {
                "min": "min",
                "max": "max",
                "exampleData": "moreThanOnePropsExample; new Date(2018, 0, 1); new Date(2019, 0, 1)"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "openDelay",
            "defaultValue": "350",
            "description": "<P>Specifies the animation duration of the popup calendar when it is going to be displayed. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ openDelay: 200 }); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/LsY2A/",
            "exampleDescription": "openDelay is set to 2000",
            "dataType": "number",
            "exampleInit": {
                "openDelay": "2000"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "placeHolder",
            "defaultValue": "\"\"",
            "description": "<P>Determines the widget's place holder displayed when the widget's value is null. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({placeHolder: \"Null Value\"});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3r0qdyq7/",
            "exampleDescription": "placeHolder is set to \"Null Value\"",
            "dataType": "string",
            "exampleInit": {
                "placeHolder": "Null Value"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "popupZIndex",
            "defaultValue": "20000",
            "description": "<P>Sets or gets the popup's z-index. </P>",
            "example": "<pre><CODE>$(\"#jqxDateTimeInput\").jqxDateTimeInput({popupZIndex: 999999});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hCD2Y/",
            "exampleDescription": "popupZIndex is set to 99999",
            "dataType": "number",
            "exampleInit": {
                "popupZIndex": "99999"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts.</P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({rtl : true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/CBByC/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "readonly",
            "defaultValue": "false",
            "description": "<P></P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ readonly: true});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/yv5gR/",
            "exampleDescription": "readonly is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "readonly": "true"
            }
        },
        {
            "name": "showFooter",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether the dropdown calendar's footer is displayed. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ showFooter: true });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/TuRtV/",
            "exampleDescription": "showFooter is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "showFooter": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "selectionMode",
            "defaultValue": "'default'",
            "description": "<P>Sets or gets the dropdown calendar's selection mode. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'none'</CODE></PRE>\n<PRE><CODE>'default'</CODE></PRE>\n<PRE><CODE>'range'</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ selectionMode: 'range' });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Bp7Zp/",
            "exampleDescription": "selectionMode is set to 'range'",
            "dataType": "string",
            "ts_dataType": "enum:DateTimeInputSelectionMode",
            "exampleInit": {
                "selectionMode": "range"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "showWeekNumbers",
            "defaultValue": "true",
            "description": "<P>Sets or gets a value whether the week`s numbers are displayed. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ showWeekNumbers: false });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/KWzzF/",
            "exampleDescription": "showWeekNumbers is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showWeekNumbers": "false"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "showTimeButton",
            "defaultValue": "false",
            "description": "<P>Determines whether the time button is visible. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({showTimeButton: true});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/38qo78yy/",
            "exampleDescription": "showTimeButton is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "showTimeButton": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "showCalendarButton",
            "defaultValue": "true",
            "description": "<P>Determines whether the calendar button is visible. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({showCalendarButton: false});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/uM34b/",
            "exampleDescription": "showCalendarButton is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showCalendarButton": "false"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n<PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;\r\n</CODE></PRE>\r\n</CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/EFvjh/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "template",
            "defaultValue": "'default'",
            "description": "<P>Determines the template as an alternative of the default styles. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'default' - the default template. The style depends only on the \"theme\" property value.</CODE></PRE>\n<PRE><CODE>'primary' - dark blue style for extra visual weight.</CODE></PRE>\n<PRE><CODE>'success' - green style for successful or positive action.</CODE></PRE>\n<PRE><CODE>'warning' - orange style which indicates caution.</CODE></PRE>\n<PRE><CODE>'danger' - red style which indicates a dangerous or negative action.</CODE></PRE>\n<PRE><CODE>'info' - blue button, not tied to a semantic action or use.</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>template</CODE> property. </P>\n<PRE><CODE>$(\"#jqxDateTimeInput\").jqxDateTimeInput({ template: 'primary'});</CODE></PRE>\n\r\n<P>Get the <CODE>template</CODE> property. </P>\n<PRE><CODE>var template = $('#jqxDateTimeInput').jqxDateTimeInput('template');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vdbrvz00/",
            "exampleDescription": "template is set to 'primary'",
            "dataType": "string",
            "ts_dataType": "enum:DateTimeInputTemplate",
            "exampleInit": {
                "template": "primary"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "textAlign",
            "defaultValue": "left",
            "description": "<P>Sets or gets the position of the text. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ textAlign: \"left\"});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zkXQt/",
            "exampleDescription": "textAlign is set to \"right\"",
            "dataType": "string",
            "ts_dataType": "enum:DateTimeInputTextAlign",
            "exampleInit": {
                "textAlign": "right"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "todayString",
            "defaultValue": "'Today'",
            "description": "<P>Sets or gets the 'Today' string displayed in the dropdown Calendar when the 'showFooter' property is true. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ todayString: 'Today' });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/DDfcp/",
            "exampleDescription": "todayString is set to 'Today'",
            "dataType": "string",
            "exampleInit": {
                "todayString": "Today",
                "showFooter": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "value",
            "defaultValue": "Today's Date",
            "description": "<P>Sets or gets the jqxDateTimeInput value. </P>",
            "example": "<pre><CODE>\r\n// use JavaScript Date\r\n$('#jqxDateTimeInput').jqxDateTimeInput({ value: new Date(2000, 0, 1) });\r\n// use string\r\n$('#jqxDateTimeInput').jqxDateTimeInput({ value: \"2000, 0, 1\" });\r\n                         </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/NcaUt/",
            "exampleDescription": "value is set to (2013, 0, 1)",
            "dataType": "Date | null",
            "ts_dataType": "Date | null",
            "exampleInit": {
                "value": "value",
                "exampleData": "new Date(2019, 0, 10)"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "width",
            "defaultValue": "null",
            "description": "<P>Sets or gets the width of the jqxDateTimeInput widget. </P>",
            "example": "<pre><CODE>$('#jqxDateTimeInput').jqxDateTimeInput({ width: '250px'});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/BR6tp/",
            "exampleDescription": "width is set to \"250px\"",
            "dataType": "number",
            "ts_dataType": "string | number",
            "customExample": {
                "codeType": "get"
            }
        }
    ],
    "events": [
        {
            "name": "change",
            "description": "<P>This event is triggered on blur when the value is changed . </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/M2cfD/",
            "exampleDescription": "Bind to the change event by type:jqxDateTimeInput",
            "example": "<PRE><CODE>$('#jqxDateTimeInput').on('change', function (event) \r\n{  \r\n    var jsDate = event.args.date; \r\n    var type = event.args.type; // keyboard, mouse or null depending on how the date was selected.\r\n}); </CODE></PRE>"
        },
        {
            "name": "close",
            "description": "<P>This event is triggered when the popup calendar is closed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/m5DZ6/",
            "exampleDescription": "Bind to the close event by type:jqxDateTimeInput",
            "example": "<PRE><CODE>$('#jqxDateTimeInput').on('close', function (event) { // Some code here. }); </CODE></PRE>"
        },
        {
            "name": "open",
            "description": "<P>This event is triggered when the popup calendar is opened. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4yG8b/",
            "exampleDescription": "Bind to the open event by type:jqxDateTimeInput",
            "example": "<PRE><CODE>$('#jqxDateTimeInput').on('open', function (event) { // Some code here. }); </CODE></PRE>"
        },
        {
            "name": "textchanged",
            "description": "<P>This event is triggered when the text is changed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/guwJh/",
            "exampleDescription": "Bind to the textchanged event by type:jqxDateTimeInput",
            "example": "<PRE><CODE>$('#jqxDateTimeInput').on('textchanged', function (event) { // Some code here.}); </CODE></PRE>"
        },
        {
            "name": "valueChanged",
            "description": "<P>This event is triggered when the value is changed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/L9wwf/",
            "exampleDescription": "Bind to the valueChanged event by type:jqxDateTimeInput",
            "example": "<PRE><CODE>$('#jqxDateTimeInput').on('valueChanged', function (event) \r\n{  \r\n    var jsDate = event.args.date; \r\n}); </CODE></PRE>"
        }
    ],
    "methods": [
        {
            "name": "close",
            "description": "<P>After calling this method, the popup calendar will be hidden. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/XxJPL/",
            "exampleDescription": "closes the jqxDateTimeInput",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxDateTimeInput ref=\"myDateTimeInput\"\n    :width=\"250\" :height=\"30\"\n  />\n&lt;/template>\n \n&lt;script>\nimport JqxDateTimeInput from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxdatetimeinput.vue\";\n\nexport default {\n  components: {\n    JqxDateTimeInput\n  },\n  mounted: function() {\n    this.$refs.myDateTimeInput.open();\n    setTimeout(() => {\n      this.$refs.myDateTimeInput.close();\n    }, 1500);\n  }\n};\n&lt;/script>"
            }
        },
        {
            "name": "destroy",
            "description": "<P>Destroys the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxDateTimeInput').jqxDateTimeInput('destroy'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/2zYxH/",
            "exampleDescription": "destroys the jqxDateTimeInput",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "focus",
            "description": "<P>Focuses the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>focus</CODE> method. </P>\n<PRE><CODE>$('#jqxDateTimeInput').jqxDateTimeInput('focus'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/a3R2F/",
            "exampleDescription": "focus the jqxDateTimeInput",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getRange",
            "description": "<P>Gets the selection range when the selectionMode is set to 'range'. The returned value is an object with \"from\" and \"to\" fields. Each of the fields is a JavaScript Date object. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/hLftL/",
            "exampleDescription": "gets the range of the jqxDateTimeInput",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "extraData": {
                "selectionMode": "'range'"
            },
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxDateTimeInput ref=\"myDateTimeInput\"\n      :width=\"250\" :height=\"30\"\n      :selectionMode=\"'range'\"\n    />\n    &lt;br/>\n    &lt;JqxButton @click=\"onClick($event)\" :width=\"60\" :height=\"20\">Click&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n \n&lt;script>\nimport JqxDateTimeInput from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxdatetimeinput.vue\";\nimport JqxButton from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue\";\n\nexport default {\n  components: {\n    JqxDateTimeInput,\n    JqxButton\n  },\n  mounted: function() {\n    this.$refs.myDateTimeInput.setRange(new Date(2017, 9, 20), new Date(2017, 9, 24));\n  },\n  methods: {\n    onClick: function(event) {\n      const value = this.$refs.myDateTimeInput.getRange();\n      console.log(value);\n    }\n  }\n};\n&lt;/script>"
            }
        },
        {
            "name": "getText",
            "description": "<P>Returns the input field's text. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zXKF5/",
            "exampleDescription": "gets the text of the jqxDateTimeInput",
            "returnDataType": "string",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getDate",
            "description": "<P>When the getDate method is called, the user gets the current date. The returned value is JavaScript Date object. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/njQAD/",
            "exampleDescription": "gets the date of the jqxDateTimeInput",
            "returnDataType": "Date",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getMaxDate",
            "description": "<P>When the setMaxDate method is called, the user gets the maximum navigation date. The returned value is JavaScript Date object. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/GG7Az/",
            "exampleDescription": "gets the maximum date of the jqxDateTimeInput",
            "returnDataType": "Date",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getMinDate",
            "description": "<P>When the getMinDate method is called, the user gets the minimum navigation date. The returned value is JavaScript Date object. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/aAbMM/",
            "exampleDescription": "gets the minimum date of the jqxDateTimeInput",
            "returnDataType": "Date",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "open",
            "description": "<P>After calling this method, the popup calendar will be displayed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/qhU4H/",
            "exampleDescription": "opens the jqxDateTimeInput",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "setRange",
            "description": "<P>Sets the selection range when the selectionMode is set to 'range'. The required parameters are JavaScript Date objects. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4FkRw/",
            "exampleDescription": "sets the range of the jqxDateTimeInput",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "date",
                    "dataType": "Date/string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "date2",
                    "dataType": "Date/string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "new Date(2017, 9, 20)", "new Date(2017, 9, 22)" ]
            },
            "extraData": {
                "selectionMode": "'range'"
            }
        },
        {
            "name": "setMinDate",
            "description": "<P>When the setMinDate method is called, the user sets the minimum date to which it is possible to navigate. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/ZgTSj/",
            "exampleDescription": "sets the minimum date of the jqxDateTimeInput",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "date",
                    "dataType": "Date/string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "new Date(2017, 9, 20)" ]
            }
        },
        {
            "name": "setMaxDate",
            "description": "<P>When the setMaxDate method is called, the user sets the maximum date to which it is possible to navigate. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/fD2f7/",
            "exampleDescription": "sets the maximum date of the jqxDateTimeInput",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "date",
                    "dataType": "Date/string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "new Date(2017, 9, 20)" ]
            }
        },
        {
            "name": "setDate",
            "description": "<P>When the setDate method is called, the user sets the date. The required parameter is a JavaScript Date object. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3UguZ/",
            "exampleDescription": "sets the date of the jqxDateTimeInput",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "date",
                    "dataType": "Date/string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "new Date(2017, 9, 20)" ]
            }
        },
        {
            "name": "val",
            "description": "<P>Gets or sets the jqxDateTimeInput's value. <br/>Set value:<br/><code>this.$refs.myDateTimeInput.val(new Date(2011, 10, 24));</code><br/><br/>Get value:<br/><code>let date = this.$refs.myDateTimeInput.val();</code></P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>val</CODE> method. </P>\n<PRE><CODE>\r\n// Set Date using Javascript Date param. Sets year = 2013, month = april, day = 3.\r\n$('#jqxDateTimeInput').jqxDateTimeInput('val', new Date(2013, 3, 3));\r\n// Set Date using string param.\r\n$('#jqxDateTimeInput').jqxDateTimeInput('val', \"2013/3/3\");\r\n// Set Date using jQuery's val.\r\n$('#jqxDateTimeInput').val(\"2013/3/3\");\r\n// Set Date using jQuery's val. Param is JavaScript Date.\r\n$('#jqxDateTimeInput').val(new Date(2013, 3, 3));\r\n// Set Null Date.\r\n$('#jqxDateTimeInput').val(null);\r\n// Set Range when the selectionMode is \"range\".\r\n$('#jqxDateTimeInput').val(\"2013/3/3\", \"2013/3/10\");\r\n// Set Range using JavaScript Date.\r\n$('#jqxDateTimeInput').val(new Date(2013, 3, 3), new Date(2013, 3, 10));\r\n// Get Date. The returned value is string.\r\n$('#jqxDateTimeInput').jqxDateTimeInput('val');\r\n// Get Date. The returned value is Javascript Date.\r\n$('#jqxDateTimeInput').jqxDateTimeInput('val', 'date');\r\n// Get Date using jQuery's val. The returned value is string.\r\n$('#jqxDateTimeInput').val();\r\n// Get JavaScript Date using jQuery's val. \r\n$('#jqxDateTimeInput').val('date');\r\n </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/sYxBN/",
            "exampleDescription": "gets of sets the value of the jqxDateTimeInput",
            "returnDataType": "Date/string",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "value",
                    "dataType": "Date/string(optional)",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": true
                },
                {
                    "name": "value2",
                    "dataType": "Date/string(optional)",
                    "ts_dataType": "any",
                    "description": "The end of range when the selectionMode is \"range\"",
                    "optional": true
                }
            ]
        }
    ]
}