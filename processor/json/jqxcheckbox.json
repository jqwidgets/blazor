{
    "widget": {
        "name": "jqxCheckBox",
        "description": "Displays a check box that allows the end-user to select a true, false or indeterminate condition.",
        "angular2": {
            "name": "jqxCheckBoxComponent",
            "selector": "jqxCheckBox"
        }
    },
    "exampleExtraTemplate": "Check Me Out!",
    "dataTypes": [],
    "properties": [
        {
            "name": "animationShowDelay",
            "defaultValue": "250",
            "description": "<P>Sets or gets the delay of the fade animation when the CheckBox is going to be checked. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>animationShowDelay</CODE> property. </P>\n<PRE><CODE>$('#jqxCheckBox').jqxCheckBox({ animationShowDelay: 200 }); </CODE></PRE>\n\r\n<P>Get the <CODE>animationShowDelay</CODE> property. </P>\n<PRE><CODE>var animationShowDelay = $('#jqxCheckBox').jqxCheckBox('animationShowDelay'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FUskj/",
            "exampleDescription": "animationShowDelay is set to 200",
            "dataType": "number",
            "exampleInit": {
                "animationShowDelay": "300"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "animationHideDelay",
            "defaultValue": "300",
            "description": "<P>Sets or gets the delay of the fade animation when the CheckBox is going to be unchecked. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>animationHideDelay</CODE> property. </P>\n<PRE><CODE>$('#jqxCheckBox').jqxCheckBox({ animationHideDelay: 200 }); </CODE></PRE>\n\r\n<P>Get the <CODE>animationHideDelay</CODE> property. </P>\n<PRE><CODE>var animationHideDelay = $('#jqxCheckBox').jqxCheckBox('animationHideDelay'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/6kFGd/",
            "exampleDescription": "animationHideDelay is set to 200",
            "dataType": "number",
            "exampleInit": {
                "animationHideDelay": "500",
                "checked": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "boxSize",
            "defaultValue": "\"13px\"",
            "description": "<P>Sets or gets the checkbox's size. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>boxSize</CODE> property. </P>\n<PRE><CODE>$('#jqxCheckBox').jqxCheckBox({ boxSize:\"15px\" }); </CODE></PRE>\n\r\n<P>Get the <CODE>boxSize</CODE> property. </P>\n<PRE><CODE>var boxSize = $('#jqxCheckBox').jqxCheckBox('boxSize'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/evyjp/",
            "exampleDescription": "boxSize is set to '15px'",
            "dataType": "string",
            "ts_dataType": "number | string",
            "exampleInit": {
                "boxSize": "15px"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "checked",
            "defaultValue": "false",
            "description": "<P>Sets or gets the check state. </P>\n<B>Possible Values: (when the hasThreeStates property value is true)</B>\n<PRE><CODE>'true'</CODE></PRE>\n<PRE><CODE>'false'</CODE></PRE>\n<PRE><CODE>'null'</CODE></PRE>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>checked</CODE> property. </P>\n<PRE><CODE>$('#jqxCheckBox').jqxCheckBox({ checked:true }); </CODE></PRE>\n\r\n<P>Get the <CODE>checked</CODE> property. </P>\n<PRE><CODE>var checked = $('#jqxCheckBox').jqxCheckBox('checked'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Y5c7d/",
            "exampleDescription": "checked is set to true",
            "dataType": "boolean",
            "ts_dataType": "boolean | null",
            "exampleInit": {
                "checked": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the CheckBox is disabled. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>$('#jqxCheckBox').jqxCheckBox({ disabled:true }); </CODE></PRE>\n\r\n<P>Get the <CODE>disabled</CODE> property. </P>\n<PRE><CODE>var disabled = $('#jqxCheckBox').jqxCheckBox('disabled');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/uZd4y/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "enableContainerClick",
            "defaultValue": "true",
            "description": "<P>Sets or gets whether the clicks on the container are handled as clicks on the check box. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>enableContainerClick</CODE> property. </P>\n<PRE><CODE>$('#jqxCheckBox').jqxCheckBox({enableContainerClick :true }); </CODE></PRE>\n\r\n<P>Get the <CODE>enableContainerClick</CODE> property. </P>\n<PRE><CODE>var enableContainerClick = $('#jqxCheckBox').jqxCheckBox('enableContainerClick'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/GQWSV/",
            "exampleDescription": "enableContainerClick is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "enableContainerClick": "false"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "groupName",
            "defaultValue": "\"\"",
            "description": "<P>Sets or gets the group name. When this property is set, the checkboxes in the same group behave as radio buttons. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>groupName</CODE> property. </P>\n<PRE><CODE>$('#jqxCheckBox').jqxCheckBox({groupName :\"Panel\" }); </CODE></PRE>\n\r\n<P>Get the <CODE>groupName</CODE> property. </P>\n<PRE><CODE>var groupName = $('#jqxCheckBox').jqxCheckBox('groupName'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/emkfm/",
            "exampleDescription": "groupName is set to 'panel'",
            "dataType": "string",
            "exampleInit": {
                "groupName": "panel"
            },
            "customExample": {
                "codeType": "custom",
                "code": "&lt;template>\n  &lt;div>\n    &lt;JqxCheckBox ref=\"checkBox1\"\n      :groupName=\"'panel'\">\n      Entertainment\n    &lt;/JqxCheckBox>\n    &lt;JqxCheckBox ref=\"checkBox2\"\n      :groupName=\"'panel'\">\n      Computers\n    &lt;/JqxCheckBox>\n  &lt;/div>\n&lt;/template>\n \n&lt;script>\nimport JqxCheckBox from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxcheckbox.vue\";\n\nexport default {\n  components: {\n    JqxCheckBox\n  }\n};\n&lt;/script>"
            }
        },
        {
            "name": "height",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxCheckBox's height. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$('#jqxCheckBox').jqxCheckBox({height:\"400px\"});</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxCheckBox').jqxCheckBox('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/aWQrX/",
            "exampleDescription": "height is set to '100px'",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "height": "100"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "hasThreeStates",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the checkbox has 3 states - checked, unchecked and indeterminate. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>hasThreeStates</CODE> property. </P>\n<PRE><CODE>$('#jqxCheckBox').jqxCheckBox({ hasThreeStates:true }); </CODE></PRE>\n\r\n<P>Get the <CODE>hasThreeStates</CODE> property. </P>\n<PRE><CODE>var hasThreeStates = $('#jqxCheckBox').jqxCheckBox('hasThreeStates'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/wS4Y4/",
            "exampleDescription": "hasThreeStates is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "hasThreeStates": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "locked",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the checkbox is locked. In this mode the user is not allowed to check/uncheck the checkbox. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>locked</CODE> property. </P>\n<PRE><CODE>$('#jqxCheckBox').jqxCheckBox({locked :true }); </CODE></PRE>\n\r\n<P>Get the <CODE>locked</CODE> property. </P>\n<PRE><CODE>var locked = $('#jqxCheckBox').jqxCheckBox('locked'); </CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/UfbDC/",
            "exampleDescription": "locked is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "locked": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts.</P>",
            "example": "<pre><CODE>$('#jqxCheckBox').jqxCheckBox({rtl : true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/P7u5e/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n<PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;\r\n</CODE></PRE>\r\n</CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/gPyc3/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            },
            "customExample": {
                "codeType": "get"
            }
        },
        {
            "name": "width",
            "defaultValue": "null",
            "description": "<P>Sets or gets the jqxCheckBox's width. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$('#jqxCheckBox').jqxCheckBox({width:\"200px\"});</CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxCheckBox').jqxCheckBox('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4ghkn/",
            "exampleDescription": "width is set to '300px'",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "width": "300"
            },
            "customExample": {
                "codeType": "get"
            }
        }
    ],
    "events": [
        {
            "name": "checked",
            "description": "<P>This event is triggered when the checkbox is checked. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>checked</CODE> event by type: jqxCheckBox. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/vT9DJ/",
            "exampleDescription": "Bind to the checked event by type:jqxCheckBox",
            "example": "<PRE><CODE>$('#jqxCheckBox').on('checked', function (event) { // Some code here. }); </CODE></PRE>"
        },
        {
            "name": "change",
            "description": "<P>This is triggered when the checkbox's state changes from one state to another. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>change</CODE> event by type: jqxCheckBox. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/eSKws/",
            "exampleDescription": "Bind to the change event by type:jqxCheckBox",
            "example": "<PRE><CODE>$('#jqxCheckBox').on('change', function (event) { var checked = event.args.checked;   var type = event.args.type; // keyboard, mouse or null depending on how the value was changed. }); </CODE></PRE>"
        },
        {
            "name": "indeterminate",
            "description": "<P>This event is triggered when the checkbox's checked property is going to be null. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>indeterminate</CODE> event by type: jqxCheckBox. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/QvxFq/",
            "exampleDescription": "Bind to the indeterminate event by type:jqxCheckBox",
            "example": "<PRE><CODE>$('#jqxCheckBox').on('indeterminate', function (event) { // Some code here. }); </CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxCheckBox ref=\"myCheckBox\" @indeterminate=\"onIndeterminate($event)\"\n    :hasThreeStates=\"true\"\n   >\n    Check Me Out!\n  &lt;/JqxCheckBox>\n&lt;/template>\n \n&lt;script>\n  import JqxCheckBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxcheckbox.vue';\n \n  export default {\n    components: {\n      JqxCheckBox\n    },\n    methods: {\n      onIndeterminate: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "unchecked",
            "description": "<P>This event is triggered when the checkbox is unchecked. </P>\n<H4>Code examples</H4>\n<P>Bind to the <CODE>unchecked</CODE> event by type: jqxCheckBox. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/eA2ee/",
            "exampleDescription": "Bind to the unchecked event by type:jqxCheckBox",
            "example": "<PRE><CODE>$('#jqxCheckBox').on('unchecked', function (event) { // Some code here. }); </CODE></PRE>",
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxCheckBox ref=\"myCheckBox\" @unchecked=\"onUnchecked($event)\"\n    :checked=\"true\"\n   >\n    Check Me Out!\n  &lt;/JqxCheckBox>\n&lt;/template>\n \n&lt;script>\n  import JqxCheckBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxcheckbox.vue';\n \n  export default {\n    components: {\n      JqxCheckBox\n    },\n    methods: {\n      onUnchecked: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n&lt;/script>"
            }
        }
    ],
    "methods": [
        {
            "name": "check",
            "description": "<P>Checks the checkbox. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/kE7QT/",
            "exampleDescription": "checks the jqxCheckBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "disable",
            "description": "<P>Disables the checkbox. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/RVWVw/",
            "exampleDescription": "disables the jqxCheckBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "destroy",
            "description": "<P>Destroys the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>destroy</CODE>thod. </P>\n<PRE><CODE>$('#jqxCheckBox').jqxCheckBox('destroy'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Km9Fw/",
            "exampleDescription": "destroys the jqxCheckBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "enable",
            "description": "<P>Enables the checkbox. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/psLhU/",
            "exampleDescription": "enables the jqxCheckBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxCheckBox ref=\"myCheckBox\"\n    :disabled=\"true\"\n   >\n    Check Me Out!\n  &lt;/JqxCheckBox>\n&lt;/template>\n \n&lt;script>\n  import JqxCheckBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxcheckbox.vue';\n \n  export default {\n    components: {\n      JqxCheckBox\n    },\n    mounted: function () {\n      this.$refs.myCheckBox.enable();\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "focus",
            "description": "<P>Focuses the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>focus</CODE> method. </P>\n<PRE><CODE>$('#jqxCheckBox').jqxCheckBox('focus'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/xvVjr/",
            "exampleDescription": "focuses the jqxCheckBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "indeterminate",
            "description": "<P>Sets the indeterminate state(checked property value is going to be null after calling this method). </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/5Pz9s/",
            "exampleDescription": "invoke the indeterminate method",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "render",
            "description": "<P>Renders the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>render</CODE> method. </P>\n<PRE><CODE>$('#jqxCheckBox').jqxCheckBox('render'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/EhyAT/",
            "exampleDescription": "renders the jqxCheckBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "toggle",
            "description": "<P>Toggles the check state. This method is automatically called when the user clicks the checkbox. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/d3Vn7/",
            "exampleDescription": "invoke the toggle method",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "uncheck",
            "description": "<P>Unchecks the checkbox. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/YP6gF/",
            "exampleDescription": "unchecks the jqxCheckBox",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxCheckBox ref=\"myCheckBox\"\n  :checked=\"true\"\n   >\n    Check Me Out!\n  &lt;/JqxCheckBox>\n&lt;/template>\n \n&lt;script>\n  import JqxCheckBox from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxcheckbox.vue';\n \n  export default {\n    components: {\n      JqxCheckBox\n    },\n    mounted: function () {\n      this.$refs.myCheckBox.uncheck();\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "val",
            "description": "<P>Sets or gets the value. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/pUVkd/",
            "exampleDescription": "invoke the val method of the jqxCheckBox",
            "returnDataType": "boolean",
            "arguments": [
                {
                    "name": "value",
                    "dataType": "boolean",
                    "description": "",
                    "optional": true
                }
            ]
        }
    ]
}