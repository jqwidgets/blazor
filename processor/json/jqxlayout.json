{
    "widget": {
        "name": "jqxLayout",
        "description": "Allows the creation of complex layouts with panels that can be nested, resized, pinned, unpinned and closed.",
        "angular2": {
            "name": "jqxLayoutComponent",
            "selector": "jqxLayout"
        }
    },
    "dataTypes": [
        {
            "name": "LayoutType",
            "ts_dataType": "enum",
            "enumOptions": [ "layoutGroup", "tabbedGroup", "documentGroup", "autoHideGroup", "layoutPanel", "documentPanel" ]
        },
        {
            "name": "LayoutAlignment",
            "ts_dataType": "enum",
            "enumOptions": [ "left", "right", "top", "bottom" ]
        },
        {
            "name": "LayoutOrientation",
            "ts_dataType": "enum",
            "enumOptions": [ "horizontal", "vertical" ]
        },
        {
            "name": "Layout",
            "ts_dataType": "interface",
            "properties": [
                {
                    "name": "type",
                    "dataType": "string",
                    "ts_dataType": "enum:LayoutType",
                    "optional": "false",
                    "displayName": "Type",
                    "defaultValue": ""
                },
                {
                    "name": "alignment",
                    "dataType": "string",
                    "ts_dataType": "enum:LayoutAlignment",
                    "optional": "true",
                    "displayName": "Alignment",
                    "defaultValue": ""
                },
                {
                    "name": "allowClose",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "AllowClose",
                    "defaultValue": "center"
                },
                {
                    "name": "allowPin",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "AllowPin",
                    "defaultValue": ""
                },
                {
                    "name": "allowUnpin",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "AllowUnpin",
                    "defaultValue": ""
                },
                {
                    "name": "contentContainer",
                    "dataType": "string",
                    "optional": "true",
                    "displayName": "ContentContainer",
                    "defaultValue": ""
                },
                {
                    "name": "height",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Height",
                    "defaultValue": ""
                },
                {
                    "name": "initContent",
                    "dataType": "Function",
                    "ts_dataType": "() => void",
                    "optional": "true",
                    "displayName": "InitContent",
                    "defaultValue": ""
                },
                {
                    "name": "minHeight",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "MinHeight",
                    "defaultValue": ""
                },
                {
                    "name": "minWidth",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "MinWidth",
                    "defaultValue": ""
                },
                {
                    "name": "orientation",
                    "dataType": "string",
                    "ts_dataType": "enum:LayoutOrientation",
                    "optional": "true",
                    "displayName": "Orientation",
                    "defaultValue": ""
                },
                {
                    "name": "pinnedHeight",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "PinnedHeight",
                    "defaultValue": ""
                },
                {
                    "name": "pinnedWidth",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "PinnedWidth",
                    "defaultValue": ""
                },
                {
                    "name": "selected",
                    "dataType": "boolean",
                    "optional": "true",
                    "displayName": "Selected",
                    "defaultValue": ""
                },
                {
                    "name": "title",
                    "dataType": "string",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Title",
                    "defaultValue": ""
                },
                {
                    "name": "unpinnedHeight",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "UnpinnedHeight",
                    "defaultValue": ""
                },
                {
                    "name": "unpinnedWidth",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "UnpinnedWidth",
                    "defaultValue": ""
                },
                {
                    "name": "width",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "optional": "true",
                    "displayName": "Width",
                    "defaultValue": ""
                },
                {
                    "name": "items",
                    "dataType": "Array",
                    "ts_dataType": "Array<Layout>",
                    "optional": "true",
                    "displayName": "Items",
                    "defaultValue": ""
                }
            ]
        }
    ],
    "exampleElementsInit": {
        "layout": "layout"
    },
    "exampleInit": {
        "width": "800",
        "height": "600",
        "layout": "layout"
    },
    "exampledInitExtraData": {
        "properties": "layout: [{\n          type: 'layoutGroup',\n          orientation: 'horizontal',\n          items: [{\n            type: 'autoHideGroup',\n            alignment: 'left',\n            width: 80,\n            unpinnedWidth: 200,\n            items: [{\n              type: 'layoutPanel',\n              title: 'Toolbox',\n              contentContainer: 'ToolboxPanel'\n            }, {\n              type: 'layoutPanel',\n              title: 'Help',\n              contentContainer: 'HelpPanel'\n            }]\n          }, {\n            type: 'layoutGroup',\n            orientation: 'vertical',\n            width: 500,\n            items: [{\n              type: 'documentGroup',\n              height: 400,\n              minHeight: 200,\n              items: [{\n                type: 'documentPanel',\n                title: 'Document 1',\n                contentContainer: 'Document1Panel'\n              }, {\n                type: 'documentPanel',\n                title: 'Document 2',\n                contentContainer: 'Document2Panel'\n              }]\n            }, { \n              type: 'tabbedGroup',\n              height: 200,\n              pinnedHeight: 30,\n              items: [{\n                type: 'layoutPanel',\n                title: 'Error List',\n                contentContainer: 'ErrorListPanel'\n              }, {\n                type: 'layoutPanel',\n                title: 'Output',\n                contentContainer: 'OutputPanel',\n                selected: true\n              }]\n            }]\n          }, {\n            type: 'tabbedGroup',\n            width: 220,\n            minWidth: 200,\n            items: [{\n              type: 'layoutPanel',\n              title: 'Solution Explorer',\n              contentContainer: 'SolutionExplorerPanel'\n            }, {\n              type: 'layoutPanel',\n              title: 'Properties',\n              contentContainer: 'PropertiesPanel'\n            }]\n          }]\n        }]",
        "beforeCreate": "",
        "mounted": "",
        "methods": ""
    },
    "exampleExtraTemplate": "<div data-container=\"ToolboxPanel\">List of tools</div>\n    <div data-container=\"HelpPanel\"> Help topics </div>\n    <!--documentGroup-->\n    <div data-container=\"Document1Panel\"> Document 1 content </div>\n    <div data-container=\"Document2Panel\"> Document 2 content </div>\n    <!--bottom tabbedGroup-->\n    <div data-container=\"ErrorListPanel\"> List of errors </div>\n    <div data-container=\"OutputPanel\"> Output </div>\n    <!--right tabbedGroup-->\n    <div data-container=\"SolutionExplorerPanel\"> Solution structure </div>\n    <div data-container=\"PropertiesPanel\"> List of properties </div>",
    "properties": [
        {
            "name": "contextMenu",
            "defaultValue": "false",
            "description": "<P>Sets or gets wheter a custom context menu will appear when certain elements of the widget are right-clicked. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>contextMenu</CODE> property. </P>\n<PRE><CODE>$('#jqxLayout').jqxLayout({ contextMenu : true }); </CODE></PRE>\n\r\n<P>Get the <CODE>contextMenu</CODE> property. </P>\n<PRE><CODE>var contextMenu = $('#jqxLayout').jqxLayout('contextMenu'); </CODE></PRE>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-contextmenu-property",
            "exampleDescription": "contextMenu is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "contextMenu": "true"
            }
        },
        {
            "name": "height",
            "defaultValue": "null",
            "description": "<P>Sets or gets the layout's height. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$(\"#jqxLayout\").jqxLayout({ height: 800 });</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxLayout').jqxLayout('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-height-property",
            "exampleDescription": "height is set to 800",
            "dataType": "string | number",
            "ts_dataType": "string | number"
        },
        {
            "name": "layout",
            "defaultValue": "[]",
            "description": "<P>Sets or gets the layout. This property determines the position of the layout elements and their characteristics. The layout array always contains one root item of type 'layoutGroup'. </P>\n\r\n<P>Each object in the layout array can have the following properties, with <SPAN style=\"TEXT-DECORATION: underline\">some restrictions based on the type </SPAN>: </P>\n\r\n<UL><LI><STRONG>type</STRONG>. Possible values: \r\n<UL>\r\n<LI>'layoutGroup' - container for other groups. It has no visual features. The root item is always of this type. \r\n<LI>'tabbedGroup' - a group that contains layoutPanels. It is represented by a jqxWindow-like panel with a bottom-aligned jqxRibbon inside. \r\n<LI>'documentGroup' - a group that contains documentPanels. It is represented by a top-aligned jqxRibbon. \r\n<LI>'autoHideGroup' - a group that contains layoutPanels. It is represented by a jqxRibbon with <CODE>mode: 'popup'</CODE>. Each ribbon item has a jqxWindow-like panel in its content. This group has to be either the first or the last child item of its parent layoutGroup. \r\n<LI>'layoutPanel' - a panel that can be inserted in a tabbedGroup or autoHideGroup. When it is in a tabbedGroup it is represented by a ribbon item and in an autoHideGroup - by a jqxWindow-like panel inside a ribbon item. \r\n<LI>'documentPanel' - a panel that can be inserted in a documentGroup. It is represented by a ribbon item. </LI></UL>\r\n<LI><STRONG>alignment</STRONG> - sets the alignment of an autoHideGroup. Possible values: \r\n<UL>\r\n<LI>'left' \r\n<LI>'right' \r\n<LI>'top' \r\n<LI>'bottom' </LI></UL>\r\n<LI><STRONG>allowClose</STRONG> - applicable to tabbedGroups, layoutPanels and documentPanels. If set to <EM style=\"DISPLAY: none\" jQuery111105969103251107508=\"4\">true</EM>, the group/panel can be closed. \r\n<LI><STRONG>allowPin</STRONG> - applicable only to tabbedGroups. If set to <EM style=\"DISPLAY: none\" jQuery111105969103251107508=\"5\">false</EM>, the group cannot be pinned. \r\n<LI><STRONG>allowUnpin</STRONG> - applicable only to autoHideGroups. If set to <EM style=\"DISPLAY: none\" jQuery111105969103251107508=\"6\">false</EM>, the group cannot be unpinned. \r\n<LI><STRONG>contentContainer</STRONG> - indicates which HTML element has the content of the panel. The required value is the value of an existing HTML element's data-container attribute. N/A to groups. \r\n<LI><STRONG>height</STRONG> - sets the height of a group (N/A to panels). Used only if the parent group's orientation is 'vertical'. The heights of all such groups have to be set either in pixels or percents (not a mix of both). \r\n<LI><STRONG>initContent</STRONG> - a callback function to be called when a panel is opened for the first time. Useful for initializing widgets in panels. N/A to groups. \r\n<LI><STRONG>minHeight</STRONG> - sets the minimumn height (in pixels) of a group which is vertically aligned within its parent group. Disregards the value of the <STRONG>minGroupHeight</STRONG> property. \r\n<LI><STRONG>minWidth</STRONG> - sets the minimumn width (in pixels) of a group which is horizontally aligned within its parent group. Disregards the value of the <STRONG>minGroupWidth </STRONG>property. \r\n<LI><STRONG>orientation</STRONG> - orients child items either horizontally or vertically. Applicable only to layoutGroups. Possible values: \r\n<UL>\r\n<LI>'horizontal' \r\n<LI>'vertical' </LI></UL>\r\n<LI><STRONG>pinnedHeight</STRONG> - sets what the height of a tabbedGroup will be after it is pinned. \r\n<LI><STRONG>pinnedWidth</STRONG> - sets what the width of a tabbedGroup will be after it is pinned. \r\n<LI><STRONG>selected</STRONG> - sets whether a panel is initially selected. N/A to groups. \r\n<LI><STRONG>title</STRONG> - sets the title of a panel. Represented by the corresponding ribbon item's title. N/A to groups. \r\n<LI><STRONG>unpinnedHeight</STRONG> - sets what the height of an autoHideGroup will be after it is unpinned. \r\n<LI><STRONG>unpinnedWidth</STRONG> - sets what the width of an autoHideGroup will be after it is unpinned. \r\n<LI><STRONG>width</STRONG> - sets the width of a group (N/A to panels). Used only if the parent group's orientation is 'horizontal'. The widths of all such groups have to be set either in pixels or percents (not a mix of both). \r\n<LI><STRONG>items</STRONG> - an array of item objects with the fields described above. N/A to panels. </LI></UL>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>layout</CODE> property. </P>\n<PRE><CODE>var layout = [{\r\n    type: 'layoutGroup',\r\n    orientation: 'horizontal',\r\n    items: [{\r\n        type: 'autoHideGroup',\r\n        alignment: 'left',\r\n        width: 80,\r\n        unpinnedWidth: 200,\r\n        items: [{\r\n            type: 'layoutPanel',\r\n            title: 'Toolbox',\r\n            contentContainer: 'ToolboxPanel'\r\n        }, {\r\n            type: 'layoutPanel',\r\n            title: 'Help',\r\n            contentContainer: 'HelpPanel'\r\n        }]\r\n    }, {\r\n        type: 'layoutGroup',\r\n        orientation: 'vertical',\r\n        width: 500,\r\n        items: [{\r\n            type: 'documentGroup',\r\n            height: 400,\r\n            minHeight: 200,\r\n            items: [{\r\n                type: 'documentPanel',\r\n                title: 'Document 1',\r\n                contentContainer: 'Document1Panel'\r\n            }, {\r\n                type: 'documentPanel',\r\n                title: 'Document 2',\r\n                contentContainer: 'Document2Panel'\r\n            }]\r\n        }, {\r\n            type: 'tabbedGroup',\r\n            height: 200,\r\n            pinnedHeight: 30,\r\n            items: [{\r\n                type: 'layoutPanel',\r\n                title: 'Error List',\r\n                contentContainer: 'ErrorListPanel'\r\n            }, {\r\n                type: 'layoutPanel',\r\n                title: 'Output',\r\n                contentContainer: 'OutputPanel',\r\n                selected: true\r\n            }]\r\n        }]\r\n    }]\r\n}];\r\n$('#jqxLayout').jqxLayout({ width: 580, height: 600, layout: layout });\r\n</CODE></PRE>\n\r\n<P>Get the <CODE>layout</CODE> property. </P>\n<PRE><CODE>var layout = $('#jqxLayout').jqxLayout('layout');</CODE></PRE>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-layout-property",
            "exampleDescription": "layout is set to a custom array",
            "dataType": "Array",
            "ts_dataType": "Array<Layout>"
        },
        {
            "name": "minGroupHeight",
            "defaultValue": "100",
            "description": "<P>Sets the default minimumn height for groups which are vertically aligned within their parent group. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>minGroupHeight</CODE> property. </P>\n<PRE><CODE>$('#jqxLayout').jqxLayout({ minGroupHeight: 200 }); </CODE></PRE>\n\r\n<P>Get the <CODE>minGroupHeight</CODE> property. </P>\n<PRE><CODE>var minGroupHeight = $('#jqxLayout').jqxLayout('minGroupHeight');</CODE></PRE>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-mingroupheight-property",
            "exampleDescription": "minGroupHeight is set to 200",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "minGroupHeight": "200"
            }
        },
        {
            "name": "minGroupWidth",
            "defaultValue": "100",
            "description": "<P>Sets the default minimumn width for groups which are horizontally aligned within their parent group. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>minGroupWidth</CODE> property. </P>\n<PRE><CODE>$('#jqxLayout').jqxLayout({ minGroupWidth: 150 });</CODE></PRE>\n\r\n<P>Get the <CODE>minGroupWidth</CODE> property. </P>\n<PRE><CODE>var minGroupWidth = $('#jqxLayout').jqxLayout('minGroupWidth');</CODE></PRE>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-mingroupwidth-property",
            "exampleDescription": "minGroupWidth is set to 150",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "minGroupWidth": "150"
            }
        },
        {
            "name": "resizable",
            "defaultValue": "true",
            "description": "<P>Sets or gets wheter panels can be dynamically resized. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>resizable</CODE> property. </P>\n<PRE><CODE>$('#jqxLayout').jqxLayout({ resizable : false }); </CODE></PRE>\n\r\n<P>Get the <CODE>resizable</CODE> property. </P>\n<PRE><CODE>var resizable = $('#jqxLayout').jqxLayout('resizable'); </CODE></PRE>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-resizable-property",
            "exampleDescription": "resizable is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "resizable": "false"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts. </P>\n\r\n<H4>Code example </H4>\n\r\n<P>Set the <CODE>rtl</CODE> property. </P>\n<PRE><CODE>$('#jqxLayout').jqxLayout({ rtl : true }); </CODE></PRE>\n\r\n<P>Get the <CODE>rtl</CODE> property. </P>\n<PRE><CODE>var rtl = $('#jqxLayout').jqxLayout('rtl'); </CODE></PRE>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-rtl-property",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n                                                                                        <PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;</CODE></PRE>\r\n                                </CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-theme-property",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "width",
            "defaultValue": "null",
            "description": "<P>Sets or gets the layout's width. </P>\n\r\n<H4>Code examples </H4>\n\r\n<P>Set the <CODE>width</CODE> property. </P>\n<PRE><CODE>$(\"#jqxLayout\").jqxLayout({ width: 800 });</CODE></PRE>\n\r\n<P>Get the <CODE>width</CODE> property. </P>\n<PRE><CODE>var width = $('#jqxLayout').jqxLayout('width');</CODE></PRE>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-width-property",
            "exampleDescription": "width is set to 800",
            "dataType": "string | number",
            "ts_dataType": "string | number"
        }
    ],
    "events": [
        {
            "name": "pin",
            "description": "<P>This event is triggered when a group has been pinned. </P>\n<H4>Code examples </H4>\n<P>Bind to the <CODE>pin</CODE> event by type: jqxLayout. </P>",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-pin-event",
            "exampleDescription": "Bind to the pin event by type: jqxLayout.",
            "example": "<PRE><CODE>$('#jqxLayout').on('pin', function (event) {\r\n    var pinnedItem = event.args.item;\r\n    // Some code here.\r\n}); </CODE></PRE>"
        },
        {
            "name": "resize",
            "description": "<P>This event is triggered when a group has been resized (when the group has been resized with the mouse or when an adjacent group has been pinned, unpinned or closed). </P>\n<H4>Code examples </H4>\n<P>Bind to the <CODE>resize</CODE> event by type: jqxLayout. </P>",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-resize-event",
            "exampleDescription": "Bind to the resize event by type: jqxLayout.",
            "example": "<PRE><CODE>$('#jqxLayout').on('resize', function (event) {\r\n    var resizedItem = event.args.item;\r\n    // Some code here.\r\n});</CODE></PRE>"
        },
        {
            "name": "unpin",
            "description": "<P>This event is triggered when a group has been unpinned. </P>\n<H4>Code examples </H4>\n<P>Bind to the <CODE>unpin</CODE> event by type: jqxLayout. </P>",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-unpin-event",
            "exampleDescription": "Bind to the unpin event by type: jqxLayout.",
            "example": "<PRE><CODE>$('#jqxLayout').on('unpin', function (event) {\r\n    var unpinnedItem = event.args.item;\r\n    // Some code here.\r\n});</CODE></PRE>"
        }
    ],
    "methods": [
        {
            "name": "destroy",
            "description": "<P>Destroys the widget. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxLayout').jqxLayout('destroy'); </CODE></PRE>",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-destroy-method",
            "exampleDescription": "destroy the widget",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "loadLayout",
            "description": "<P>Loads a previously saved layout. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>loadLayout</CODE> method. </P>\n<PRE><CODE>// @param layout - an object returned by the method saveLayout\r\n$('#jqxLayout').jqxLayout('loadLayout', layout);</CODE></PRE>",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-loadlayout-method",
            "exampleDescription": "load a previously saved layout",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "Layout",
                    "dataType": "object",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxLayout ref=\"myLayout\"\n          :width=\"800\" :height=\"600\" :layout=\"layout\">\n      &lt;div data-container=\"ToolboxPanel\">List of tools&lt;/div>\n      &lt;div data-container=\"HelpPanel\"> Help topics &lt;/div>\n      &lt;!--documentGroup-->\n      &lt;div data-container=\"Document1Panel\"> Document 1 content &lt;/div>\n      &lt;div data-container=\"Document2Panel\"> Document 2 content &lt;/div>\n      &lt;!--bottom tabbedGroup-->\n      &lt;div data-container=\"ErrorListPanel\"> List of errors &lt;/div>\n      &lt;div data-container=\"OutputPanel\"> Output &lt;/div>\n      &lt;!--right tabbedGroup-->\n      &lt;div data-container=\"SolutionExplorerPanel\"> Solution structure &lt;/div>\n      &lt;div data-container=\"PropertiesPanel\"> List of properties &lt;/div>\n    &lt;/JqxLayout>\n    &lt;JqxButton @click=\"saveLayoutBtnOnClick()\">Save Layout&lt;/JqxButton>\n    &lt;JqxButton ref=\"myLoadLayoutBtn\" @click=\"loadLayoutBtnOnClick()\" :disabled=\"true\">Load Layout&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxLayout from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlayout.vue';\n  import JqxButton from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue\";\n\n  export default {\n    components: {\n      JqxLayout,\n      JqxButton\n    },\n    data: function () {\n      return {\n        layout: [{\n          type: 'layoutGroup',\n          orientation: 'horizontal',\n          items: [{\n            type: 'autoHideGroup',\n            alignment: 'left',\n            width: 80,\n            unpinnedWidth: 200,\n            items: [{\n              type: 'layoutPanel',\n              title: 'Toolbox',\n              contentContainer: 'ToolboxPanel'\n            }, {\n              type: 'layoutPanel',\n              title: 'Help',\n              contentContainer: 'HelpPanel'\n            }]\n          }, {\n            type: 'layoutGroup',\n            orientation: 'vertical',\n            width: 500,\n            items: [{\n              type: 'documentGroup',\n              height: 400,\n              minHeight: 200,\n              items: [{\n                type: 'documentPanel',\n                title: 'Document 1',\n                contentContainer: 'Document1Panel'\n              }, {\n                type: 'documentPanel',\n                title: 'Document 2',\n                contentContainer: 'Document2Panel'\n              }]\n            }, {\n              type: 'tabbedGroup',\n              height: 200,\n              pinnedHeight: 30,\n              items: [{\n                type: 'layoutPanel',\n                title: 'Error List',\n                contentContainer: 'ErrorListPanel'\n              }, {\n                type: 'layoutPanel',\n                title: 'Output',\n                contentContainer: 'OutputPanel',\n                selected: true\n              }]\n            }]\n          }, {\n            type: 'tabbedGroup',\n            width: 220,\n            minWidth: 200,\n            items: [{\n              type: 'layoutPanel',\n              title: 'Solution Explorer',\n              contentContainer: 'SolutionExplorerPanel'\n            }, {\n              type: 'layoutPanel',\n              title: 'Properties',\n              contentContainer: 'PropertiesPanel'\n            }]\n          }]\n        }]\n      }\n    },\n    methods: {\n      saveLayoutBtnOnClick: function () {\n        this.savedLayout = this.$refs.myLayout.saveLayout();\n        this.$refs.myLoadLayoutBtn.disabled = false;\n      },\n      loadLayoutBtnOnClick: function () {\n        this.$refs.myLayout.loadLayout(this.savedLayout);\n        this.$refs.myLoadLayoutBtn.disabled = true;\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    width: 100px;\n    display: inline-block;\n    margin-top: 20px;\n    margin-right: 5px;\n  }\n&lt;/style>"
            }
        },
        {
            "name": "refresh",
            "description": "<P>Refreshes the widget. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>refresh</CODE> method. </P>\n<PRE><CODE>$('#jqxLayout').jqxLayout('refresh');</CODE></PRE>",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-refresh-method",
            "exampleDescription": "refresh the widget",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "render",
            "description": "<P>Renders the widget. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>render</CODE> method. </P>\n<PRE><CODE>$('#jqxLayout').jqxLayout('render');</CODE></PRE>",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-render-method",
            "exampleDescription": "render the widget",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "saveLayout",
            "description": "<P>Saves the current layout of the widget. The object returned by this method can be passed to the method <STRONG>loadLayout</STRONG>. </P>\n<H4>Code examples </H4>\n<P>Invoke the <CODE>saveLayout</CODE> method. </P>\n<PRE><CODE>var layout = $('#jqxLayout').jqxLayout('saveLayout');</CODE></PRE>",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxlayout-savelayout-method",
            "exampleDescription": "saves the widget's layout",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "customExample": {
                "customCode": "&lt;template>\n  &lt;div>\n    &lt;JqxLayout ref=\"myLayout\"\n          :width=\"800\" :height=\"600\" :layout=\"layout\">\n      &lt;div data-container=\"ToolboxPanel\">List of tools&lt;/div>\n      &lt;div data-container=\"HelpPanel\"> Help topics &lt;/div>\n      &lt;!--documentGroup-->\n      &lt;div data-container=\"Document1Panel\"> Document 1 content &lt;/div>\n      &lt;div data-container=\"Document2Panel\"> Document 2 content &lt;/div>\n      &lt;!--bottom tabbedGroup-->\n      &lt;div data-container=\"ErrorListPanel\"> List of errors &lt;/div>\n      &lt;div data-container=\"OutputPanel\"> Output &lt;/div>\n      &lt;!--right tabbedGroup-->\n      &lt;div data-container=\"SolutionExplorerPanel\"> Solution structure &lt;/div>\n      &lt;div data-container=\"PropertiesPanel\"> List of properties &lt;/div>\n    &lt;/JqxLayout>\n    &lt;JqxButton @click=\"saveLayoutBtnOnClick()\">Save Layout&lt;/JqxButton>\n    &lt;JqxButton ref=\"myLoadLayoutBtn\" @click=\"loadLayoutBtnOnClick()\" :disabled=\"true\">Load Layout&lt;/JqxButton>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\n  import JqxLayout from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxlayout.vue';\n  import JqxButton from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue\";\n\n  export default {\n    components: {\n      JqxLayout,\n      JqxButton\n    },\n    data: function () {\n      return {\n        layout: [{\n          type: 'layoutGroup',\n          orientation: 'horizontal',\n          items: [{\n            type: 'autoHideGroup',\n            alignment: 'left',\n            width: 80,\n            unpinnedWidth: 200,\n            items: [{\n              type: 'layoutPanel',\n              title: 'Toolbox',\n              contentContainer: 'ToolboxPanel'\n            }, {\n              type: 'layoutPanel',\n              title: 'Help',\n              contentContainer: 'HelpPanel'\n            }]\n          }, {\n            type: 'layoutGroup',\n            orientation: 'vertical',\n            width: 500,\n            items: [{\n              type: 'documentGroup',\n              height: 400,\n              minHeight: 200,\n              items: [{\n                type: 'documentPanel',\n                title: 'Document 1',\n                contentContainer: 'Document1Panel'\n              }, {\n                type: 'documentPanel',\n                title: 'Document 2',\n                contentContainer: 'Document2Panel'\n              }]\n            }, {\n              type: 'tabbedGroup',\n              height: 200,\n              pinnedHeight: 30,\n              items: [{\n                type: 'layoutPanel',\n                title: 'Error List',\n                contentContainer: 'ErrorListPanel'\n              }, {\n                type: 'layoutPanel',\n                title: 'Output',\n                contentContainer: 'OutputPanel',\n                selected: true\n              }]\n            }]\n          }, {\n            type: 'tabbedGroup',\n            width: 220,\n            minWidth: 200,\n            items: [{\n              type: 'layoutPanel',\n              title: 'Solution Explorer',\n              contentContainer: 'SolutionExplorerPanel'\n            }, {\n              type: 'layoutPanel',\n              title: 'Properties',\n              contentContainer: 'PropertiesPanel'\n            }]\n          }]\n        }]\n      }\n    },\n    methods: {\n      saveLayoutBtnOnClick: function () {\n        this.savedLayout = this.$refs.myLayout.saveLayout();\n        this.$refs.myLoadLayoutBtn.disabled = false;\n      },\n      loadLayoutBtnOnClick: function () {\n        this.$refs.myLayout.loadLayout(this.savedLayout);\n        this.$refs.myLoadLayoutBtn.disabled = true;\n      }\n    }\n  }\n&lt;/script>\n&lt;style>\n  .jqx-button {\n    width: 100px;\n    display: inline-block;\n    margin-top: 20px;\n    margin-right: 5px;\n  }\n&lt;/style>"
            }
        }
    ]
}