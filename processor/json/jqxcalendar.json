{
    "widget": {
        "name": "jqxCalendar",
        "description": "Enables the user to select a date using a visual monthly calendar display. ",
        "angular2": {
            "name": "jqxCalendarComponent",
            "selector": "jqxCalendar"
        }
    },
    "dataTypes": [
        {
            "name": "CalendarDayNameFormat",
            "ts_dataType": "enum",
            "enumOptions": [ "default", "shortest", "firstTwoLetters", "firstLetter", "full" ]
        },
        {
            "name": "CalendarSelectionMode",
            "ts_dataType": "enum",
            "enumOptions": [ "none", "default", "range" ]
        },
        {
            "name": "CalendarTitleFormat",
            "ts_dataType": "enum",
            "enumOptions": [ "d", "dd", "ddd", "dddd", "h", "hh", "H", "HH", "m", "mm", "M", "MM", "MMM", "MMMM", "s", "ss", "t", "tt", "y", "yy", "yyy", "yyyy" ]
        }
    ],
    "exampleInit": {
        "width": "200",
        "height": "200"
    },
    "properties": [
        {
            "name": "backText",
            "defaultValue": "Back",
            "description": "<P>Sets or gets the tooltip text displayed when the mouse cursor is over the back navigation button. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({backText: \"Back\" });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/DjuAs/",
            "exampleDescription": "backText is set to 'Back'",
            "dataType": "string",
            "exampleInit": {
                "backText": "Back"
            }
        },
        {
            "name": "columnHeaderHeight",
            "defaultValue": "20",
            "description": "<P>Sets or gets the Calendar colomn header's height. In the column header are displayed the calendar day names. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ columnHeaderHeight: 30 });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/8jvtK/",
            "exampleDescription": "columnHeaderHeight is set to 50",
            "dataType": "number",
            "exampleInit": {
                "columnHeaderHeight": "50"
            }
        },
        {
            "name": "clearString",
            "defaultValue": "'Clear'",
            "description": "<P>Sets or gets the 'Clear' string displayed when the 'showFooter' property is true. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ clearString: 'Clear' });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/JjDC8/",
            "exampleDescription": "clearString is set to 'Clear'",
            "dataType": "string",
            "exampleInit": {
                "clearString": "Clear"
            }
        },
        {
            "name": "culture",
            "defaultValue": "default",
            "description": "<P>Sets or gets the jqxCalendar's culture. The culture settings are contained within a file with the language code appended to the name, e.g. jquery.glob.de-DE.js for German. To set the culture, you need to include the jquery.glob.de-DE.js and set the culture property to the culture's name, e.g. 'de-DE'. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({culture: 'en-US' });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/jbaEG/",
            "exampleDescription": "culture is set to 'de-DE'",
            "dataType": "string",
            "exampleInit": {
                "culture": "de-DE"
            }
        },
        {
            "name": "dayNameFormat",
            "defaultValue": "'firstTwoLetters'",
            "description": "<P>Sets or gets the name format of days of the week. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'default'</CODE></PRE>\n<PRE><CODE>'shortest'</CODE></PRE>\n<PRE><CODE>'firstTwoLetters'</CODE></PRE>\n<PRE><CODE>'firstLetter'</CODE></PRE>\n<PRE><CODE>'full'</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ dayNameFormat : 'firstTwoLetters'});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/9NjzR/",
            "exampleDescription": "dayNameFormat is set to 'firstTwoLetters'",
            "dataType": "string",
            "ts_dataType": "enum:CalendarDayNameFormat",
            "exampleInit": {
                "dayNameFormat": "firstTwoLetters"
            }
        },
        {
            "name": "disabled",
            "defaultValue": "false",
            "description": "<P>Disables (true) or enables (false) the calendar. Can be set when initialising (first creating) the calendar. </P>",
            "example": "<pre><CODE>$(\"#jqxCalendar\").jqxCalendar({ disabled: true });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/uW4uF/",
            "exampleDescription": "disabled is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "disabled": "true"
            }
        },
        {
            "name": "enableWeekend",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether weekend persists its view state. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ enableWeekend: true });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Nb3GC/",
            "exampleDescription": "enableWeekend is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "enableWeekend": "true"
            }
        },
        {
            "name": "enableViews",
            "defaultValue": "true",
            "description": "<P>Determines whether switching between month, year and decade views is enabled. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ enableViews: false });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/KqdHh/",
            "exampleDescription": "enableViews is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "enableViews": "false"
            }
        },
        {
            "name": "enableOtherMonthDays",
            "defaultValue": "true",
            "description": "<P>Sets or gets a value indicating whether the other month days are enabled. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ enableOtherMonthDays: false });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Pjzqd/",
            "exampleDescription": "enableOtherMonthDays is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "enableOtherMonthDays": "false"
            }
        },
        {
            "name": "enableFastNavigation",
            "defaultValue": "true",
            "description": "<P>Sets or gets a value indicating whether the fast navigation is enabled. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ enableFastNavigation: false });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/VHCdU/",
            "exampleDescription": "enableFastNavigation is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "enableFastNavigation": "false"
            }
        },
        {
            "name": "enableHover",
            "defaultValue": "true",
            "description": "<P>Sets or gets a value indicating whether the hover state is enabled. The hover state is activated when the mouse cursor is over a calendar cell. The hover state is automatically disabled when the calendar is displayed in touch devices. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({enableHover: false });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/2StuR/",
            "exampleDescription": "enableHover is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "enableHover": "false"
            }
        },
        {
            "name": "enableAutoNavigation",
            "defaultValue": "true",
            "description": "<P>Sets or gets a value indicating whether the auto navigation is enabled. When this property is true, click on other month date will automatically navigate to the previous or next month. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({enableAutoNavigation: false });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Qnu2m/",
            "exampleDescription": "enableAutoNavigation is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "enableAutoNavigation": "false"
            }
        },
        {
            "name": "enableTooltips",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether the tool tips are enabled. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({enableToolTips: false });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4KJ4x/",
            "exampleDescription": "enableTooltips is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "enableTooltips": "true"
            }
        },
        {
            "name": "forwardText",
            "defaultValue": "Forward",
            "description": "<P>Sets or gets the tooltip text displayed when the mouse cursor is over the forward navigation button. EnableTooltips property should be set to true. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({forwardText: \"Forward\" });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/q549T/",
            "exampleDescription": "forwardText is set to 'Forward'",
            "dataType": "string",
            "exampleInit": {
                "forwardText": "Forward"
            }
        },
        {
            "name": "firstDayOfWeek",
            "defaultValue": "0",
            "description": "<P>Sets or gets which day to display in the first day column. By default the calendar displays 'Sunday' as first day. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ firstDayOfWeek: 1 });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tBuG2/",
            "exampleDescription": "firstDayOfWeek is set to 3",
            "dataType": "number",
            "exampleInit": {
                "firstDayOfWeek": "3"
            }
        },
        {
            "name": "height",
            "defaultValue": "null",
            "description": "<P>Sets or gets the height of the Calendar. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({height: '200px' });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/tBuG2/",
            "exampleDescription": "height is set to '200px'",
            "dataType": "number",
            "ts_dataType": "string | number"
        },
        {
            "name": "min",
            "defaultValue": "1900, 1, 1",
            "description": "<P>Represents the minimum navigation date. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar('setMinDate', new Date(2000, 0, 1));</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/weSTQ/",
            "exampleDescription": "min is set to (2013, 0, 1)",
            "dataType": "Date",
            "ts_dataType": "any",
            "exampleInit": {
                "min": "min",
                "max": "max",
                "exampleData": "moreThanOnePropsExample; new Date(2018, 0, 1); new Date(2019, 0, 1)"
            }
        },
        {
            "name": "max",
            "defaultValue": "2100, 1, 1",
            "description": "<P>Represents the maximum navigation date. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar('setMaxDate', new Date(2012, 0, 1));</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/PeWL3/",
            "exampleDescription": "max is set to (2017, 0, 1)",
            "dataType": "Date",
            "ts_dataType": "any",
            "exampleInit": {
                "min": "min",
                "max": "max",
                "exampleData": "moreThanOnePropsExample; new Date(2018, 0, 1); new Date(2019, 0, 1)"
            }
        },
        {
            "name": "navigationDelay",
            "defaultValue": "400",
            "description": "<P>Determines the animation delay between switching views. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ navigationDelay:800});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/XwHcb/",
            "exampleDescription": "navigationDelay is set to 2000",
            "dataType": "number",
            "exampleInit": {
                "navigationDelay": "2000"
            }
        },
        {
            "name": "rowHeaderWidth",
            "defaultValue": "25",
            "description": "<P>Sets or gets the row header width. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ rowHeaderWidth:30});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/dd3HX/",
            "exampleDescription": "rowHeaderWidth is set to 30",
            "dataType": "number",
            "ts_dataType": "number | string",
            "exampleInit": {
                "rowHeaderWidth": "30"
            }
        },
        {
            "name": "readOnly",
            "defaultValue": "false",
            "description": "<P>Sets or gets the calendar in read only state. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({readOnly: true });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/3ncWN/",
            "exampleDescription": "readOnly is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "readOnly": "true"
            }
        },
        {
            "name": "restrictedDates",
            "defaultValue": "[]",
            "description": "<P>Sets or gets the calendar's restricted dates. These are dates which cannot be clicked. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({restrictedDates: dates });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/L8cn5zyf/",
            "exampleDescription": "restrictedDates is set to an array of dates",
            "dataType": "Array",
            "ts_dataType": "Array<Date>",
            "aspDataType": "List<DateTime>",
            "exampleInit": {
                "restrictedDates": "restrictedDates",
                "exampleData": "[new Date()] // Today's Date is Restricted"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts.</P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({rtl : true}); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/MSn6h/",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "stepMonths",
            "defaultValue": "1",
            "description": "<P>Represents the calendar`s navigation step when the left or right navigation button is clicked. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ stepMonths: 2});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/teN8U/",
            "exampleDescription": "stepMonths is set to 3",
            "dataType": "number",
            "exampleInit": {
                "stepMonths": "3"
            }
        },
        {
            "name": "showWeekNumbers",
            "defaultValue": "true",
            "description": "<P>Sets or gets a value whether the week`s numbers are displayed. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ showWeekNumbers: false });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/c2Hcq/",
            "exampleDescription": "showWeekNumbers is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "showWeekNumbers": "true"
            }
        },
        {
            "name": "showDayNames",
            "defaultValue": "true",
            "description": "<P>Sets or gets a value whether the day names are displayed. By default, the day names are displayed. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ showDayNames: false });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FNQ77/",
            "exampleDescription": "showDayNames is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showDayNames": "false"
            }
        },
        {
            "name": "showOtherMonthDays",
            "defaultValue": "true",
            "description": "<P>Sets or gets a value whether the other month days are displayed. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ showOtherMonthDays: false });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/j7qHP/",
            "exampleDescription": "showOtherMonthDays is set to false",
            "dataType": "boolean",
            "exampleInit": {
                "showOtherMonthDays": "true"
            }
        },
        {
            "name": "showFooter",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether the calendar's footer is displayed. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ showFooter: true });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/5VtR7/",
            "exampleDescription": "showFooter is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "showFooter": "true"
            }
        },
        {
            "name": "selectionMode",
            "defaultValue": "'default'",
            "description": "<P>Sets or gets the selection mode. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'none'</CODE></PRE>\n<PRE><CODE>'default'</CODE></PRE>\n<PRE><CODE>'range'</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ selectionMode: 'range' });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/wsmJh/",
            "exampleDescription": "selectionMode is set to 'range'",
            "dataType": "string",
            "ts_dataType": "enum:CalendarSelectionMode",
            "exampleInit": {
                "selectionMode": "range"
            }
        },
        {
            "name": "specialDates",
            "defaultValue": "new Array()",
            "description": "<P>Sets or gets a special date to the Calendar. </P>",
            "example": "<pre><CODE>$(\"#jqxCalendar\").jqxCalendar('addSpecialDate', new Date(2011, 6, 29)); </CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/M79ze/",
            "exampleDescription": "specialDates is set to 5th/current month/current year",
            "dataType": "Array",
            "aspDataType": "List<SpecialDate>",
            "ts_dataType": "Array<any>",
            "exampleInit": {
                "specialDates": "specialDates",
                "exampleData": "[]\n        /*\n          Set the SpecialDates Property.\n          this.$refs.myCalendar.addSpecialDate(new Date());\n          Get the SpecialDates Property.\n          const specialDates = this.$refs.myCalendar.specialDates;\n        */"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n<PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;\r\n</CODE></PRE>\r\n</CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "http://jsfiddle.net/jqwidgets/4fXpX/",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "titleHeight",
            "defaultValue": "25",
            "description": "<P>Sets or gets the title height where the navigation arrows are displayed. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ titleHeight: 40});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/HYfVS/",
            "exampleDescription": "titleHeight is set to 50",
            "dataType": "number",
            "exampleInit": {
                "titleHeight": "50"
            }
        },
        {
            "name": "titleFormat",
            "defaultValue": "[\"MMMM yyyy\", \"yyyy\", \"yyyy\"]",
            "description": "<P>Sets or gets the title format for the title section. </P>\n<B>Possible Values:</B>\n<PRE><CODE>'d' - the day of the month</CODE></PRE>\n<PRE><CODE>'dd' - the day of the month</CODE></PRE>\n<PRE><CODE>'ddd' - the abbreviated name of the day of the week</CODE></PRE>\n<PRE><CODE>'dddd' - the full name of the day of the week</CODE></PRE>\n<PRE><CODE>'h' - the hour, using a 12-hour clock from 1 to 12</CODE></PRE>\n<PRE><CODE>'hh' - the hour, using a 12-hour clock from 01 to 12</CODE></PRE>\n<PRE><CODE>'H' - the hour, using a 24-hour clock from 0 to 23</CODE></PRE>\n<PRE><CODE>'HH' - the hour, using a 24-hour clock from 00 to 23</CODE></PRE>\n<PRE><CODE>'m'-the minute, from 0 through 59</CODE></PRE>\n<PRE><CODE>'mm' - the minutes,from 00 though59</CODE></PRE>\n<PRE><CODE>'M' - the month, from 1 through 12;</CODE></PRE>\n<PRE><CODE>'MM' - the month, from 01 through 12</CODE></PRE>\n<PRE><CODE>'MMM' - the abbreviated name of the month</CODE></PRE>\n<PRE><CODE>'MMMM' - the full name of the month</CODE></PRE>\n<PRE><CODE>'s' - the second, from 0 through 59</CODE></PRE>\n<PRE><CODE>'ss' - the second, from 00 through 59</CODE></PRE>\n<PRE><CODE>'t' - the first character of the AM/PM designator</CODE></PRE>\n<PRE><CODE>'tt' - the AM/PM designator</CODE></PRE>\n<PRE><CODE>'y' - the year, from 0 to 99</CODE></PRE>\n<PRE><CODE>'yy' - the year, from 00 to 99</CODE></PRE>\n<PRE><CODE>'yyy' - the year, with a minimum of three digits</CODE></PRE>\n<PRE><CODE>'yyyy' - the year as a four-digit number</CODE></PRE>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ titleFormat: \"MMMM yyyy\"});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/LNHN6/",
            "exampleDescription": "titleFormat is set to 'MMMM', 'yyyy', 'yyyy'",
            "dataType": "Array",
            "ts_dataType": "enum:CalendarTitleFormat",
            "exampleInit": {
                "titleFormat": "[\"MM yyyy\", \"yyyy\", \"yyyy\"]"
            }
        },
        {
            "name": "todayString",
            "defaultValue": "'Today'",
            "description": "<P>Sets or gets the 'Today' string displayed when the 'showFooter' property is true. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ todayString: 'Today' });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/PEmar/",
            "exampleDescription": "todayString is set to 'Today'",
            "dataType": "string",
            "exampleInit": {
                "todayString": "Today",
                "showFooter": "true"
            }
        },
        {
            "name": "value",
            "defaultValue": "Today's Date",
            "description": "<P>Sets or gets the Calendar's value. </P>",
            "example": "<pre><CODE>$(\"#jqxCalendar\").jqxCalendar({ value: $.jqx._jqxDateTimeInput.getDateTime(new Date(2011, 9, 1)) });</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/x8wqa/",
            "exampleDescription": "value is set to (2018, 9, 1)",
            "dataType": "Date",
            "ts_dataType": "Date",
            "exampleInit": {
                "value": "value",
                "exampleData": "new Date(2019, 0, 10)"
            }
        },
        {
            "name": "width",
            "defaultValue": "null",
            "description": "<P>Sets or gets the width of the Calendar. </P>",
            "example": "<pre><CODE>$('#jqxCalendar').jqxCalendar({ width: '250px'});</CODE></pre>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/X5bJp/",
            "exampleDescription": "width is set to '200px'",
            "dataType": "number",
            "ts_dataType": "string | number"
        }
    ],
    "events": [
        {
            "name": "backButtonClick",
            "description": "<P>This event is triggered when the calendar back navigation button is clicked. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/rXFe9/",
            "exampleDescription": "Bind to the backButtonClick event by type: jqxCalendar.",
            "example": "<PRE><CODE>$('#jqxCalendar').on('backButtonClick', function () { // Some code here. });\r\n                        </CODE></PRE>"
        },
        {
            "name": "change",
            "description": "<P>This event is triggered when the Calendar's selection is changed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FrNWD/",
            "exampleDescription": "Bind to the change event by type: jqxCalendar.",
            "example": "<PRE><CODE>$('#jqxCalendar').on('change', function (event)\r\n{ \r\n    var jsDate = event.args.date;\r\n    var type = event.args.type; // keyboard, mouse or null depending on how the date was selected.\r\n \r\n    // if the selectionMode is set to 'range'.\r\n    // var range = event.args.range;\r\n    // var rangeFrom = range.from;\r\n    // var rangeTo = range.to;\r\n    // additional properties.\r\n    // var view = event.args.view;\r\n    // var viewFrom = view.from;\r\n    // var viewTo = view.to;\r\n});\r\n                        </CODE></PRE>"
        },
        {
            "name": "nextButtonClick",
            "description": "<P>This event is triggered when the calendar next navigation button is clicked. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/QE2EJ/",
            "exampleDescription": "Bind to the nextButtonClick event by type: jqxCalendar.",
            "example": "<PRE><CODE>$('#jqxCalendar').on('nextButtonClick', function (event) { // Some code here. });\r\n                        </CODE></PRE>"
        },
        {
            "name": "viewChange",
            "description": "<P>This event is triggered when the Calendar's view is changed. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/eJ9RN/",
            "exampleDescription": "Bind to the viewChange event by type: jqxCalendar.",
            "example": "<PRE><CODE>$('#jqxCalendar').on('viewChange', function (event) \r\n{\r\n    var view = event.args.view;\r\n    var viewFrom = view.from;\r\n    var viewTo = view.to;\r\n});\r\n                        </CODE></PRE>"
        }
    ],
    "methods": [
        {
            "name": "clear",
            "description": "<P>Clears the selection. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>clear</CODE> method. </P>\n<PRE><CODE>$('#jqxCalendar').jqxCalendar('clear'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/62Jbn/",
            "exampleDescription": "clears the selection in the jqxCalendar.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "destroy",
            "description": "<P>Destroys the widget. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>destroy</CODE> method. </P>\n<PRE><CODE>$('#jqxCalendar').jqxCalendar('destroy'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Mm45h/",
            "exampleDescription": "destroys the jqxCalendar.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "focus",
            "description": "<P>Focuses the Calendar. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/GCuD3/",
            "exampleDescription": "focus the jqxCalendar.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "addSpecialDate",
            "description": "",
            "exampleURL": "=",
            "exampleDescription": "",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "date",
                    "dataType": "Date",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "specialDateClass",
                    "dataType": "string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "text",
                    "dataType": "string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "new Date()", "''", "'Special Date'" ],
                "enableTooltips": "true"
            }
        },
        {
            "name": "getMinDate",
            "description": "<P>When the getMinDate method is called, the user gets the lowest navigation date set to the Calendar. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/GT4Tc/",
            "exampleDescription": "gets the minimum date of the jqxCalendar.",
            "returnDataType": "Date",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getMaxDate",
            "description": "<P>When the getMaxDate method is called, the user gets the hightest navigation date set to the Calendar. The retuned value is a JavaScript Date object. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/Xg2GT/",
            "exampleDescription": "gets the maximum date of the jqxCalendar.",
            "returnDataType": "Date",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getDate",
            "description": "<P>When the getDate method is called, the user gets the current month displayed in the Calendar.The returned value is a JavaScript Date object. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/FyMWy/",
            "exampleDescription": "gets the date of the jqxCalendar.",
            "returnDataType": "Date",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "getRange",
            "description": "<P>Gets the selection range when the selectionMode is set to 'range'. The returned value is an object with \"from\" and \"to\" fields. Each of these is a JavaScript Date object. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/UN5Nv/",
            "exampleDescription": "gets the range values of the jqxCalendar.",
            "returnDataType": "object",
            "ts_returnDataType": "any",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [],
                "extraData": {
                    "selectionMode": "'range'"
                }
            },
            "customExample": {
                "customCode": "&lt;template>\n  &lt;JqxCalendar ref=\"myCalendar\"\n    :width=\"200\" :height=\"200\" :selectionMode=\"'range'\"\n  />\n&lt;/template>\n \n&lt;script>\n  import JqxCalendar from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxcalendar.vue';\n \n  export default {\n    components: {\n      JqxCalendar\n    },\n    mounted: function () {\n      this.$refs.myCalendar.setRange(new Date(2017, 9, 20),new Date(2017, 9, 22));\n      const value = this.$refs.myCalendar.getRange();\n      alert(JSON.stringify(value));\n    }\n  }\n&lt;/script>"
            }
        },
        {
            "name": "navigateForward",
            "description": "<P>When the navigateForward method is called, the calendar navigates forward with a specific month step (by default 1). </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/QJuTK/",
            "exampleDescription": "navigates forward with 5 months in jqxCalendar.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "months",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "navigateBackward",
            "description": "<P>When the navigateBackward method is called, the calendar navigates backward with a specific month step (by default 1). </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/pdajt/",
            "exampleDescription": "navigates backward with 5 months in jqxCalendar.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "months",
                    "dataType": "number",
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "render",
            "description": "<P>Renders the Calendar. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/gceDn/",
            "exampleDescription": "renders the jqxCalendar.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "refresh",
            "description": "<P>Performs a layout and updates the UI. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/HuWga/",
            "exampleDescription": "refresh the jqxCalendar.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "setMinDate",
            "description": "<P>When the setMinDate method is called, the user sets the lowest date to which it is possible to navigate. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/m9TpD/",
            "exampleDescription": "sets the minimum date of the jqxCalendar.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "date",
                    "dataType": "Date/string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "new Date(2017, 9, 20)" ]
            }
        },
        {
            "name": "setMaxDate",
            "description": "<P>When the setMaxDate method is called, the user sets the hightest date to which it is possible to navigate. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/m5yY6/",
            "exampleDescription": "sets the maximum date of the jqxCalendar.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "date",
                    "dataType": "Date/string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "new Date(2019, 10, 20)" ]
            }
        },
        {
            "name": "setDate",
            "description": "<P>When the setDate method is called, the user sets the current month displayed in the Calendar. The parameter is a JavaScript Date object. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/zSyAR/",
            "exampleDescription": "sets the date of the jqxCalendar.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "date",
                    "dataType": "Date/string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "new Date(2017, 9, 20)" ]
            }
        },
        {
            "name": "setRange",
            "description": "<P>Sets the selection range when the selectionMode is set to 'range'. The parameters are JavaScript Date objects. </P>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/kxVAQ/",
            "exampleDescription": "sets the range values of the jqxCalendar.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "date",
                    "dataType": "Date/string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                },
                {
                    "name": "date2",
                    "dataType": "Date/string",
                    "ts_dataType": "any",
                    "description": "",
                    "optional": false
                }
            ],
            "exampleInit": {
                "args": [ "new Date(2017, 9, 20)", "new Date(2017, 9, 22)" ]
            },
            "extraData": {
                "selectionMode": "'range'"
            }
        },
        {
            "name": "today",
            "description": "<P>Sets the Date to Today. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>today</CODE> method. </P>\n<PRE><CODE>$('#jqxCalendar').jqxCalendar('today'); </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/qn72L/",
            "exampleDescription": "Sets the Date to Today in the jqxCalendar.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "val",
            "description": "<P>Gets or sets the jqxCalendar's value. </P>\n<H4>Code examples</H4>\n<P>Invoke the <CODE>val</CODE> method. </P>\n<PRE><CODE>\r\n// Set Date using Javascript Date param. Sets year = 2013, month = april, day = 3.\r\n$('#jqxCalendar').jqxCalendar('val', new Date(2013, 3, 3));\r\n// Set Date using string param.\r\n$('#jqxCalendar').jqxCalendar('val', \"2013/3/3\");\r\n// Set Date using jQuery's val.\r\n$('#jqxCalendar').val(\"2013/3/3\");\r\n// Set Date using jQuery's val. Param is JavaScript Date.\r\n$('#jqxCalendar').val(new Date(2013, 3, 3));\r\n// Set Null Date.\r\n$('#jqxCalendar').val(null);\r\n// Set Range when the selectionMode is \"range\".\r\n$('#jqxCalendar').val(\"2013/3/3\", \"2013/3/10\");\r\n// Set Range using JavaScript Date.\r\n$('#jqxCalendar').val(new Date(2013, 3, 3), new Date(2013, 3, 10));\r\n// Get Date. The returned value is string.\r\n$('#jqxCalendar').jqxCalendar('val');\r\n// Get Date. The returned value is Javascript Date.\r\n$('#jqxCalendar').jqxCalendar('val', 'date');\r\n// Get Date using jQuery's val. The returned value is string.\r\n$('#jqxCalendar').val();\r\n// Get JavaScript Date using jQuery's val. \r\n$('#jqxCalendar').val('date');\r\n </CODE></PRE>",
            "exampleURL": "http://jsfiddle.net/jqwidgets/HVnme/",
            "exampleDescription": "invoke val method of the jqxCalendar.",
            "returnDataType": "Date/string",
            "ts_returnDataType": "Date | string",
            "arguments": [
                {
                    "name": "value",
                    "dataType": "Date/string(optional)",
                    "ts_dataType": "Date | string",
                    "description": "The start of range when the selectionMode is \"range",
                    "optional": true
                },
                {
                    "name": "value2",
                    "dataType": "Date/string(optional)",
                    "ts_dataType": "Date | string",
                    "description": "The end of range when the selectionMode is \"range",
                    "optional": true
                }
            ]
        }
    ]
}