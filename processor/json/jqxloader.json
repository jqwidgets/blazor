{
    "widget": {
        "name": "jqxLoader",
        "description": "Displays a built-in loading element. The loading element can be icon only, text only or combination of icon and text. It can be used to display loading element until the widget's data is loaded.",
        "angular2": {
            "name": "jqxLoaderComponent",
            "selector": "jqxLoader"
        }
    },
    "dataTypes": [
        {
            "name": "LoaderImagePosition",
            "ts_dataType": "enum",
            "enumOptions": [ "center", "top", "bottom" ]
        },
        {
            "name": "LoaderTextPosition",
            "ts_dataType": "enum",
            "enumOptions": [ "top", "bottom", "left", "right" ]
        }
    ],
    "exampleInit": {
        "autoOpen": "true"
    },
    "properties": [
        {
            "name": "autoOpen",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the loader will be shown after it's creation. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>autoOpen</CODE> property. </P>\n<PRE><CODE>$('#jqxLoader').jqxLoader({ autoOpen: true }); </CODE></PRE>\n\r\n<P>Get the <CODE>autoOpen</CODE> property. </P>\n<PRE><CODE>var autoOpen = $('#jqxLoader').jqxLoader('autoOpen'); </CODE></PRE>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxloader-autoopen-property",
            "exampleDescription": "autoOpen is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "autoOpen": "true"
            }
        },
        {
            "name": "height",
            "defaultValue": "150",
            "description": "<P>Sets or gets the loader's height. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>height</CODE> property. </P>\n<PRE><CODE>$(\"#jqxLoader\").jqxLoader({ height: 150 });</CODE></PRE>\n\r\n<P>Get the <CODE>height</CODE> property. </P>\n<PRE><CODE>var height = $('#jqxLoader').jqxLoader('height');</CODE></PRE>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxloader-height-property",
            "exampleDescription": "height is set to 150",
            "dataType": "number",
            "ts_dataType": "string | number",
            "exampleInit": {
                "height": "200"
            }
        },
        {
            "name": "html",
            "defaultValue": "null",
            "description": "<P>Sets the loader's content. </P>",
            "example": "<pre><CODE>$(\"#jqxLoader\").jqxLoader({html: \"Next Loading\" });</CODE></pre>",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxloader-html-property",
            "exampleDescription": "html is set to a custom HTML string.",
            "dataType": "string",
            "exampleInit": {
                "html": "custom HTML string"
            }
        },
        {
            "name": "isModal",
            "defaultValue": "false",
            "description": "<P>Sets or gets whether the loader is displayed as a modal dialog. If the jqxLoader's mode is set to modal, the loader blocks user interaction with the underlying user interface. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>isModal</CODE> property. </P>\n<PRE><CODE>$('#jqxLoader').jqxLoader({ isModal: true }); </CODE></PRE>\n\r\n<P>Get the <CODE>isModal</CODE> property: </P>\n<PRE><CODE>var isModal = $('#jqxLoader').jqxLoader('isModal'); </CODE></PRE>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxloader-ismodal-property",
            "exampleDescription": "isModal is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "isModal": "true"
            }
        },
        {
            "name": "imagePosition",
            "defaultValue": "'center'",
            "description": "<P>Sets or gets the image's position. Possible values: 'top', 'bottom' and 'center' </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>imagePosition</CODE> property. </P>\n<PRE><CODE>$('#jqxLoader').jqxLoader({ imagePosition: 'center' }); </CODE></PRE>\n\r\n<P>Get the <CODE>imagePosition</CODE> property: </P>\n<PRE><CODE>var imagePosition = $('#jqxLoader').jqxLoader('imagePosition'); </CODE></PRE>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxloader-imageposition-property",
            "exampleDescription": "imagePosition is set to 'top'",
            "dataType": "string",
            "ts_dataType": "enum:LoaderImagePosition",
            "exampleInit": {
                "imagePosition": "top"
            }
        },
        {
            "name": "rtl",
            "defaultValue": "false",
            "description": "<P>Sets or gets a value indicating whether widget's text is aligned to support locales using right-to-left fonts. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>rtl</CODE> property. </P>\n<PRE><CODE>$(\"#jqxLoader\").jqxLoader({ rtl: false});</CODE></PRE>\n\r\n<P>Get the <CODE>rtl</CODE> property. </P>\n<PRE><CODE>var rtl = $('#jqxLoader').jqxLoader('rtl');</CODE></PRE>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxloader-rtl-property",
            "exampleDescription": "rtl is set to true",
            "dataType": "boolean",
            "exampleInit": {
                "rtl": "true"
            }
        },
        {
            "name": "text",
            "defaultValue": "\"Loading...\"",
            "description": "<P>Sets or gets the loader's text. </P>",
            "example": "<pre><CODE>$(\"#jqxLoader\").jqxLoader({text: \"This is a loader...\" });</CODE></pre>",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxloader-text-property",
            "exampleDescription": "text is set to 'Loading jQWidgets files'.",
            "dataType": "string",
            "ts_dataType": "number | string",
            "exampleInit": {
                "text": "Loading files..."
            }
        },
        {
            "name": "textPosition",
            "defaultValue": "\"bottom\"",
            "description": "<P>Sets or gets the alignment. </P>\n\r\n<H4>Code examples</H4>\n\r\n<P>Set the <CODE>textPosition</CODE> property. </P>\n<PRE><CODE>$(\"#jqxLoader\").jqxLoader({ textPosition: \"left\" });</CODE></PRE>\n\r\n<P>Get the <CODE>textPosition</CODE> property. </P>\n<PRE><CODE>var textPosition = $('#jqxLoader').jqxLoader('textPosition'); </CODE></PRE>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxloader-textposition-property",
            "exampleDescription": "textPosition is set to 'left'",
            "dataType": "string",
            "ts_dataType": "enum:LoaderTextPosition",
            "exampleInit": {
                "textPosition": "left"
            }
        },
        {
            "name": "theme",
            "defaultValue": "''",
            "description": "<P>Sets the widget's theme. </P>\n\r\n<UL><LI>Include the theme's CSS file after jqx.base.css.<BR>The following code example adds the 'material' theme. <PRE><CODE>\r\n                                                                                        <PRE><CODE>&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.base.css\" type=\"text/css\" /&gt;\r\n&lt;link rel=\"stylesheet\" href=\"../../jqwidgets/styles/jqx.material.css\" type=\"text/css\" /&gt;</CODE></PRE>\r\n                                </CODE></PRE>\r\n<LI>Set the widget's theme property to 'material' when you initialize it. </LI></UL>",
            "example": "",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxloader-theme-property",
            "exampleDescription": "theme is set to 'material'",
            "dataType": "string",
            "exampleInit": {
                "theme": "material"
            }
        },
        {
            "name": "width",
            "defaultValue": "150",
            "description": "<P>Sets or gets the jqxLoader's width. </P>",
            "example": "<pre><CODE>$('#jqxLoader').jqxLoader({ width: '150px' });</CODE></pre>",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxloader-width-property",
            "exampleDescription": "width is set to 200",
            "dataType": "number",
            "ts_dataType": "string | number",
            "exampleInit": {
                "width": "200"
            }
        }
    ],
    "methods": [
        {
            "name": "close",
            "description": "<P>Closing the current loader.</P>",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxloader-close-method",
            "exampleDescription": "closes the jqxLoader.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "None",
                    "dataType": null,
                    "description": "",
                    "optional": false
                }
            ]
        },
        {
            "name": "open",
            "description": "<P>Opening/showing the current loader. You can optionally call the method with <CODE>left</CODE> and <CODE>top</CODE> arguments</P>",
            "exampleURL": "https://www.jqwidgets.com/jseditor/?key=jqxloader-open-method",
            "exampleDescription": "opens the jqxLoader.",
            "returnDataType": "None",
            "arguments": [
                {
                    "name": "left",
                    "dataType": "Number | String",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": true
                },
                {
                    "name": "top",
                    "dataType": "number",
                    "ts_dataType": "number | string",
                    "description": "",
                    "optional": true
                }
            ],
            "exampleInit": {
                "args": [ "200", "50" ]
            }
        }
    ]
}