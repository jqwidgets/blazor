@inject IJSRuntime JSRuntime;

<JqxNotification @ref="myNotification"
    onOpen="onOpen" onClose="onClose" onClick="onClick"
    blink=true closeOnClick=true autoClose=false template=template 
    opacity=0.9 position=position width=width>
  <div>
    You have <b>2</b> new messages.
  </div>
  <div style="font-size: smaller; text-align: center;">
    Click to view.
  </div>
</JqxNotification>
<JqxButton width=80 onClick="clickCheckMail">
  Check mail
</JqxButton>
<div style="margin-top: 15px;">
  Events log:
</div>
<JqxPanel @ref="eventsPanel" width=150 height=150>
</JqxPanel>
<div @ref="messagePanel" style="width: 400px; display: none;">
  <p>
    <b>From:</b> Ken
  </p>
  <p>
    <b>About</b>: Appointment
  </p>
  <p>
    Hi,<br />
    I just wanted to remind you dinner is at 8pm tonight at Carl's.
  </p>
  <hr style="width: 300px; text-align: right;" />
  <p>
    <b>From:</b> Sue
  </p>
  <p>
    <b>About</b>: Shopping
  </p>
  <p>
    Here's the shopping list for tommorow's party:
  </p>
  <ul>
    <li>Wine</li>
    <li>Tomatoes</li>
    <li>Cheese</li>
    <li>Popcorn</li>
  </ul>
</div>

@code {
    JqxNotification myNotification;
    JqxPanel eventsPanel;
    ElementReference messagePanel;

    string width = "auto"; 
    string template = "mail";
    string position = "top-right";

    private void onOpen(IDictionary<string, object> e)
    {
        eventsPanel.append("open<br />");
    }

    private void onClose(IDictionary<string, object> e)
    {
        eventsPanel.append("close<br />");
    }

    private void onClick(IDictionary<string, object> e)
    {
        eventsPanel.append("click<br />");
        JSRuntime.InvokeVoidAsync("Example.displayMessage", messagePanel);
    }

    private void clickCheckMail(IDictionary<string, object> e)
    {
        myNotification.open();
    }
}
