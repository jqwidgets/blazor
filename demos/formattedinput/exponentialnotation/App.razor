@inject IJSRuntime JSRuntime;

<JqxFormattedInput @ref="myFormattedInput"
    width=250 height=25 value=330000 radix=radix decimalNotation=decimalNotation>
</JqxFormattedInput>

<div style="margin-top: 20px;">
    <JqxButton width=175 onClick=getDecimal>Get decimal value</JqxButton>
    <JqxButton width=175 onClick=getExponential>Get exponential notation</JqxButton>
    <br />
    <JqxButton width=175 onClick=getScientific>Get scientific notation</JqxButton>
    <JqxButton width=175 onClick=getEngineering>Get engineering notation</JqxButton>
</div>

@code {
    JqxFormattedInput myFormattedInput;
    string radix = "decimal";
    string decimalNotation = "exponential"; 

    private void getDecimal(IDictionary<string, object> e) 
    {
        var decimalValue = myFormattedInput.val("decimal");
        JSRuntime.InvokeVoidAsync("Example.alert", "Decimal value: " + decimalValue);
    }

    private void getExponential(IDictionary<string, object> e) 
    {
        var exponentialValue = myFormattedInput.val("exponential");
        JSRuntime.InvokeVoidAsync("Example.alert", "Exponential notation: " + exponentialValue);
    }

    private void getScientific(IDictionary<string, object> e) 
    {
        var scientificValue = myFormattedInput.val("scientific");
        JSRuntime.InvokeVoidAsync("Example.alert", "Scientific notation: " + scientificValue);
    }

    private void getEngineering(IDictionary<string, object> e) 
    {
        var engineeringValue = myFormattedInput.val("engineering");
        JSRuntime.InvokeVoidAsync("Example.alert", "Engineering notation: " + engineeringValue);
    }
}
