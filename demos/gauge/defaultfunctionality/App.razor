@inject IJSRuntime JSRuntime;

<div style="float: left">
  <JqxGauge @ref="myGauge" onValueChanging="onValueChanging" onComponentReady="onGaugeReady"
      ranges=ranges ticksMinor=ticksMinor ticksMajor=ticksMajor
      value=0 colorScheme="scheme05" animationDuration=1200>
  </JqxGauge>
  <div @ref="gaugeValue" class="gaugeValue"></div>
</div>

<div style="margin-left: 60px; float: left;">
    <JqxLinearGauge @ref="myLinearGauge" onComponentReady="onLinearGaugeReady"
        width=100 height=350 max=60 orientation=orientation
        ticksMinor=ticksMinorLinear ticksMajor=ticksMajorLinear
        pointer=pointer colorScheme="scheme05" labels=labels 
        ranges=rangesLinear animationDuration=1500>
    </JqxLinearGauge>
</div>

@code {

    JqxGauge myGauge;
    JqxLinearGauge myLinearGauge;
    ElementReference gaugeValue;

    IDictionary<string, object>[] ranges = new Dictionary<string, object>[]
    {
        new Dictionary<string, object>()
        {
            { "startValue", 0 }, 
            { "endValue", 55 },
            { "style", new Dictionary<string, string>(){ { "fill", "#4bb648" }, { "stroke", "#4bb648" } } },
            { "endWidth", 5 },
            { "startWidth", 1 }
        },
        new Dictionary<string, object>()
        {
            { "startValue", 55 }, 
            { "endValue", 110 },
            { "style", new Dictionary<string, string>(){ { "fill", "#fbd109" }, { "stroke", "#fbd109" } } },
            { "endWidth", 10 },
            { "startWidth", 5 }
        },
        new Dictionary<string, object>()
        {
            { "startValue", 110 }, 
            { "endValue", 165 },
            { "style", new Dictionary<string, string>(){ { "fill", "#ff8000" }, { "stroke", "#ff8000" } } },
            { "endWidth", 13 },
            { "startWidth", 10 }
        },
        new Dictionary<string, object>()
        {
            { "startValue", 165 }, 
            { "endValue", 220 },
            { "style", new Dictionary<string, string>(){ { "fill", "#e02629" }, { "stroke", "#e02629" } } },
            { "endWidth", 16 },
            { "startWidth", 13 }
        }
    };

    IDictionary<string, object> ticksMinor = new Dictionary<string, object>()
    {
        { "interval", 5 }, { "size", "5%" }   
    };

    IDictionary<string, object> ticksMajor = new Dictionary<string, object>()
    {
        { "interval", 10 }, { "size", "9%" }
    };

    string orientation = "vertical";

    IDictionary<string, object> ticksMinorLinear = new Dictionary<string, object>()
    {
        { "size", "5%" }, { "interval", 2.5 }, { "style", new Dictionary<string, object>() { { "stroke-width", 1 }, { "stroke", "#aaaaaa"} } }
    };

    IDictionary<string, object> ticksMajorLinear = new Dictionary<string, object>()
    {
        { "size", "10%" }, { "interval", 10 }
    };
    
    IDictionary<string, string> pointer = new Dictionary<string, string>() { { "size", "5%" } };

    IDictionary<string, object> labels = new Dictionary<string, object>() { { "interval", 20 } };

    IDictionary<string, object>[] rangesLinear = new Dictionary<string, object>[]
    {
        new Dictionary<string, object>()
        {
            { "startValue", -10 }, 
            { "endValue", 10 },
            { "style", new Dictionary<string, string>(){ { "fill", "#FFF157" }, { "stroke", "#FFF157" } } }
        },
        new Dictionary<string, object>()
        {
            { "startValue", 10 }, 
            { "endValue", 35 },
            { "style", new Dictionary<string, string>(){ { "fill", "#FFA200" }, { "stroke", "#FFA200" } } }
        },
        new Dictionary<string, object>()
        {
            { "startValue", 35 }, 
            { "endValue", 60 },
            { "style", new Dictionary<string, string>(){ { "fill", "#FF4800" }, { "stroke", "#FF4800" } } }
        }
    };

    private void onGaugeReady()
    {
        myGauge.val(140);
    }

    private void onLinearGaugeReady()
    {
        myLinearGauge.val(40);
    }

    private void onValueChanging(IDictionary<string, object> e) 
    {
        JSRuntime.InvokeVoidAsync("Example.changeValue", gaugeValue, e["value"]);
    }
}

<style>
    .gaugeValue {
	    position: absolute; 
        top: 275px; 
        left: 140px; 
        text-align: center; 
        font-size: 17px; 
        width: 70px;
	}
</style>
