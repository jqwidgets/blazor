<div class="gaugeContainer">
    <JqxLinearGauge @ref="myLinearGauge" onComponentReady="onReady"
        max=60 value=-60 pointer=pointer colorScheme="scheme05" orientation=orientation
        labels=labels ticksMajor=ticksMajor ticksMinor=ticksMinor ranges=ranges>
    </JqxLinearGauge>
</div>

<div style="margin-left: 330px">
    <JqxExpander
        width=280 height=300 showArrow=false toggleMode=toggleMode>
        <div class="demo-options-header">Options</div>
        <div>
          <JqxCheckBox onChange="isVerticalCheckboxOnChange" isChecked=true>Is Vertical</JqxCheckBox>
          <br />
          <div>
            <table style="float: left; margin-left: 10px">
              <tbody>
                <tr><td>Labels position:</td></tr>
                <tr><td><JqxRadioButton onChecked="labelsNearRadioOnChecked" groupName="labels-position">Near</JqxRadioButton></td></tr>
                <tr><td><JqxRadioButton onChecked="labelsFarRadioOnChecked" groupName="labels-position">Far</JqxRadioButton></td></tr>
                <tr><td><JqxRadioButton onChecked="labelsBothRadioOnChecked" groupName="labels-position" isChecked=true>Both</JqxRadioButton></td></tr>
              </tbody>
            </table>
            <table style="float: right; margin-right: 10px">
              <tbody>
                <tr><td>Ticks position:</td></tr>
                <tr><td><JqxRadioButton onChecked="ticksNearRadioOnChecked" groupName="ticks-position">Near</JqxRadioButton></td></tr>
                <tr><td><JqxRadioButton onChecked="ticksFarRadioOnChecked" groupName="ticks-position">Far</JqxRadioButton></td></tr>
                <tr><td><JqxRadioButton onChecked="ticksBothRadioOnChecked" groupName="ticks-position" isChecked=true>Both</JqxRadioButton></td></tr>
              </tbody>
            </table>
            <div style="clear: both"></div>
          </div>
          <br />
          <JqxCheckBox onChange="showTicksCheckboxOnChange" isChecked=true>Show Ticks</JqxCheckBox>
          <JqxCheckBox onChange="showLabelsCheckboxOnChange" isChecked=true>Show Labels</JqxCheckBox>
          <JqxCheckBox onChange="showRangesCheckboxOnChange" isChecked=true>Show Ranges</JqxCheckBox>
          <JqxCheckBox onChange="showBackgroundCheckboxOnChange" isChecked=true>Show Background</JqxCheckBox>
          <br />
          <JqxButton onClick="showAnimationButtonOnClick" width=100 height=25>Reset Value</JqxButton>
        </div>
    </JqxExpander>
</div>

@code {
    JqxLinearGauge myLinearGauge;

    string orientation = "vertical";      
    string toggleMode = "none";

    IDictionary<string, string> pointer = new Dictionary<string, string>() { { "size", "6%" } };
    IDictionary<string, object> labels = new Dictionary<string, object>() { { "interval", 20 } };

    IDictionary<string, object> ticksMinor = new Dictionary<string, object>()
    {
        { "interval", 2.5 }, { "size", "5%" }, { "style", new Dictionary<string, object>() { { "stroke-width", 1 }, { "stroke", "#aaaaaa"} } }
    };

    IDictionary<string, object> ticksMajor = new Dictionary<string, object>()
    {
        { "interval", 10 }, { "size", "10%" }
    };

    IDictionary<string, object>[] ranges = new Dictionary<string, object>[]
    {
        new Dictionary<string, object>()
        {
            { "startValue", -10 }, 
            { "endValue", 10 },
            { "style", new Dictionary<string, string>(){ { "fill", "#FFF157" }, { "stroke", "#FFF157" } } }
        },
        new Dictionary<string, object>()
        {
            { "startValue", 10 }, 
            { "endValue", 35 },
            { "style", new Dictionary<string, string>(){ { "fill", "#FFA200" }, { "stroke", "#FFA200" } } }
        },
        new Dictionary<string, object>()
        {
            { "startValue", 35 }, 
            { "endValue", 60 },
            { "style", new Dictionary<string, string>(){ { "fill", "#FF4800" }, { "stroke", "#FF4800" } } }
        }
    };

    IDictionary<string, object> caption = new Dictionary<string, object>() { { "offset", new int[] { 0, -25 } }, { "value", "jQWidgets" }, { "position", "bottom" } };

    IDictionary<string, double> cap = new Dictionary<string, double>() { { "radius", 0.04 } };

    private void onReady()
    {
        myLinearGauge.val(50);
    }
    
    private void isVerticalCheckboxOnChange(IDictionary<string, object> e) 
    {
        if (bool.Parse(e["checked"].ToString()))
        {
            myLinearGauge.setOptions(new Dictionary<string, string>()
            {
                { "width", "100px" }, { "height", "300px" }, { "orientation", "vertical" }    
            });
        }
        else
        {
            myLinearGauge.setOptions(new Dictionary<string, string>()
            {
                { "width", "300px" }, { "height", "100px" }, { "orientation", "horizontal" }    
            });
        }
    }    

    private void showTicksCheckboxOnChange(IDictionary<string, object> e) 
    {
        if (bool.Parse(e["checked"].ToString()))
        {
            myLinearGauge.setOptions(new Dictionary<string, object>()
            {
                {
                    "ticksMajor",
                    new Dictionary<string, object>() { { "visible", true }, { "size", "10%" }, { "interval", 10 } }
                },
                {
                    "ticksMinor",
                    new Dictionary<string, object>() 
                    { 
                        { "visible", true }, 
                        { "size", "5%" }, 
                        { "interval", 2.5 }, 
                        { "style", new Dictionary<string, string>(){ { "fill", "#FFF157" }, { "stroke", "#FFF157" } } }
                    }
                }
            });
        }
        else
        {
            myLinearGauge.setOptions(new Dictionary<string, object>()
            {
                { "ticksMajor", new Dictionary<string, bool>() { { "visible", false } } },
                { "ticksMinor", new Dictionary<string, bool>() { { "visible", true } } }
            });
        }
    } 

    private void showLabelsCheckboxOnChange(IDictionary<string, object> e) 
    {
        if (bool.Parse(e["checked"].ToString()))
        {
            myLinearGauge.setOptions(new Dictionary<string, object>()
            {
                { "labels", new Dictionary<string, object>() { { "visible", true }, { "interval", 20 } } }
            });
        }
        else
        {
            myLinearGauge.setOptions(new Dictionary<string, object>()
            {
                { "labels", new Dictionary<string, object>() { { "visible", false } } }
            });
        }
    }

    private void showRangesCheckboxOnChange(IDictionary<string, object> e) 
    {
        if (bool.Parse(e["checked"].ToString()))
        {
            myLinearGauge.setOptions(new Dictionary<string, bool>() { { "showRanges", true } });
        }
        else
        {
            myLinearGauge.setOptions(new Dictionary<string, bool>() { { "showRanges", false } });
        }
    }

    private void showBackgroundCheckboxOnChange(IDictionary<string, object> e) 
    {
        if (bool.Parse(e["checked"].ToString()))
        {
            myLinearGauge.setOptions(new Dictionary<string, object>()
            {
                {  "background", new Dictionary<string, object>() { { "visible", true } } }
            });
        }
        else
        {
            myLinearGauge.setOptions(new Dictionary<string, object>()
            {
                { "background", new Dictionary<string, object>() { { "visible", false } } }
            });
        }
    }

    private void labelsNearRadioOnChecked(IDictionary<string, object> e) 
    {
        myLinearGauge.setOptions(new Dictionary<string, object>()
        {
            { "labels", new Dictionary<string, object>() { { "interval", 20 }, { "position", "near" } } }
        });
    }

    private void labelsFarRadioOnChecked(IDictionary<string, object> e) 
    {
        myLinearGauge.setOptions(new Dictionary<string, object>()
        {
            { "labels", new Dictionary<string, object>() { { "interval", 20 }, { "position", "far" } } }
        });
    }

    private void labelsBothRadioOnChecked(IDictionary<string, object> e) 
    {
        myLinearGauge.setOptions(new Dictionary<string, object>()
        {
            { "labels", new Dictionary<string, object>() { { "interval", 20 }, { "position", "both" } } }
        });
    }

    private void ticksNearRadioOnChecked(IDictionary<string, object> e) 
    {
        myLinearGauge.setOptions(new Dictionary<string, string>() { { "ticksPosition", "near" } });
    }

    private void ticksFarRadioOnChecked(IDictionary<string, object> e) 
    {
        myLinearGauge.setOptions(new Dictionary<string, string>() { { "ticksPosition", "far" } });
    }

    private void ticksBothRadioOnChecked(IDictionary<string, object> e) 
    {
        myLinearGauge.setOptions(new Dictionary<string, string>() { { "ticksPosition", "both" } });
    }

    private void showAnimationButtonOnClick(IDictionary<string, object> e) 
    {
        myLinearGauge.setOptions(new Dictionary<string, int>() { { "animationDuration", 0 } });
        myLinearGauge.setOptions(new Dictionary<string, int>() { { "value", -60 } });
        myLinearGauge.setOptions(new Dictionary<string, int>() { { "animationDuration", 1000 } });
        myLinearGauge.setOptions(new Dictionary<string, int>() { { "value", 50 } });
    }
}

<style>
    .gaugeContainer {
        margin-left: 20px; 
        float: left;
    }

    .jqx-button {
        margin-left: 90px;
        text-align: center;
    }
</style>
