@using System.Text.Json;
@inject IJSRuntime JSRuntime;

<div id="@componentID">@ChildContent</div>

@code {
    [Parameter]
    public string appendContainer {
        get { return getterProp<string>("appendContainer"); }
        set { setterProp("appendContainer", value); }
    }

    [Parameter]
    public bool autoOpen {
        get { return getterProp<bool>("autoOpen"); }
        set { setterProp("autoOpen", value); }
    }

    [Parameter]
    public double animationOpenDelay {
        get { return getterProp<double>("animationOpenDelay"); }
        set { setterProp("animationOpenDelay", value); }
    }

    [Parameter]
    public double animationCloseDelay {
        get { return getterProp<double>("animationCloseDelay"); }
        set { setterProp("animationCloseDelay", value); }
    }

    [Parameter]
    public bool autoClose {
        get { return getterProp<bool>("autoClose"); }
        set { setterProp("autoClose", value); }
    }

    [Parameter]
    public object autoCloseDelay {
        get { return getterProp<object>("autoCloseDelay"); }
        set { setterProp("autoCloseDelay", value); }
    }

    [Parameter]
    public bool blink {
        get { return getterProp<bool>("blink"); }
        set { setterProp("blink", value); }
    }

    [Parameter]
    public double browserBoundsOffset {
        get { return getterProp<double>("browserBoundsOffset"); }
        set { setterProp("browserBoundsOffset", value); }
    }

    [Parameter]
    public bool closeOnClick {
        get { return getterProp<bool>("closeOnClick"); }
        set { setterProp("closeOnClick", value); }
    }

    [Parameter]
    public bool disabled {
        get { return getterProp<bool>("disabled"); }
        set { setterProp("disabled", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public double hoverOpacity {
        get { return getterProp<double>("hoverOpacity"); }
        set { setterProp("hoverOpacity", value); }
    }

    [Parameter]
    public object icon {
        get { return getterProp<object>("icon"); }
        set { setterProp("icon", value); }
    }

    [Parameter]
    public double notificationOffset {
        get { return getterProp<double>("notificationOffset"); }
        set { setterProp("notificationOffset", value); }
    }

    [Parameter]
    public double opacity {
        get { return getterProp<double>("opacity"); }
        set { setterProp("opacity", value); }
    }

    [Parameter]
    public object position {
        get { return getterProp<object>("position"); }
        set { setterProp("position", value); }
    }

    [Parameter]
    public bool rtl {
        get { return getterProp<bool>("rtl"); }
        set { setterProp("rtl", value); }
    }

    [Parameter]
    public bool showCloseButton {
        get { return getterProp<bool>("showCloseButton"); }
        set { setterProp("showCloseButton", value); }
    }

    [Parameter]
    public object template {
        get { return getterProp<object>("template"); }
        set { setterProp("template", value); }
    }

    [Parameter]
    public string theme {
        get { return getterProp<string>("theme"); }
        set { setterProp("theme", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public object options { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onClose { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onClick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onOpen { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "ChildContent", "onClose", "onClick", "onOpen" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" },
        { "dragEnd", "onDragEnd" },
        { "drag", "onDrag" },
        { "dragStart", "onDragStart" },
        { "targetDrop", "onTargetDrop" },
        { "dropTargetEnter", "onDropTargetEnter" },
        { "dropTargetLeave", "onDropTargetLeave" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public void closeAll()
    {
        setterMethod("closeAll");
    }

    public void closeLast()
    {
        setterMethod("closeLast");
    }

    public void destroy()
    {
        setterMethod("destroy");
    }

    public void open()
    {
        setterMethod("open");
    }

    public void refresh()
    {
        setterMethod("refresh");
    }

    public void render()
    {
        setterMethod("render");
    }

    public IDictionary<string, object> getOptions()
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<IDictionary<string, object>>("jqxBlazor.getOptions", this);
    }

    public void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxNotification", initialOptions);
            attachEvents();
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "close", "emitNotificationEvent", DotNetObjectReference.Create(new EventsHandler(onClose)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "click", "emitNotificationEvent", DotNetObjectReference.Create(new EventsHandler(onClick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "open", "emitNotificationEvent", DotNetObjectReference.Create(new EventsHandler(onOpen)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitNotificationEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }
}
