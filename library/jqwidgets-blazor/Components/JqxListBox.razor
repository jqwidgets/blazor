@using System.Text.Json;
@inject IJSRuntime JSRuntime;

<div id="@componentID">@ChildContent</div>

@code {
    [Parameter]
    public bool autoHeight {
        get { return getterProp<bool>("autoHeight"); }
        set { setterProp("autoHeight", value); }
    }

    [Parameter]
    public bool allowDrag {
        get { return getterProp<bool>("allowDrag"); }
        set { setterProp("allowDrag", value); }
    }

    [Parameter]
    public bool allowDrop {
        get { return getterProp<bool>("allowDrop"); }
        set { setterProp("allowDrop", value); }
    }

    [Parameter]
    public bool checkboxes {
        get { return getterProp<bool>("checkboxes"); }
        set { setterProp("checkboxes", value); }
    }

    [Parameter]
    public bool disabled {
        get { return getterProp<bool>("disabled"); }
        set { setterProp("disabled", value); }
    }

    [Parameter]
    public object displayMember {
        get { return getterProp<object>("displayMember"); }
        set { setterProp("displayMember", value); }
    }

    [Parameter]
    public object dropAction {
        get { return getterProp<object>("dropAction"); }
        set { setterProp("dropAction", value); }
    }

    [Parameter]
    public object dragStart {
        get { return getterProp<object>("dragStart"); }
        set { setterProp("dragStart", value); }
    }

    [Parameter]
    public object dragEnd {
        get { return getterProp<object>("dragEnd"); }
        set { setterProp("dragEnd", value); }
    }

    [Parameter]
    public bool enableHover {
        get { return getterProp<bool>("enableHover"); }
        set { setterProp("enableHover", value); }
    }

    [Parameter]
    public bool enableSelection {
        get { return getterProp<bool>("enableSelection"); }
        set { setterProp("enableSelection", value); }
    }

    [Parameter]
    public bool equalItemsWidth {
        get { return getterProp<bool>("equalItemsWidth"); }
        set { setterProp("equalItemsWidth", value); }
    }

    [Parameter]
    public bool filterable {
        get { return getterProp<bool>("filterable"); }
        set { setterProp("filterable", value); }
    }

    [Parameter]
    public double filterHeight {
        get { return getterProp<double>("filterHeight"); }
        set { setterProp("filterHeight", value); }
    }

    [Parameter]
    public object filterDelay {
        get { return getterProp<object>("filterDelay"); }
        set { setterProp("filterDelay", value); }
    }

    [Parameter]
    public object filterPlaceHolder {
        get { return getterProp<object>("filterPlaceHolder"); }
        set { setterProp("filterPlaceHolder", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public bool hasThreeStates {
        get { return getterProp<bool>("hasThreeStates"); }
        set { setterProp("hasThreeStates", value); }
    }

    [Parameter]
    public double itemHeight {
        get { return getterProp<double>("itemHeight"); }
        set { setterProp("itemHeight", value); }
    }

    [Parameter]
    public bool incrementalSearch {
        get { return getterProp<bool>("incrementalSearch"); }
        set { setterProp("incrementalSearch", value); }
    }

    [Parameter]
    public object incrementalSearchDelay {
        get { return getterProp<object>("incrementalSearchDelay"); }
        set { setterProp("incrementalSearchDelay", value); }
    }

    [Parameter]
    public bool multiple {
        get { return getterProp<bool>("multiple"); }
        set { setterProp("multiple", value); }
    }

    [Parameter]
    public bool multipleextended {
        get { return getterProp<bool>("multipleextended"); }
        set { setterProp("multipleextended", value); }
    }

    [Parameter]
    public object renderer {
        get { return getterProp<object>("renderer"); }
        set { setterProp("renderer", value); }
    }

    [Parameter]
    public object rendered {
        get { return getterProp<object>("rendered"); }
        set { setterProp("rendered", value); }
    }

    [Parameter]
    public bool rtl {
        get { return getterProp<bool>("rtl"); }
        set { setterProp("rtl", value); }
    }

    [Parameter]
    public object selectedIndex {
        get { return getterProp<object>("selectedIndex"); }
        set { setterProp("selectedIndex", value); }
    }

    [Parameter]
    public object selectedIndexes {
        get { return getterProp<object>("selectedIndexes"); }
        set { setterProp("selectedIndexes", value); }
    }

    [Parameter]
    public object[] source {
        get { return getterProp<object[]>("source"); }
        set { setterProp("source", value); }
    }

    [Parameter]
    public double scrollBarSize {
        get { return getterProp<double>("scrollBarSize"); }
        set { setterProp("scrollBarSize", value); }
    }

    [Parameter]
    public object searchMode {
        get { return getterProp<object>("searchMode"); }
        set { setterProp("searchMode", value); }
    }

    [Parameter]
    public string theme {
        get { return getterProp<string>("theme"); }
        set { setterProp("theme", value); }
    }

    [Parameter]
    public object valueMember {
        get { return getterProp<object>("valueMember"); }
        set { setterProp("valueMember", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public object options { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onBindingComplete { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onChange { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCheckChange { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onDragStart { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onDragEnd { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onSelect { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onUnselect { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "ChildContent", "onBindingComplete", "onChange", "onCheckChange", "onDragStart", "onDragEnd", "onSelect", "onUnselect" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" },
        { "dragEnd", "onDragEnd" },
        { "drag", "onDrag" },
        { "dragStart", "onDragStart" },
        { "targetDrop", "onTargetDrop" },
        { "dropTargetEnter", "onDropTargetEnter" },
        { "dropTargetLeave", "onDropTargetLeave" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public bool addItem()
    {
        return getterMethod<bool>("addItem");
    }

    public void addItem(object Item)
    {
        setterMethod("addItem", Item);
    }

    public void beginUpdate()
    {
        setterMethod("beginUpdate");
    }

    public void clear()
    {
        setterMethod("clear");
    }

    public void clearSelection()
    {
        setterMethod("clearSelection");
    }

    public void checkIndex(double Index)
    {
        setterMethod("checkIndex", Index);
    }

    public void checkItem(object Item)
    {
        setterMethod("checkItem", Item);
    }

    public void checkAll()
    {
        setterMethod("checkAll");
    }

    public void clearFilter()
    {
        setterMethod("clearFilter");
    }

    public void destroy()
    {
        setterMethod("destroy");
    }

    public void disableItem(object Item)
    {
        setterMethod("disableItem", Item);
    }

    public void disableAt(double Index)
    {
        setterMethod("disableAt", Index);
    }

    public void enableItem(object Item)
    {
        setterMethod("enableItem", Item);
    }

    public void enableAt(object Index)
    {
        setterMethod("enableAt", Index);
    }

    public void ensureVisible(object item)
    {
        setterMethod("ensureVisible", item);
    }

    public void endUpdate()
    {
        setterMethod("endUpdate");
    }

    public void focus()
    {
        setterMethod("focus");
    }

    public object[] getItems()
    {
        return getterMethod<object[]>("getItems");
    }

    public object[] getSelectedItems()
    {
        return getterMethod<object[]>("getSelectedItems");
    }

    public object[] getCheckedItems()
    {
        return getterMethod<object[]>("getCheckedItems");
    }

    public object getItem()
    {
        return getterMethod<object>("getItem");
    }

    public void getItem(double Index)
    {
        setterMethod("getItem", Index);
    }

    public object getItemByValue()
    {
        return getterMethod<object>("getItemByValue");
    }

    public void getItemByValue(object Item)
    {
        setterMethod("getItemByValue", Item);
    }

    public object getSelectedItem()
    {
        return getterMethod<object>("getSelectedItem");
    }

    public double getSelectedIndex()
    {
        return getterMethod<double>("getSelectedIndex");
    }

    public void insertAt(object Item, object Index)
    {
        setterMethod("insertAt", Item, Index);
    }

    public void invalidate()
    {
        setterMethod("invalidate");
    }

    public void indeterminateItem(object Item)
    {
        setterMethod("indeterminateItem", Item);
    }

    public void indeterminateIndex(double Index)
    {
        setterMethod("indeterminateIndex", Index);
    }

    public void loadFromSelect(string selector)
    {
        setterMethod("loadFromSelect", selector);
    }

    public void removeItem(object Item)
    {
        setterMethod("removeItem", Item);
    }

    public void removeAt(object Index)
    {
        setterMethod("removeAt", Index);
    }

    public void render()
    {
        setterMethod("render");
    }

    public void refresh()
    {
        setterMethod("refresh");
    }

    public void selectItem(object Item)
    {
        setterMethod("selectItem", Item);
    }

    public void selectIndex(object Index)
    {
        setterMethod("selectIndex", Index);
    }

    public void updateItem(object Item, object Value)
    {
        setterMethod("updateItem", Item, Value);
    }

    public void updateAt(object item, object index)
    {
        setterMethod("updateAt", item, index);
    }

    public void unselectIndex(object index)
    {
        setterMethod("unselectIndex", index);
    }

    public void unselectItem(object item)
    {
        setterMethod("unselectItem", item);
    }

    public void uncheckIndex(object index)
    {
        setterMethod("uncheckIndex", index);
    }

    public void uncheckItem(object item)
    {
        setterMethod("uncheckItem", item);
    }

    public void uncheckAll()
    {
        setterMethod("uncheckAll");
    }

    public string val()
    {
        return getterMethod<string>("val");
    }

    public void val(object value)
    {
        setterMethod("val", value);
    }

    public IDictionary<string, object> getOptions()
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<IDictionary<string, object>>("jqxBlazor.getOptions", this);
    }

    public void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxListBox", initialOptions);
            attachEvents();
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "bindingComplete", "emitListBoxEvent", DotNetObjectReference.Create(new EventsHandler(onBindingComplete)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "change", "emitListBoxEvent", DotNetObjectReference.Create(new EventsHandler(onChange)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "checkChange", "emitListBoxEvent", DotNetObjectReference.Create(new EventsHandler(onCheckChange)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "dragStart", "emitListBoxEvent", DotNetObjectReference.Create(new EventsHandler(onDragStart)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "dragEnd", "emitListBoxEvent", DotNetObjectReference.Create(new EventsHandler(onDragEnd)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "select", "emitListBoxEvent", DotNetObjectReference.Create(new EventsHandler(onSelect)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "unselect", "emitListBoxEvent", DotNetObjectReference.Create(new EventsHandler(onUnselect)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitListBoxEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }
}
