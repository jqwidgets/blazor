@using System.Text.Json;
@inject IJSRuntime JSRuntime;

<div id="@componentID">@ChildContent</div>

@code {
    [Parameter]
    public bool autoOpen {
        get { return getterProp<bool>("autoOpen"); }
        set { setterProp("autoOpen", value); }
    }

    [Parameter]
    public bool autoDropDownHeight {
        get { return getterProp<bool>("autoDropDownHeight"); }
        set { setterProp("autoDropDownHeight", value); }
    }

    [Parameter]
    public object animationType {
        get { return getterProp<object>("animationType"); }
        set { setterProp("animationType", value); }
    }

    [Parameter]
    public bool checkboxes {
        get { return getterProp<bool>("checkboxes"); }
        set { setterProp("checkboxes", value); }
    }

    [Parameter]
    public double closeDelay {
        get { return getterProp<double>("closeDelay"); }
        set { setterProp("closeDelay", value); }
    }

    [Parameter]
    public bool disabled {
        get { return getterProp<bool>("disabled"); }
        set { setterProp("disabled", value); }
    }

    [Parameter]
    public string displayMember {
        get { return getterProp<string>("displayMember"); }
        set { setterProp("displayMember", value); }
    }

    [Parameter]
    public object dropDownHorizontalAlignment {
        get { return getterProp<object>("dropDownHorizontalAlignment"); }
        set { setterProp("dropDownHorizontalAlignment", value); }
    }

    [Parameter]
    public object dropDownVerticalAlignment {
        get { return getterProp<object>("dropDownVerticalAlignment"); }
        set { setterProp("dropDownVerticalAlignment", value); }
    }

    [Parameter]
    public object dropDownHeight {
        get { return getterProp<object>("dropDownHeight"); }
        set { setterProp("dropDownHeight", value); }
    }

    [Parameter]
    public object dropDownWidth {
        get { return getterProp<object>("dropDownWidth"); }
        set { setterProp("dropDownWidth", value); }
    }

    [Parameter]
    public bool enableSelection {
        get { return getterProp<bool>("enableSelection"); }
        set { setterProp("enableSelection", value); }
    }

    [Parameter]
    public bool enableBrowserBoundsDetection {
        get { return getterProp<bool>("enableBrowserBoundsDetection"); }
        set { setterProp("enableBrowserBoundsDetection", value); }
    }

    [Parameter]
    public bool enableHover {
        get { return getterProp<bool>("enableHover"); }
        set { setterProp("enableHover", value); }
    }

    [Parameter]
    public bool filterable {
        get { return getterProp<bool>("filterable"); }
        set { setterProp("filterable", value); }
    }

    [Parameter]
    public double filterHeight {
        get { return getterProp<double>("filterHeight"); }
        set { setterProp("filterHeight", value); }
    }

    [Parameter]
    public double filterDelay {
        get { return getterProp<double>("filterDelay"); }
        set { setterProp("filterDelay", value); }
    }

    [Parameter]
    public string filterPlaceHolder {
        get { return getterProp<string>("filterPlaceHolder"); }
        set { setterProp("filterPlaceHolder", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public bool incrementalSearch {
        get { return getterProp<bool>("incrementalSearch"); }
        set { setterProp("incrementalSearch", value); }
    }

    [Parameter]
    public double incrementalSearchDelay {
        get { return getterProp<double>("incrementalSearchDelay"); }
        set { setterProp("incrementalSearchDelay", value); }
    }

    [Parameter]
    public double itemHeight {
        get { return getterProp<double>("itemHeight"); }
        set { setterProp("itemHeight", value); }
    }

    [Parameter]
    public double openDelay {
        get { return getterProp<double>("openDelay"); }
        set { setterProp("openDelay", value); }
    }

    [Parameter]
    public string placeHolder {
        get { return getterProp<string>("placeHolder"); }
        set { setterProp("placeHolder", value); }
    }

    [Parameter]
    public double popupZIndex {
        get { return getterProp<double>("popupZIndex"); }
        set { setterProp("popupZIndex", value); }
    }

    [Parameter]
    public bool rtl {
        get { return getterProp<bool>("rtl"); }
        set { setterProp("rtl", value); }
    }

    [Parameter]
    public object renderer {
        get { return getterProp<object>("renderer"); }
        set { setterProp("renderer", value); }
    }

    [Parameter]
    public object selectionRenderer {
        get { return getterProp<object>("selectionRenderer"); }
        set { setterProp("selectionRenderer", value); }
    }

    [Parameter]
    public object searchMode {
        get { return getterProp<object>("searchMode"); }
        set { setterProp("searchMode", value); }
    }

    [Parameter]
    public object[] source {
        get { return getterProp<object[]>("source"); }
        set { setterProp("source", value); }
    }

    [Parameter]
    public double selectedIndex {
        get { return getterProp<double>("selectedIndex"); }
        set { setterProp("selectedIndex", value); }
    }

    [Parameter]
    public string theme {
        get { return getterProp<string>("theme"); }
        set { setterProp("theme", value); }
    }

    [Parameter]
    public string template {
        get { return getterProp<string>("template"); }
        set { setterProp("template", value); }
    }

    [Parameter]
    public string valueMember {
        get { return getterProp<string>("valueMember"); }
        set { setterProp("valueMember", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public object options { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onBindingComplete { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onClose { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCheckChange { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onChange { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onOpen { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onSelect { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onUnselect { get; set; }

    [Parameter]
    public Action onComponentReady { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "onComponentReady", "ChildContent", "onBindingComplete", "onClose", "onCheckChange", "onChange", "onOpen", "onSelect", "onUnselect" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" },
        { "dragEnd", "onDragEnd" },
        { "drag", "onDrag" },
        { "dragStart", "onDragStart" },
        { "targetDrop", "onTargetDrop" },
        { "dropTargetEnter", "onDropTargetEnter" },
        { "dropTargetLeave", "onDropTargetLeave" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public bool addItem()
    {
        return getterMethod<bool>("addItem");
    }

    public void addItem(object item)
    {
        setterMethod("addItem", item);
    }

    public void clearSelection()
    {
        setterMethod("clearSelection");
    }

    public void clear()
    {
        setterMethod("clear");
    }

    public void close()
    {
        setterMethod("close");
    }

    public void checkIndex(double index)
    {
        setterMethod("checkIndex", index);
    }

    public void checkItem(object item)
    {
        setterMethod("checkItem", item);
    }

    public void checkAll()
    {
        setterMethod("checkAll");
    }

    public void clearFilter()
    {
        setterMethod("clearFilter");
    }

    public void destroy()
    {
        setterMethod("destroy");
    }

    public void disableItem(object item)
    {
        setterMethod("disableItem", item);
    }

    public void disableAt(double index)
    {
        setterMethod("disableAt", index);
    }

    public void enableItem(object item)
    {
        setterMethod("enableItem", item);
    }

    public void enableAt(double index)
    {
        setterMethod("enableAt", index);
    }

    public void ensureVisible(double index)
    {
        setterMethod("ensureVisible", index);
    }

    public void focus()
    {
        setterMethod("focus");
    }

    public object getItem()
    {
        return getterMethod<object>("getItem");
    }

    public void getItem(double index)
    {
        setterMethod("getItem", index);
    }

    public object getItemByValue()
    {
        return getterMethod<object>("getItemByValue");
    }

    public void getItemByValue(string itemValue)
    {
        setterMethod("getItemByValue", itemValue);
    }

    public object getItems()
    {
        return getterMethod<object>("getItems");
    }

    public object getCheckedItems()
    {
        return getterMethod<object>("getCheckedItems");
    }

    public object getSelectedItem()
    {
        return getterMethod<object>("getSelectedItem");
    }

    public double getSelectedIndex()
    {
        return getterMethod<double>("getSelectedIndex");
    }

    public void insertAt(object item, double index)
    {
        setterMethod("insertAt", item, index);
    }

    public bool isOpened()
    {
        return getterMethod<bool>("isOpened");
    }

    public void indeterminateIndex(double index)
    {
        setterMethod("indeterminateIndex", index);
    }

    public void indeterminateItem(object item)
    {
        setterMethod("indeterminateItem", item);
    }

    public void loadFromSelect(string arg)
    {
        setterMethod("loadFromSelect", arg);
    }

    public void open()
    {
        setterMethod("open");
    }

    public void removeItem(object item)
    {
        setterMethod("removeItem", item);
    }

    public void removeAt(double index)
    {
        setterMethod("removeAt", index);
    }

    public void selectIndex(double index)
    {
        setterMethod("selectIndex", index);
    }

    public void selectItem(object item)
    {
        setterMethod("selectItem", item);
    }

    public void setContent(string content)
    {
        setterMethod("setContent", content);
    }

    public void updateItem(object newItem, object item)
    {
        setterMethod("updateItem", newItem, item);
    }

    public void updateAt(object item, double index)
    {
        setterMethod("updateAt", item, index);
    }

    public void unselectIndex(double index)
    {
        setterMethod("unselectIndex", index);
    }

    public void unselectItem(object item)
    {
        setterMethod("unselectItem", item);
    }

    public void uncheckIndex(double index)
    {
        setterMethod("uncheckIndex", index);
    }

    public void uncheckItem(object item)
    {
        setterMethod("uncheckItem", item);
    }

    public void uncheckAll()
    {
        setterMethod("uncheckAll");
    }

    public string val()
    {
        return getterMethod<string>("val");
    }

    public void val(string value)
    {
        setterMethod("val", value);
    }

    public IDictionary<string, object> getOptions()
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<IDictionary<string, object>>("jqxBlazor.getOptions", this);
    }

    public void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxDropDownList", initialOptions);
            attachEvents();
            onComponentReady.Invoke();
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "bindingComplete", "emitDropDownListEvent", DotNetObjectReference.Create(new EventsHandler(onBindingComplete)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "close", "emitDropDownListEvent", DotNetObjectReference.Create(new EventsHandler(onClose)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "checkChange", "emitDropDownListEvent", DotNetObjectReference.Create(new EventsHandler(onCheckChange)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "change", "emitDropDownListEvent", DotNetObjectReference.Create(new EventsHandler(onChange)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "open", "emitDropDownListEvent", DotNetObjectReference.Create(new EventsHandler(onOpen)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "select", "emitDropDownListEvent", DotNetObjectReference.Create(new EventsHandler(onSelect)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "unselect", "emitDropDownListEvent", DotNetObjectReference.Create(new EventsHandler(onUnselect)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitDropDownListEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }
}
