@using System.Text.Json;
@inject IJSRuntime JSRuntime;

<div id="@componentID">@ChildContent</div>

@code {
    [Parameter]
    public string title {
        get { return getterProp<string>("title"); }
        set { setterProp("title", value); }
    }

    [Parameter]
    public string description {
        get { return getterProp<string>("description"); }
        set { setterProp("description", value); }
    }

    [Parameter]
    public object source {
        get { return getterProp<object>("source"); }
        set { setterProp("source", value); }
    }

    [Parameter]
    public bool showBorderLine {
        get { return getterProp<bool>("showBorderLine"); }
        set { setterProp("showBorderLine", value); }
    }

    [Parameter]
    public string borderLineColor {
        get { return getterProp<string>("borderLineColor"); }
        set { setterProp("borderLineColor", value); }
    }

    [Parameter]
    public double borderLineWidth {
        get { return getterProp<double>("borderLineWidth"); }
        set { setterProp("borderLineWidth", value); }
    }

    [Parameter]
    public string backgroundColor {
        get { return getterProp<string>("backgroundColor"); }
        set { setterProp("backgroundColor", value); }
    }

    [Parameter]
    public string backgroundImage {
        get { return getterProp<string>("backgroundImage"); }
        set { setterProp("backgroundImage", value); }
    }

    [Parameter]
    public bool showLegend {
        get { return getterProp<bool>("showLegend"); }
        set { setterProp("showLegend", value); }
    }

    [Parameter]
    public object legendLayout {
        get { return getterProp<object>("legendLayout"); }
        set { setterProp("legendLayout", value); }
    }

    [Parameter]
    public object padding {
        get { return getterProp<object>("padding"); }
        set { setterProp("padding", value); }
    }

    [Parameter]
    public object titlePadding {
        get { return getterProp<object>("titlePadding"); }
        set { setterProp("titlePadding", value); }
    }

    [Parameter]
    public string colorScheme {
        get { return getterProp<string>("colorScheme"); }
        set { setterProp("colorScheme", value); }
    }

    [Parameter]
    public bool greyScale {
        get { return getterProp<bool>("greyScale"); }
        set { setterProp("greyScale", value); }
    }

    [Parameter]
    public bool showToolTips {
        get { return getterProp<bool>("showToolTips"); }
        set { setterProp("showToolTips", value); }
    }

    [Parameter]
    public double toolTipShowDelay {
        get { return getterProp<double>("toolTipShowDelay"); }
        set { setterProp("toolTipShowDelay", value); }
    }

    [Parameter]
    public double toolTipHideDelay {
        get { return getterProp<double>("toolTipHideDelay"); }
        set { setterProp("toolTipHideDelay", value); }
    }

    [Parameter]
    public double toolTipMoveDuration {
        get { return getterProp<double>("toolTipMoveDuration"); }
        set { setterProp("toolTipMoveDuration", value); }
    }

    [Parameter]
    public object drawBefore {
        get { return getterProp<object>("drawBefore"); }
        set { setterProp("drawBefore", value); }
    }

    [Parameter]
    public object draw {
        get { return getterProp<object>("draw"); }
        set { setterProp("draw", value); }
    }

    [Parameter]
    public bool rtl {
        get { return getterProp<bool>("rtl"); }
        set { setterProp("rtl", value); }
    }

    [Parameter]
    public bool enableCrosshairs {
        get { return getterProp<bool>("enableCrosshairs"); }
        set { setterProp("enableCrosshairs", value); }
    }

    [Parameter]
    public string crosshairsColor {
        get { return getterProp<string>("crosshairsColor"); }
        set { setterProp("crosshairsColor", value); }
    }

    [Parameter]
    public string crosshairsDashStyle {
        get { return getterProp<string>("crosshairsDashStyle"); }
        set { setterProp("crosshairsDashStyle", value); }
    }

    [Parameter]
    public double crosshairsLineWidth {
        get { return getterProp<double>("crosshairsLineWidth"); }
        set { setterProp("crosshairsLineWidth", value); }
    }

    [Parameter]
    public bool columnSeriesOverlap {
        get { return getterProp<bool>("columnSeriesOverlap"); }
        set { setterProp("columnSeriesOverlap", value); }
    }

    [Parameter]
    public bool enabled {
        get { return getterProp<bool>("enabled"); }
        set { setterProp("enabled", value); }
    }

    [Parameter]
    public bool enableAnimations {
        get { return getterProp<bool>("enableAnimations"); }
        set { setterProp("enableAnimations", value); }
    }

    [Parameter]
    public double animationDuration {
        get { return getterProp<double>("animationDuration"); }
        set { setterProp("animationDuration", value); }
    }

    [Parameter]
    public bool enableAxisTextAnimation {
        get { return getterProp<bool>("enableAxisTextAnimation"); }
        set { setterProp("enableAxisTextAnimation", value); }
    }

    [Parameter]
    public object renderEngine {
        get { return getterProp<object>("renderEngine"); }
        set { setterProp("renderEngine", value); }
    }

    [Parameter]
    public object xAxis {
        get { return getterProp<object>("xAxis"); }
        set { setterProp("xAxis", value); }
    }

    [Parameter]
    public object valueAxis {
        get { return getterProp<object>("valueAxis"); }
        set { setterProp("valueAxis", value); }
    }

    [Parameter]
    public object categoryAxis {
        get { return getterProp<object>("categoryAxis"); }
        set { setterProp("categoryAxis", value); }
    }

    [Parameter]
    public object seriesGroups {
        get { return getterProp<object>("seriesGroups"); }
        set { setterProp("seriesGroups", value); }
    }

    [Parameter]
    public object options { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onToggle { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onClick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRefreshBegin { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRefreshEnd { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRangeSelectionChanging { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRangeSelectionChanged { get; set; }

    [Parameter]
    public Action onComponentReady { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "onComponentReady", "ChildContent", "onToggle", "onClick", "onRefreshBegin", "onRefreshEnd", "onRangeSelectionChanging", "onRangeSelectionChanged" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" },
        { "dragEnd", "onDragEnd" },
        { "drag", "onDrag" },
        { "dragStart", "onDragStart" },
        { "targetDrop", "onTargetDrop" },
        { "dropTargetEnter", "onDropTargetEnter" },
        { "dropTargetLeave", "onDropTargetLeave" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public object getInstance()
    {
        return getterMethod<object>("getInstance");
    }

    public void refresh()
    {
        setterMethod("refresh");
    }

    public void update()
    {
        setterMethod("update");
    }

    public void destroy()
    {
        setterMethod("destroy");
    }

    public void addColorScheme(string schemeName, string[] colors)
    {
        setterMethod("addColorScheme", schemeName, colors);
    }

    public void removeColorScheme(string schemeName)
    {
        setterMethod("removeColorScheme", schemeName);
    }

    public double getItemsCount(double groupIndex, double serieIndex)
    {
        return getterMethod<double>("getItemsCount", groupIndex, serieIndex);
    }

    public object getItemCoord(double groupIndex, double serieIndex, double itemIndex)
    {
        return getterMethod<object>("getItemCoord", groupIndex, serieIndex, itemIndex);
    }

    public object getXAxisRect(double groupIndex)
    {
        return getterMethod<object>("getXAxisRect", groupIndex);
    }

    public object[] getXAxisLabels(double groupIndex)
    {
        return getterMethod<object[]>("getXAxisLabels", groupIndex);
    }

    public object getValueAxisRect(double groupIndex)
    {
        return getterMethod<object>("getValueAxisRect", groupIndex);
    }

    public object[] getValueAxisLabels(double groupIndex)
    {
        return getterMethod<object[]>("getValueAxisLabels", groupIndex);
    }

    public string[] getColorScheme(string colorScheme)
    {
        return getterMethod<string[]>("getColorScheme", colorScheme);
    }

    public void hideSerie(double groupIndex, double serieIndex, double itemIndex)
    {
        setterMethod("hideSerie", groupIndex, serieIndex, itemIndex);
    }

    public void showSerie(double groupIndex, double serieIndex, double itemIndex)
    {
        setterMethod("showSerie", groupIndex, serieIndex, itemIndex);
    }

    public void hideToolTip(double hideDelay)
    {
        setterMethod("hideToolTip", hideDelay);
    }

    public void showToolTip(double groupIndex, double serieIndex, double itemIndex, double showDelay, double hideDelay)
    {
        setterMethod("showToolTip", groupIndex, serieIndex, itemIndex, showDelay, hideDelay);
    }

    public void saveAsJPEG(string fileName, string exportServerUrl)
    {
        setterMethod("saveAsJPEG", fileName, exportServerUrl);
    }

    public void saveAsPNG(string fileName, string exportServerUrl)
    {
        setterMethod("saveAsPNG", fileName, exportServerUrl);
    }

    public void saveAsPDF(string fileName, string exportServerUrl)
    {
        setterMethod("saveAsPDF", fileName, exportServerUrl);
    }

    public object getXAxisValue(double offset, double groupIndex)
    {
        return getterMethod<object>("getXAxisValue", offset, groupIndex);
    }

    public object getValueAxisValue(double offset, double groupIndex)
    {
        return getterMethod<object>("getValueAxisValue", offset, groupIndex);
    }

    public IDictionary<string, object> getOptions()
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<IDictionary<string, object>>("jqxBlazor.getOptions", this);
    }

    public void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxChart", initialOptions);

            Task.Delay(200).ContinueWith((action) =>
            {
                attachEvents();
                onComponentReady?.Invoke();
            }); 
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "toggle", "emitChartEvent", DotNetObjectReference.Create(new EventsHandler(onToggle)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "click", "emitChartEvent", DotNetObjectReference.Create(new EventsHandler(onClick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "refreshBegin", "emitChartEvent", DotNetObjectReference.Create(new EventsHandler(onRefreshBegin)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "refreshEnd", "emitChartEvent", DotNetObjectReference.Create(new EventsHandler(onRefreshEnd)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rangeSelectionChanging", "emitChartEvent", DotNetObjectReference.Create(new EventsHandler(onRangeSelectionChanging)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rangeSelectionChanged", "emitChartEvent", DotNetObjectReference.Create(new EventsHandler(onRangeSelectionChanged)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name, params object[] args)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name, args);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitChartEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }
}
