@using System.Text.Json;
@inject IJSRuntime JSRuntime;

<div id="@componentID">@ChildContent</div>

@code {
    [Parameter]
    public object animationType {
        get { return getterProp<object>("animationType"); }
        set { setterProp("animationType", value); }
    }

    [Parameter]
    public object arrowPosition {
        get { return getterProp<object>("arrowPosition"); }
        set { setterProp("arrowPosition", value); }
    }

    [Parameter]
    public double collapseAnimationDuration {
        get { return getterProp<double>("collapseAnimationDuration"); }
        set { setterProp("collapseAnimationDuration", value); }
    }

    [Parameter]
    public bool disabled {
        get { return getterProp<bool>("disabled"); }
        set { setterProp("disabled", value); }
    }

    [Parameter]
    public double expandAnimationDuration {
        get { return getterProp<double>("expandAnimationDuration"); }
        set { setterProp("expandAnimationDuration", value); }
    }

    [Parameter]
    public object expandMode {
        get { return getterProp<object>("expandMode"); }
        set { setterProp("expandMode", value); }
    }

    [Parameter]
    public double[] expandedIndexes {
        get { return getterProp<double[]>("expandedIndexes"); }
        set { setterProp("expandedIndexes", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public object initContent {
        get { return getterProp<object>("initContent"); }
        set { setterProp("initContent", value); }
    }

    [Parameter]
    public bool rtl {
        get { return getterProp<bool>("rtl"); }
        set { setterProp("rtl", value); }
    }

    [Parameter]
    public bool showArrow {
        get { return getterProp<bool>("showArrow"); }
        set { setterProp("showArrow", value); }
    }

    [Parameter]
    public string theme {
        get { return getterProp<string>("theme"); }
        set { setterProp("theme", value); }
    }

    [Parameter]
    public object toggleMode {
        get { return getterProp<object>("toggleMode"); }
        set { setterProp("toggleMode", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public object options { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCollapsingItem { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCollapsedItem { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onExpandingItem { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onExpandedItem { get; set; }

    [Parameter]
    public Action onComponentReady { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "onComponentReady", "ChildContent", "onCollapsingItem", "onCollapsedItem", "onExpandingItem", "onExpandedItem" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" },
        { "dragEnd", "onDragEnd" },
        { "drag", "onDrag" },
        { "dragStart", "onDragStart" },
        { "targetDrop", "onTargetDrop" },
        { "dropTargetEnter", "onDropTargetEnter" },
        { "dropTargetLeave", "onDropTargetLeave" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public void add(object header, object content)
    {
        setterMethod("add", header, content);
    }

    public void collapseAt(object index)
    {
        setterMethod("collapseAt", index);
    }

    public void disableAt(object index)
    {
        setterMethod("disableAt", index);
    }

    public void disable()
    {
        setterMethod("disable");
    }

    public void destroy()
    {
        setterMethod("destroy");
    }

    public void expandAt(object index)
    {
        setterMethod("expandAt", index);
    }

    public void enableAt(object index)
    {
        setterMethod("enableAt", index);
    }

    public void enable()
    {
        setterMethod("enable");
    }

    public void focus()
    {
        setterMethod("focus");
    }

    public string getHeaderContentAt()
    {
        return getterMethod<string>("getHeaderContentAt");
    }

    public void getHeaderContentAt(object index)
    {
        setterMethod("getHeaderContentAt", index);
    }

    public string getContentAt()
    {
        return getterMethod<string>("getContentAt");
    }

    public void getContentAt(object index)
    {
        setterMethod("getContentAt", index);
    }

    public void hideArrowAt(object index)
    {
        setterMethod("hideArrowAt", index);
    }

    public void invalidate()
    {
        setterMethod("invalidate");
    }

    public void insert(double Index, object header, object content)
    {
        setterMethod("insert", Index, header, content);
    }

    public void refresh()
    {
        setterMethod("refresh");
    }

    public void render()
    {
        setterMethod("render");
    }

    public void remove(object index)
    {
        setterMethod("remove", index);
    }

    public void setContentAt(double index, object item)
    {
        setterMethod("setContentAt", index, item);
    }

    public void setHeaderContentAt(double index, object item)
    {
        setterMethod("setHeaderContentAt", index, item);
    }

    public void showArrowAt(object index)
    {
        setterMethod("showArrowAt", index);
    }

    public void update(double index, object header, object content)
    {
        setterMethod("update", index, header, content);
    }

    public object val()
    {
        return getterMethod<object>("val");
    }

    public void val(object value)
    {
        setterMethod("val", value);
    }

    public IDictionary<string, object> getOptions()
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<IDictionary<string, object>>("jqxBlazor.getOptions", this);
    }

    public void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxNavigationBar", initialOptions);
            attachEvents();
            onComponentReady?.Invoke();
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "collapsingItem", "emitNavigationBarEvent", DotNetObjectReference.Create(new EventsHandler(onCollapsingItem)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "collapsedItem", "emitNavigationBarEvent", DotNetObjectReference.Create(new EventsHandler(onCollapsedItem)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "expandingItem", "emitNavigationBarEvent", DotNetObjectReference.Create(new EventsHandler(onExpandingItem)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "expandedItem", "emitNavigationBarEvent", DotNetObjectReference.Create(new EventsHandler(onExpandedItem)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitNavigationBarEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }
}
