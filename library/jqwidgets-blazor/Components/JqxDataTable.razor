@using System.Text.Json;
@inject IJSRuntime JSRuntime;

<div id="@componentID">@ChildContent</div>

@code {
    [Parameter]
    public bool altRows {
        get { return getterProp<bool>("altRows"); }
        set { setterProp("altRows", value); }
    }

    [Parameter]
    public bool autoRowHeight {
        get { return getterProp<bool>("autoRowHeight"); }
        set { setterProp("autoRowHeight", value); }
    }

    [Parameter]
    public double aggregatesHeight {
        get { return getterProp<double>("aggregatesHeight"); }
        set { setterProp("aggregatesHeight", value); }
    }

    [Parameter]
    public bool autoShowLoadElement {
        get { return getterProp<bool>("autoShowLoadElement"); }
        set { setterProp("autoShowLoadElement", value); }
    }

    [Parameter]
    public double columnsHeight {
        get { return getterProp<double>("columnsHeight"); }
        set { setterProp("columnsHeight", value); }
    }

    [Parameter]
    public object columns {
        get { return getterProp<object>("columns"); }
        set { setterProp("columns", value); }
    }

    [Parameter]
    public object columnGroups {
        get { return getterProp<object>("columnGroups"); }
        set { setterProp("columnGroups", value); }
    }

    [Parameter]
    public bool columnsResize {
        get { return getterProp<bool>("columnsResize"); }
        set { setterProp("columnsResize", value); }
    }

    [Parameter]
    public bool columnsReorder {
        get { return getterProp<bool>("columnsReorder"); }
        set { setterProp("columnsReorder", value); }
    }

    [Parameter]
    public bool disabled {
        get { return getterProp<bool>("disabled"); }
        set { setterProp("disabled", value); }
    }

    [Parameter]
    public bool editable {
        get { return getterProp<bool>("editable"); }
        set { setterProp("editable", value); }
    }

    [Parameter]
    public object editSettings {
        get { return getterProp<object>("editSettings"); }
        set { setterProp("editSettings", value); }
    }

    [Parameter]
    public object exportSettings {
        get { return getterProp<object>("exportSettings"); }
        set { setterProp("exportSettings", value); }
    }

    [Parameter]
    public bool enableHover {
        get { return getterProp<bool>("enableHover"); }
        set { setterProp("enableHover", value); }
    }

    [Parameter]
    public bool enableBrowserSelection {
        get { return getterProp<bool>("enableBrowserSelection"); }
        set { setterProp("enableBrowserSelection", value); }
    }

    [Parameter]
    public bool filterable {
        get { return getterProp<bool>("filterable"); }
        set { setterProp("filterable", value); }
    }

    [Parameter]
    public double filterHeight {
        get { return getterProp<double>("filterHeight"); }
        set { setterProp("filterHeight", value); }
    }

    [Parameter]
    public object filterMode {
        get { return getterProp<object>("filterMode"); }
        set { setterProp("filterMode", value); }
    }

    [Parameter]
    public object[] groups {
        get { return getterProp<object[]>("groups"); }
        set { setterProp("groups", value); }
    }

    [Parameter]
    public object groupsRenderer {
        get { return getterProp<object>("groupsRenderer"); }
        set { setterProp("groupsRenderer", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public object initRowDetails {
        get { return getterProp<object>("initRowDetails"); }
        set { setterProp("initRowDetails", value); }
    }

    [Parameter]
    public bool incrementalSearch {
        get { return getterProp<bool>("incrementalSearch"); }
        set { setterProp("incrementalSearch", value); }
    }

    [Parameter]
    public object localization {
        get { return getterProp<object>("localization"); }
        set { setterProp("localization", value); }
    }

    [Parameter]
    public double pagerHeight {
        get { return getterProp<double>("pagerHeight"); }
        set { setterProp("pagerHeight", value); }
    }

    [Parameter]
    public double pageSize {
        get { return getterProp<double>("pageSize"); }
        set { setterProp("pageSize", value); }
    }

    [Parameter]
    public object pageSizeOptions {
        get { return getterProp<object>("pageSizeOptions"); }
        set { setterProp("pageSizeOptions", value); }
    }

    [Parameter]
    public bool pageable {
        get { return getterProp<bool>("pageable"); }
        set { setterProp("pageable", value); }
    }

    [Parameter]
    public object pagerPosition {
        get { return getterProp<object>("pagerPosition"); }
        set { setterProp("pagerPosition", value); }
    }

    [Parameter]
    public object pagerMode {
        get { return getterProp<object>("pagerMode"); }
        set { setterProp("pagerMode", value); }
    }

    [Parameter]
    public double pagerButtonsCount {
        get { return getterProp<double>("pagerButtonsCount"); }
        set { setterProp("pagerButtonsCount", value); }
    }

    [Parameter]
    public object pagerRenderer {
        get { return getterProp<object>("pagerRenderer"); }
        set { setterProp("pagerRenderer", value); }
    }

    [Parameter]
    public object ready {
        get { return getterProp<object>("ready"); }
        set { setterProp("ready", value); }
    }

    [Parameter]
    public bool rowDetails {
        get { return getterProp<bool>("rowDetails"); }
        set { setterProp("rowDetails", value); }
    }

    [Parameter]
    public object renderToolbar {
        get { return getterProp<object>("renderToolbar"); }
        set { setterProp("renderToolbar", value); }
    }

    [Parameter]
    public object renderStatusBar {
        get { return getterProp<object>("renderStatusBar"); }
        set { setterProp("renderStatusBar", value); }
    }

    [Parameter]
    public object rendering {
        get { return getterProp<object>("rendering"); }
        set { setterProp("rendering", value); }
    }

    [Parameter]
    public object rendered {
        get { return getterProp<object>("rendered"); }
        set { setterProp("rendered", value); }
    }

    [Parameter]
    public bool rtl {
        get { return getterProp<bool>("rtl"); }
        set { setterProp("rtl", value); }
    }

    [Parameter]
    public object source {
        get { return getterProp<object>("source"); }
        set { setterProp("source", value); }
    }

    [Parameter]
    public bool sortable {
        get { return getterProp<bool>("sortable"); }
        set { setterProp("sortable", value); }
    }

    [Parameter]
    public bool showAggregates {
        get { return getterProp<bool>("showAggregates"); }
        set { setterProp("showAggregates", value); }
    }

    [Parameter]
    public bool showToolbar {
        get { return getterProp<bool>("showToolbar"); }
        set { setterProp("showToolbar", value); }
    }

    [Parameter]
    public bool showStatusbar {
        get { return getterProp<bool>("showStatusbar"); }
        set { setterProp("showStatusbar", value); }
    }

    [Parameter]
    public double statusBarHeight {
        get { return getterProp<double>("statusBarHeight"); }
        set { setterProp("statusBarHeight", value); }
    }

    [Parameter]
    public object scrollBarSize {
        get { return getterProp<object>("scrollBarSize"); }
        set { setterProp("scrollBarSize", value); }
    }

    [Parameter]
    public object selectionMode {
        get { return getterProp<object>("selectionMode"); }
        set { setterProp("selectionMode", value); }
    }

    [Parameter]
    public bool serverProcessing {
        get { return getterProp<bool>("serverProcessing"); }
        set { setterProp("serverProcessing", value); }
    }

    [Parameter]
    public bool showHeader {
        get { return getterProp<bool>("showHeader"); }
        set { setterProp("showHeader", value); }
    }

    [Parameter]
    public string theme {
        get { return getterProp<string>("theme"); }
        set { setterProp("theme", value); }
    }

    [Parameter]
    public double toolbarHeight {
        get { return getterProp<double>("toolbarHeight"); }
        set { setterProp("toolbarHeight", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public object options { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onBindingComplete { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCellBeginEdit { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCellEndEdit { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCellValueChanged { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onColumnResized { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onColumnReordered { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onSort { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onFilter { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onPageChanged { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onPageSizeChanged { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRowClick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRowDoubleClick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRowSelect { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRowUnselect { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRowBeginEdit { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRowEndEdit { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRowExpand { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRowCollapse { get; set; }

    [Parameter]
    public Action onComponentReady { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "onComponentReady", "ChildContent", "onBindingComplete", "onCellBeginEdit", "onCellEndEdit", "onCellValueChanged", "onColumnResized", "onColumnReordered", "onSort", "onFilter", "onPageChanged", "onPageSizeChanged", "onRowClick", "onRowDoubleClick", "onRowSelect", "onRowUnselect", "onRowBeginEdit", "onRowEndEdit", "onRowExpand", "onRowCollapse" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" },
        { "dragEnd", "onDragEnd" },
        { "drag", "onDrag" },
        { "dragStart", "onDragStart" },
        { "targetDrop", "onTargetDrop" },
        { "dropTargetEnter", "onDropTargetEnter" },
        { "dropTargetLeave", "onDropTargetLeave" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public void addRow(double rowIndex, object rowData, object rowPosition)
    {
        setterMethod("addRow", rowIndex, rowData, rowPosition);
    }

    public void addFilter(string dataField, object filerGroup)
    {
        setterMethod("addFilter", dataField, filerGroup);
    }

    public void applyFilters()
    {
        setterMethod("applyFilters");
    }

    public void beginUpdate()
    {
        setterMethod("beginUpdate");
    }

    public void beginRowEdit(double rowIndex)
    {
        setterMethod("beginRowEdit", rowIndex);
    }

    public void beginCellEdit(double rowIndex, string dataField)
    {
        setterMethod("beginCellEdit", rowIndex, dataField);
    }

    public void clearSelection()
    {
        setterMethod("clearSelection");
    }

    public void clearFilters()
    {
        setterMethod("clearFilters");
    }

    public void clear()
    {
        setterMethod("clear");
    }

    public void destroy()
    {
        setterMethod("destroy");
    }

    public void deleteRow(double rowIndex)
    {
        setterMethod("deleteRow", rowIndex);
    }

    public void endUpdate()
    {
        setterMethod("endUpdate");
    }

    public void ensureRowVisible(double rowIndex)
    {
        setterMethod("ensureRowVisible", rowIndex);
    }

    public void endRowEdit(double rowIndex, bool cancelChanges)
    {
        setterMethod("endRowEdit", rowIndex, cancelChanges);
    }

    public void endCellEdit(double rowIndex, string dataField)
    {
        setterMethod("endCellEdit", rowIndex, dataField);
    }

    public object exportData(object exportDataType)
    {
        return getterMethod<object>("exportData", exportDataType);
    }

    public void focus()
    {
        setterMethod("focus");
    }

    public object getColumnProperty(string dataField, string propertyName)
    {
        return getterMethod<object>("getColumnProperty", dataField, propertyName);
    }

    public void goToPage(double pageIndex)
    {
        setterMethod("goToPage", pageIndex);
    }

    public void goToPrevPage()
    {
        setterMethod("goToPrevPage");
    }

    public void goToNextPage()
    {
        setterMethod("goToNextPage");
    }

    public object[] getSelection()
    {
        return getterMethod<object[]>("getSelection");
    }

    public object[] getRows()
    {
        return getterMethod<object[]>("getRows");
    }

    public object[] getView()
    {
        return getterMethod<object[]>("getView");
    }

    public object getCellValue(double rowIndex, string dataField)
    {
        return getterMethod<object>("getCellValue", rowIndex, dataField);
    }

    public void hideColumn(string dataField)
    {
        setterMethod("hideColumn", dataField);
    }

    public void hideDetails(bool rowIndex)
    {
        setterMethod("hideDetails", rowIndex);
    }

    public bool isBindingCompleted()
    {
        return getterMethod<bool>("isBindingCompleted");
    }

    public void lockRow(double rowIndex)
    {
        setterMethod("lockRow", rowIndex);
    }

    public void refresh()
    {
        setterMethod("refresh");
    }

    public void render()
    {
        setterMethod("render");
    }

    public void removeFilter(string dataField)
    {
        setterMethod("removeFilter", dataField);
    }

    public void scrollOffset(double top, double left)
    {
        setterMethod("scrollOffset", top, left);
    }

    public void setColumnProperty(string dataField, string propertyName, object propertyValue)
    {
        setterMethod("setColumnProperty", dataField, propertyName, propertyValue);
    }

    public void showColumn(string dataField)
    {
        setterMethod("showColumn", dataField);
    }

    public void selectRow(double rowIndex)
    {
        setterMethod("selectRow", rowIndex);
    }

    public void showDetails(double rowIndex)
    {
        setterMethod("showDetails", rowIndex);
    }

    public void setCellValue(double rowIndex, string dataField, object value)
    {
        setterMethod("setCellValue", rowIndex, dataField, value);
    }

    public void sortBy(string dataField, object sortOrder)
    {
        setterMethod("sortBy", dataField, sortOrder);
    }

    public bool updating()
    {
        return getterMethod<bool>("updating");
    }

    public void updateBoundData()
    {
        setterMethod("updateBoundData");
    }

    public void unselectRow(double rowIndex)
    {
        setterMethod("unselectRow", rowIndex);
    }

    public void updateRow(double rowIndex, object rowData)
    {
        setterMethod("updateRow", rowIndex, rowData);
    }

    public void unlockRow(double rowIndex)
    {
        setterMethod("unlockRow", rowIndex);
    }

    public IDictionary<string, object> getOptions()
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<IDictionary<string, object>>("jqxBlazor.getOptions", this);
    }

    public void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxDataTable", initialOptions);

            Task.Delay(200).ContinueWith((action) =>
            {
                attachEvents();
                onComponentReady?.Invoke();
            }); 
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "bindingComplete", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onBindingComplete)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "cellBeginEdit", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onCellBeginEdit)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "cellEndEdit", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onCellEndEdit)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "cellValueChanged", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onCellValueChanged)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "columnResized", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onColumnResized)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "columnReordered", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onColumnReordered)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "sort", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onSort)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "filter", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onFilter)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "pageChanged", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onPageChanged)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "pageSizeChanged", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onPageSizeChanged)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rowClick", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onRowClick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rowDoubleClick", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onRowDoubleClick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rowSelect", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onRowSelect)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rowUnselect", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onRowUnselect)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rowBeginEdit", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onRowBeginEdit)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rowEndEdit", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onRowEndEdit)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rowExpand", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onRowExpand)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rowCollapse", "emitDataTableEvent", DotNetObjectReference.Create(new EventsHandler(onRowCollapse)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name, params object[] args)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name, args);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitDataTableEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }
}
