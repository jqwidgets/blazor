#pragma checksum "C:\inetpub\wwwroot\blazor\library\jQWidgets.Blazor\Components\JqxGrid.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "52248a4b7790bd463c9373f409d2ba6342cecef9"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace jQWidgets.Blazor.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\inetpub\wwwroot\blazor\library\jQWidgets.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 2 "C:\inetpub\wwwroot\blazor\library\jQWidgets.Blazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 1 "C:\inetpub\wwwroot\blazor\library\jQWidgets.Blazor\Components\JqxGrid.razor"
using System.Text.Json;

#line default
#line hidden
    public partial class JqxGrid : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 6 "C:\inetpub\wwwroot\blazor\library\jQWidgets.Blazor\Components\JqxGrid.razor"
       

    [Parameter]
    public bool altrows {
        get { return getterProp<bool>("altrows"); }
        set { setterProp("altrows", value); }
    }

    [Parameter]
    public double altstart {
        get { return getterProp<double>("altstart"); }
        set { setterProp("altstart", value); }
    }

    [Parameter]
    public double altstep {
        get { return getterProp<double>("altstep"); }
        set { setterProp("altstep", value); }
    }

    [Parameter]
    public bool autoshowloadelement {
        get { return getterProp<bool>("autoshowloadelement"); }
        set { setterProp("autoshowloadelement", value); }
    }

    [Parameter]
    public bool autoshowfiltericon {
        get { return getterProp<bool>("autoshowfiltericon"); }
        set { setterProp("autoshowfiltericon", value); }
    }

    [Parameter]
    public bool autoshowcolumnsmenubutton {
        get { return getterProp<bool>("autoshowcolumnsmenubutton"); }
        set { setterProp("autoshowcolumnsmenubutton", value); }
    }

    [Parameter]
    public bool showcolumnlines {
        get { return getterProp<bool>("showcolumnlines"); }
        set { setterProp("showcolumnlines", value); }
    }

    [Parameter]
    public bool showrowlines {
        get { return getterProp<bool>("showrowlines"); }
        set { setterProp("showrowlines", value); }
    }

    [Parameter]
    public bool showcolumnheaderlines {
        get { return getterProp<bool>("showcolumnheaderlines"); }
        set { setterProp("showcolumnheaderlines", value); }
    }

    [Parameter]
    public bool adaptive {
        get { return getterProp<bool>("adaptive"); }
        set { setterProp("adaptive", value); }
    }

    [Parameter]
    public double adaptivewidth {
        get { return getterProp<double>("adaptivewidth"); }
        set { setterProp("adaptivewidth", value); }
    }

    [Parameter]
    public bool clipboard {
        get { return getterProp<bool>("clipboard"); }
        set { setterProp("clipboard", value); }
    }

    [Parameter]
    public bool closeablegroups {
        get { return getterProp<bool>("closeablegroups"); }
        set { setterProp("closeablegroups", value); }
    }

    [Parameter]
    public double columnsmenuwidth {
        get { return getterProp<double>("columnsmenuwidth"); }
        set { setterProp("columnsmenuwidth", value); }
    }

    [Parameter]
    public object columnmenuopening {
        get { return getterProp<object>("columnmenuopening"); }
        set { setterProp("columnmenuopening", value); }
    }

    [Parameter]
    public object columnmenuclosing {
        get { return getterProp<object>("columnmenuclosing"); }
        set { setterProp("columnmenuclosing", value); }
    }

    [Parameter]
    public object cellhover {
        get { return getterProp<object>("cellhover"); }
        set { setterProp("cellhover", value); }
    }

    [Parameter]
    public bool enablekeyboarddelete {
        get { return getterProp<bool>("enablekeyboarddelete"); }
        set { setterProp("enablekeyboarddelete", value); }
    }

    [Parameter]
    public bool enableellipsis {
        get { return getterProp<bool>("enableellipsis"); }
        set { setterProp("enableellipsis", value); }
    }

    [Parameter]
    public bool enablemousewheel {
        get { return getterProp<bool>("enablemousewheel"); }
        set { setterProp("enablemousewheel", value); }
    }

    [Parameter]
    public bool enableanimations {
        get { return getterProp<bool>("enableanimations"); }
        set { setterProp("enableanimations", value); }
    }

    [Parameter]
    public bool enabletooltips {
        get { return getterProp<bool>("enabletooltips"); }
        set { setterProp("enabletooltips", value); }
    }

    [Parameter]
    public bool enablehover {
        get { return getterProp<bool>("enablehover"); }
        set { setterProp("enablehover", value); }
    }

    [Parameter]
    public bool enablebrowserselection {
        get { return getterProp<bool>("enablebrowserselection"); }
        set { setterProp("enablebrowserselection", value); }
    }

    [Parameter]
    public object everpresentrowposition {
        get { return getterProp<object>("everpresentrowposition"); }
        set { setterProp("everpresentrowposition", value); }
    }

    [Parameter]
    public double everpresentrowheight {
        get { return getterProp<double>("everpresentrowheight"); }
        set { setterProp("everpresentrowheight", value); }
    }

    [Parameter]
    public string everpresentrowactions {
        get { return getterProp<string>("everpresentrowactions"); }
        set { setterProp("everpresentrowactions", value); }
    }

    [Parameter]
    public object everpresentrowactionsmode {
        get { return getterProp<object>("everpresentrowactionsmode"); }
        set { setterProp("everpresentrowactionsmode", value); }
    }

    [Parameter]
    public double filterrowheight {
        get { return getterProp<double>("filterrowheight"); }
        set { setterProp("filterrowheight", value); }
    }

    [Parameter]
    public object filtermode {
        get { return getterProp<object>("filtermode"); }
        set { setterProp("filtermode", value); }
    }

    [Parameter]
    public object groupsrenderer {
        get { return getterProp<object>("groupsrenderer"); }
        set { setterProp("groupsrenderer", value); }
    }

    [Parameter]
    public object groupcolumnrenderer {
        get { return getterProp<object>("groupcolumnrenderer"); }
        set { setterProp("groupcolumnrenderer", value); }
    }

    [Parameter]
    public bool groupsexpandedbydefault {
        get { return getterProp<bool>("groupsexpandedbydefault"); }
        set { setterProp("groupsexpandedbydefault", value); }
    }

    [Parameter]
    public object handlekeyboardnavigation {
        get { return getterProp<object>("handlekeyboardnavigation"); }
        set { setterProp("handlekeyboardnavigation", value); }
    }

    [Parameter]
    public object pagerrenderer {
        get { return getterProp<object>("pagerrenderer"); }
        set { setterProp("pagerrenderer", value); }
    }

    [Parameter]
    public bool rtl {
        get { return getterProp<bool>("rtl"); }
        set { setterProp("rtl", value); }
    }

    [Parameter]
    public bool showdefaultloadelement {
        get { return getterProp<bool>("showdefaultloadelement"); }
        set { setterProp("showdefaultloadelement", value); }
    }

    [Parameter]
    public bool showfiltercolumnbackground {
        get { return getterProp<bool>("showfiltercolumnbackground"); }
        set { setterProp("showfiltercolumnbackground", value); }
    }

    [Parameter]
    public bool showfiltermenuitems {
        get { return getterProp<bool>("showfiltermenuitems"); }
        set { setterProp("showfiltermenuitems", value); }
    }

    [Parameter]
    public bool showpinnedcolumnbackground {
        get { return getterProp<bool>("showpinnedcolumnbackground"); }
        set { setterProp("showpinnedcolumnbackground", value); }
    }

    [Parameter]
    public bool showsortcolumnbackground {
        get { return getterProp<bool>("showsortcolumnbackground"); }
        set { setterProp("showsortcolumnbackground", value); }
    }

    [Parameter]
    public bool showsortmenuitems {
        get { return getterProp<bool>("showsortmenuitems"); }
        set { setterProp("showsortmenuitems", value); }
    }

    [Parameter]
    public bool showgroupmenuitems {
        get { return getterProp<bool>("showgroupmenuitems"); }
        set { setterProp("showgroupmenuitems", value); }
    }

    [Parameter]
    public bool showrowdetailscolumn {
        get { return getterProp<bool>("showrowdetailscolumn"); }
        set { setterProp("showrowdetailscolumn", value); }
    }

    [Parameter]
    public bool showheader {
        get { return getterProp<bool>("showheader"); }
        set { setterProp("showheader", value); }
    }

    [Parameter]
    public bool showgroupsheader {
        get { return getterProp<bool>("showgroupsheader"); }
        set { setterProp("showgroupsheader", value); }
    }

    [Parameter]
    public bool showaggregates {
        get { return getterProp<bool>("showaggregates"); }
        set { setterProp("showaggregates", value); }
    }

    [Parameter]
    public bool showgroupaggregates {
        get { return getterProp<bool>("showgroupaggregates"); }
        set { setterProp("showgroupaggregates", value); }
    }

    [Parameter]
    public bool showeverpresentrow {
        get { return getterProp<bool>("showeverpresentrow"); }
        set { setterProp("showeverpresentrow", value); }
    }

    [Parameter]
    public bool showfilterrow {
        get { return getterProp<bool>("showfilterrow"); }
        set { setterProp("showfilterrow", value); }
    }

    [Parameter]
    public bool showemptyrow {
        get { return getterProp<bool>("showemptyrow"); }
        set { setterProp("showemptyrow", value); }
    }

    [Parameter]
    public bool showstatusbar {
        get { return getterProp<bool>("showstatusbar"); }
        set { setterProp("showstatusbar", value); }
    }

    [Parameter]
    public double statusbarheight {
        get { return getterProp<double>("statusbarheight"); }
        set { setterProp("statusbarheight", value); }
    }

    [Parameter]
    public bool showtoolbar {
        get { return getterProp<bool>("showtoolbar"); }
        set { setterProp("showtoolbar", value); }
    }

    [Parameter]
    public object selectionmode {
        get { return getterProp<object>("selectionmode"); }
        set { setterProp("selectionmode", value); }
    }

    [Parameter]
    public object updatefilterconditions {
        get { return getterProp<object>("updatefilterconditions"); }
        set { setterProp("updatefilterconditions", value); }
    }

    [Parameter]
    public object updatefilterpanel {
        get { return getterProp<object>("updatefilterpanel"); }
        set { setterProp("updatefilterpanel", value); }
    }

    [Parameter]
    public string theme {
        get { return getterProp<string>("theme"); }
        set { setterProp("theme", value); }
    }

    [Parameter]
    public double toolbarheight {
        get { return getterProp<double>("toolbarheight"); }
        set { setterProp("toolbarheight", value); }
    }

    [Parameter]
    public bool autoheight {
        get { return getterProp<bool>("autoheight"); }
        set { setterProp("autoheight", value); }
    }

    [Parameter]
    public bool autorowheight {
        get { return getterProp<bool>("autorowheight"); }
        set { setterProp("autorowheight", value); }
    }

    [Parameter]
    public double columnsheight {
        get { return getterProp<double>("columnsheight"); }
        set { setterProp("columnsheight", value); }
    }

    [Parameter]
    public string[] deferreddatafields {
        get { return getterProp<string[]>("deferreddatafields"); }
        set { setterProp("deferreddatafields", value); }
    }

    [Parameter]
    public double groupsheaderheight {
        get { return getterProp<double>("groupsheaderheight"); }
        set { setterProp("groupsheaderheight", value); }
    }

    [Parameter]
    public double groupindentwidth {
        get { return getterProp<double>("groupindentwidth"); }
        set { setterProp("groupindentwidth", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public object pagerheight {
        get { return getterProp<object>("pagerheight"); }
        set { setterProp("pagerheight", value); }
    }

    [Parameter]
    public double rowsheight {
        get { return getterProp<double>("rowsheight"); }
        set { setterProp("rowsheight", value); }
    }

    [Parameter]
    public object scrollbarsize {
        get { return getterProp<object>("scrollbarsize"); }
        set { setterProp("scrollbarsize", value); }
    }

    [Parameter]
    public object scrollmode {
        get { return getterProp<object>("scrollmode"); }
        set { setterProp("scrollmode", value); }
    }

    [Parameter]
    public object scrollfeedback {
        get { return getterProp<object>("scrollfeedback"); }
        set { setterProp("scrollfeedback", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public bool autosavestate {
        get { return getterProp<bool>("autosavestate"); }
        set { setterProp("autosavestate", value); }
    }

    [Parameter]
    public bool autoloadstate {
        get { return getterProp<bool>("autoloadstate"); }
        set { setterProp("autoloadstate", value); }
    }

    [Parameter]
    public object columns {
        get { return getterProp<object>("columns"); }
        set { setterProp("columns", value); }
    }

    [Parameter]
    public object[] columngroups {
        get { return getterProp<object[]>("columngroups"); }
        set { setterProp("columngroups", value); }
    }

    [Parameter]
    public bool columnsmenu {
        get { return getterProp<bool>("columnsmenu"); }
        set { setterProp("columnsmenu", value); }
    }

    [Parameter]
    public bool columnsresize {
        get { return getterProp<bool>("columnsresize"); }
        set { setterProp("columnsresize", value); }
    }

    [Parameter]
    public bool columnsautoresize {
        get { return getterProp<bool>("columnsautoresize"); }
        set { setterProp("columnsautoresize", value); }
    }

    [Parameter]
    public bool columnsreorder {
        get { return getterProp<bool>("columnsreorder"); }
        set { setterProp("columnsreorder", value); }
    }

    [Parameter]
    public bool disabled {
        get { return getterProp<bool>("disabled"); }
        set { setterProp("disabled", value); }
    }

    [Parameter]
    public bool editable {
        get { return getterProp<bool>("editable"); }
        set { setterProp("editable", value); }
    }

    [Parameter]
    public object editmode {
        get { return getterProp<object>("editmode"); }
        set { setterProp("editmode", value); }
    }

    [Parameter]
    public object filter {
        get { return getterProp<object>("filter"); }
        set { setterProp("filter", value); }
    }

    [Parameter]
    public bool filterable {
        get { return getterProp<bool>("filterable"); }
        set { setterProp("filterable", value); }
    }

    [Parameter]
    public bool groupable {
        get { return getterProp<bool>("groupable"); }
        set { setterProp("groupable", value); }
    }

    [Parameter]
    public string[] groups {
        get { return getterProp<string[]>("groups"); }
        set { setterProp("groups", value); }
    }

    [Parameter]
    public double horizontalscrollbarstep {
        get { return getterProp<double>("horizontalscrollbarstep"); }
        set { setterProp("horizontalscrollbarstep", value); }
    }

    [Parameter]
    public double horizontalscrollbarlargestep {
        get { return getterProp<double>("horizontalscrollbarlargestep"); }
        set { setterProp("horizontalscrollbarlargestep", value); }
    }

    [Parameter]
    public object initrowdetails {
        get { return getterProp<object>("initrowdetails"); }
        set { setterProp("initrowdetails", value); }
    }

    [Parameter]
    public bool keyboardnavigation {
        get { return getterProp<bool>("keyboardnavigation"); }
        set { setterProp("keyboardnavigation", value); }
    }

    [Parameter]
    public object localization {
        get { return getterProp<object>("localization"); }
        set { setterProp("localization", value); }
    }

    [Parameter]
    public double pagesize {
        get { return getterProp<double>("pagesize"); }
        set { setterProp("pagesize", value); }
    }

    [Parameter]
    public object pagesizeoptions {
        get { return getterProp<object>("pagesizeoptions"); }
        set { setterProp("pagesizeoptions", value); }
    }

    [Parameter]
    public object pagermode {
        get { return getterProp<object>("pagermode"); }
        set { setterProp("pagermode", value); }
    }

    [Parameter]
    public double pagerbuttonscount {
        get { return getterProp<double>("pagerbuttonscount"); }
        set { setterProp("pagerbuttonscount", value); }
    }

    [Parameter]
    public bool pageable {
        get { return getterProp<bool>("pageable"); }
        set { setterProp("pageable", value); }
    }

    [Parameter]
    public bool rowdetails {
        get { return getterProp<bool>("rowdetails"); }
        set { setterProp("rowdetails", value); }
    }

    [Parameter]
    public object rowdetailstemplate {
        get { return getterProp<object>("rowdetailstemplate"); }
        set { setterProp("rowdetailstemplate", value); }
    }

    [Parameter]
    public object ready {
        get { return getterProp<object>("ready"); }
        set { setterProp("ready", value); }
    }

    [Parameter]
    public object rendered {
        get { return getterProp<object>("rendered"); }
        set { setterProp("rendered", value); }
    }

    [Parameter]
    public object renderstatusbar {
        get { return getterProp<object>("renderstatusbar"); }
        set { setterProp("renderstatusbar", value); }
    }

    [Parameter]
    public object rendertoolbar {
        get { return getterProp<object>("rendertoolbar"); }
        set { setterProp("rendertoolbar", value); }
    }

    [Parameter]
    public object rendergridrows {
        get { return getterProp<object>("rendergridrows"); }
        set { setterProp("rendergridrows", value); }
    }

    [Parameter]
    public bool sortable {
        get { return getterProp<bool>("sortable"); }
        set { setterProp("sortable", value); }
    }

    [Parameter]
    public string sortmode {
        get { return getterProp<string>("sortmode"); }
        set { setterProp("sortmode", value); }
    }

    [Parameter]
    public double selectedrowindex {
        get { return getterProp<double>("selectedrowindex"); }
        set { setterProp("selectedrowindex", value); }
    }

    [Parameter]
    public double[] selectedrowindexes {
        get { return getterProp<double[]>("selectedrowindexes"); }
        set { setterProp("selectedrowindexes", value); }
    }

    [Parameter]
    public object source {
        get { return getterProp<object>("source"); }
        set { setterProp("source", value); }
    }

    [Parameter]
    public object sorttogglestates {
        get { return getterProp<object>("sorttogglestates"); }
        set { setterProp("sorttogglestates", value); }
    }

    [Parameter]
    public double updatedelay {
        get { return getterProp<double>("updatedelay"); }
        set { setterProp("updatedelay", value); }
    }

    [Parameter]
    public bool virtualmode {
        get { return getterProp<bool>("virtualmode"); }
        set { setterProp("virtualmode", value); }
    }

    [Parameter]
    public double verticalscrollbarstep {
        get { return getterProp<double>("verticalscrollbarstep"); }
        set { setterProp("verticalscrollbarstep", value); }
    }

    [Parameter]
    public double verticalscrollbarlargestep {
        get { return getterProp<double>("verticalscrollbarlargestep"); }
        set { setterProp("verticalscrollbarlargestep", value); }
    }

    [Parameter]
    public object options { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onBindingcomplete { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onColumnresized { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onColumnreordered { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onColumnclick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCellclick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCelldoubleclick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCellselect { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCellunselect { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCellvaluechanged { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCellbeginedit { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onCellendedit { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onFilter { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onGroupschanged { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onGroupexpand { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onGroupcollapse { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onPagechanged { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onPagesizechanged { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRowclick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRowdoubleclick { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRowselect { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRowunselect { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRowexpand { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onRowcollapse { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onSort { get; set; }

    [Parameter]
    public Action onComponentReady { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "onComponentReady", "ChildContent", "onBindingcomplete", "onColumnresized", "onColumnreordered", "onColumnclick", "onCellclick", "onCelldoubleclick", "onCellselect", "onCellunselect", "onCellvaluechanged", "onCellbeginedit", "onCellendedit", "onFilter", "onGroupschanged", "onGroupexpand", "onGroupcollapse", "onPagechanged", "onPagesizechanged", "onRowclick", "onRowdoubleclick", "onRowselect", "onRowunselect", "onRowexpand", "onRowcollapse", "onSort" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" },
        { "dragEnd", "onDragEnd" },
        { "drag", "onDrag" },
        { "dragStart", "onDragStart" },
        { "targetDrop", "onTargetDrop" },
        { "dropTargetEnter", "onDropTargetEnter" },
        { "dropTargetLeave", "onDropTargetLeave" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public void autoresizecolumns(string type)
    {
        setterMethod("autoresizecolumns", type);
    }

    public void autoresizecolumn(string dataField, string type)
    {
        setterMethod("autoresizecolumn", dataField, type);
    }

    public void beginupdate()
    {
        setterMethod("beginupdate");
    }

    public void clear()
    {
        setterMethod("clear");
    }

    public void destroy()
    {
        setterMethod("destroy");
    }

    public void endupdate()
    {
        setterMethod("endupdate");
    }

    public void ensurerowvisible(double rowBoundIndex)
    {
        setterMethod("ensurerowvisible", rowBoundIndex);
    }

    public void focus()
    {
        setterMethod("focus");
    }

    public double getcolumnindex(string dataField)
    {
        return getterMethod<double>("getcolumnindex", dataField);
    }

    public object getcolumn(string dataField)
    {
        return getterMethod<object>("getcolumn", dataField);
    }

    public object getcolumnproperty(string dataField, string propertyName)
    {
        return getterMethod<object>("getcolumnproperty", dataField, propertyName);
    }

    public string getrowid(double rowBoundIndex)
    {
        return getterMethod<string>("getrowid", rowBoundIndex);
    }

    public object getrowdata(double rowBoundIndex)
    {
        return getterMethod<object>("getrowdata", rowBoundIndex);
    }

    public object getrowdatabyid(string rowID)
    {
        return getterMethod<object>("getrowdatabyid", rowID);
    }

    public double getrowboundindexbyid(string rowID)
    {
        return getterMethod<double>("getrowboundindexbyid", rowID);
    }

    public double getrowboundindex(double rowDisplayIndex)
    {
        return getterMethod<double>("getrowboundindex", rowDisplayIndex);
    }

    public object[] getrows()
    {
        return getterMethod<object[]>("getrows");
    }

    public object[] getboundrows()
    {
        return getterMethod<object[]>("getboundrows");
    }

    public object[] getdisplayrows()
    {
        return getterMethod<object[]>("getdisplayrows");
    }

    public object getdatainformation()
    {
        return getterMethod<object>("getdatainformation");
    }

    public object getsortinformation()
    {
        return getterMethod<object>("getsortinformation");
    }

    public object getpaginginformation()
    {
        return getterMethod<object>("getpaginginformation");
    }

    public void hidecolumn(string dataField)
    {
        setterMethod("hidecolumn", dataField);
    }

    public void hideloadelement()
    {
        setterMethod("hideloadelement");
    }

    public void hiderowdetails(double rowBoundIndex)
    {
        setterMethod("hiderowdetails", rowBoundIndex);
    }

    public bool iscolumnvisible(string dataField)
    {
        return getterMethod<bool>("iscolumnvisible", dataField);
    }

    public bool iscolumnpinned(string dataField)
    {
        return getterMethod<bool>("iscolumnpinned", dataField);
    }

    public void localizestrings(object localizationobject)
    {
        setterMethod("localizestrings", localizationobject);
    }

    public void pincolumn(string dataField)
    {
        setterMethod("pincolumn", dataField);
    }

    public void refreshdata()
    {
        setterMethod("refreshdata");
    }

    public void refresh()
    {
        setterMethod("refresh");
    }

    public void render()
    {
        setterMethod("render");
    }

    public void scrolloffset(double top, double left)
    {
        setterMethod("scrolloffset", top, left);
    }

    public object scrollposition()
    {
        return getterMethod<object>("scrollposition");
    }

    public void showloadelement()
    {
        setterMethod("showloadelement");
    }

    public void showrowdetails(double rowBoundIndex)
    {
        setterMethod("showrowdetails", rowBoundIndex);
    }

    public void setcolumnindex(string dataField, double index)
    {
        setterMethod("setcolumnindex", dataField, index);
    }

    public void setcolumnproperty(string dataField, object propertyName, object propertyValue)
    {
        setterMethod("setcolumnproperty", dataField, propertyName, propertyValue);
    }

    public void showcolumn(string dataField)
    {
        setterMethod("showcolumn", dataField);
    }

    public void unpincolumn(string dataField)
    {
        setterMethod("unpincolumn", dataField);
    }

    public void updatebounddata(object type)
    {
        setterMethod("updatebounddata", type);
    }

    public bool updating()
    {
        return getterMethod<bool>("updating");
    }

    public string getsortcolumn()
    {
        return getterMethod<string>("getsortcolumn");
    }

    public void removesort()
    {
        setterMethod("removesort");
    }

    public void sortby(string dataField, string sortOrder)
    {
        setterMethod("sortby", dataField, sortOrder);
    }

    public void addgroup(string dataField)
    {
        setterMethod("addgroup", dataField);
    }

    public void cleargroups()
    {
        setterMethod("cleargroups");
    }

    public void collapsegroup(object group)
    {
        setterMethod("collapsegroup", group);
    }

    public void collapseallgroups()
    {
        setterMethod("collapseallgroups");
    }

    public void expandallgroups()
    {
        setterMethod("expandallgroups");
    }

    public void expandgroup(object group)
    {
        setterMethod("expandgroup", group);
    }

    public double getrootgroupscount()
    {
        return getterMethod<double>("getrootgroupscount");
    }

    public object getgroup(double groupIndex)
    {
        return getterMethod<object>("getgroup", groupIndex);
    }

    public void insertgroup(double groupIndex, string dataField)
    {
        setterMethod("insertgroup", groupIndex, dataField);
    }

    public bool iscolumngroupable()
    {
        return getterMethod<bool>("iscolumngroupable");
    }

    public void removegroupat(double groupIndex)
    {
        setterMethod("removegroupat", groupIndex);
    }

    public void removegroup(string dataField)
    {
        setterMethod("removegroup", dataField);
    }

    public void addfilter(string dataField, object filterGroup, bool refreshGrid)
    {
        setterMethod("addfilter", dataField, filterGroup, refreshGrid);
    }

    public void applyfilters()
    {
        setterMethod("applyfilters");
    }

    public void clearfilters()
    {
        setterMethod("clearfilters");
    }

    public object getfilterinformation()
    {
        return getterMethod<object>("getfilterinformation");
    }

    public object getcolumnat(double index)
    {
        return getterMethod<object>("getcolumnat", index);
    }

    public void removefilter(string dataField, bool refreshGrid)
    {
        setterMethod("removefilter", dataField, refreshGrid);
    }

    public void refreshfilterrow()
    {
        setterMethod("refreshfilterrow");
    }

    public void gotopage(double pagenumber)
    {
        setterMethod("gotopage", pagenumber);
    }

    public void gotoprevpage()
    {
        setterMethod("gotoprevpage");
    }

    public void gotonextpage()
    {
        setterMethod("gotonextpage");
    }

    public void addrow(object rowIds, object data, object rowPosition)
    {
        setterMethod("addrow", rowIds, data, rowPosition);
    }

    public void begincelledit(double rowBoundIndex, string dataField)
    {
        setterMethod("begincelledit", rowBoundIndex, dataField);
    }

    public void beginrowedit(double rowBoundIndex)
    {
        setterMethod("beginrowedit", rowBoundIndex);
    }

    public void closemenu()
    {
        setterMethod("closemenu");
    }

    public void deleterow(object rowIds)
    {
        setterMethod("deleterow", rowIds);
    }

    public void endcelledit(double rowBoundIndex, string dataField, bool confirmChanges)
    {
        setterMethod("endcelledit", rowBoundIndex, dataField, confirmChanges);
    }

    public void endrowedit(double rowBoundIndex, bool confirmChanges)
    {
        setterMethod("endrowedit", rowBoundIndex, confirmChanges);
    }

    public object getcell(double rowBoundIndex, string datafield)
    {
        return getterMethod<object>("getcell", rowBoundIndex, datafield);
    }

    public object getcellatposition(double left, double top)
    {
        return getterMethod<object>("getcellatposition", left, top);
    }

    public string getcelltext(double rowBoundIndex, string dataField)
    {
        return getterMethod<string>("getcelltext", rowBoundIndex, dataField);
    }

    public string getcelltextbyid(string rowID, string dataField)
    {
        return getterMethod<string>("getcelltextbyid", rowID, dataField);
    }

    public object getcellvaluebyid(string rowID, string dataField)
    {
        return getterMethod<object>("getcellvaluebyid", rowID, dataField);
    }

    public object getcellvalue(double rowBoundIndex, string dataField)
    {
        return getterMethod<object>("getcellvalue", rowBoundIndex, dataField);
    }

    public bool isBindingCompleted()
    {
        return getterMethod<bool>("isBindingCompleted");
    }

    public void openmenu(string dataField)
    {
        setterMethod("openmenu", dataField);
    }

    public void setcellvalue(double rowBoundIndex, string dataField, object value)
    {
        setterMethod("setcellvalue", rowBoundIndex, dataField, value);
    }

    public void setcellvaluebyid(string rowID, string dataField, object value)
    {
        setterMethod("setcellvaluebyid", rowID, dataField, value);
    }

    public void showvalidationpopup(double rowBoundIndex, string dataField, string validationMessage)
    {
        setterMethod("showvalidationpopup", rowBoundIndex, dataField, validationMessage);
    }

    public void updaterow(object rowIds, object data)
    {
        setterMethod("updaterow", rowIds, data);
    }

    public void clearselection()
    {
        setterMethod("clearselection");
    }

    public double getselectedrowindex()
    {
        return getterMethod<double>("getselectedrowindex");
    }

    public double[] getselectedrowindexes()
    {
        return getterMethod<double[]>("getselectedrowindexes");
    }

    public object getselectedcell()
    {
        return getterMethod<object>("getselectedcell");
    }

    public object getselectedcells()
    {
        return getterMethod<object>("getselectedcells");
    }

    public void selectcell(double rowBoundIndex, string dataField)
    {
        setterMethod("selectcell", rowBoundIndex, dataField);
    }

    public void selectallrows()
    {
        setterMethod("selectallrows");
    }

    public void selectrow(double rowBoundIndex)
    {
        setterMethod("selectrow", rowBoundIndex);
    }

    public void unselectrow(double rowBoundIndex)
    {
        setterMethod("unselectrow", rowBoundIndex);
    }

    public void unselectcell(double rowBoundIndex, string dataField)
    {
        setterMethod("unselectcell", rowBoundIndex, dataField);
    }

    public string getcolumnaggregateddata(string dataField, object[] aggregates)
    {
        return getterMethod<string>("getcolumnaggregateddata", dataField, aggregates);
    }

    public void refreshaggregates()
    {
        setterMethod("refreshaggregates");
    }

    public void renderaggregates()
    {
        setterMethod("renderaggregates");
    }

    public object exportdata(string dataType, string fileName, bool exportHeader, double[] rows, bool exportHiddenColumns, string serverURL, string charSet)
    {
        return getterMethod<object>("exportdata", dataType, fileName, exportHeader, rows, exportHiddenColumns, serverURL, charSet);
    }

    public object getstate()
    {
        return getterMethod<object>("getstate");
    }

    public void loadstate(object stateobject)
    {
        setterMethod("loadstate", stateobject);
    }

    public object savestate()
    {
        return getterMethod<object>("savestate");
    }

    public IDictionary<string, object> getOptions()
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<IDictionary<string, object>>("jqxBlazor.getOptions", this);
    }

    public void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxGrid", initialOptions);

            Task.Delay(200).ContinueWith((action) =>
            {
                attachEvents();
                onComponentReady?.Invoke();
            }); 
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "bindingcomplete", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onBindingcomplete)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "columnresized", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onColumnresized)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "columnreordered", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onColumnreordered)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "columnclick", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onColumnclick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "cellclick", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onCellclick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "celldoubleclick", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onCelldoubleclick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "cellselect", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onCellselect)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "cellunselect", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onCellunselect)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "cellvaluechanged", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onCellvaluechanged)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "cellbeginedit", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onCellbeginedit)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "cellendedit", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onCellendedit)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "filter", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onFilter)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "groupschanged", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onGroupschanged)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "groupexpand", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onGroupexpand)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "groupcollapse", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onGroupcollapse)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "pagechanged", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onPagechanged)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "pagesizechanged", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onPagesizechanged)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rowclick", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onRowclick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rowdoubleclick", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onRowdoubleclick)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rowselect", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onRowselect)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rowunselect", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onRowunselect)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rowexpand", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onRowexpand)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "rowcollapse", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onRowcollapse)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "sort", "emitGridEvent", DotNetObjectReference.Create(new EventsHandler(onSort)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name, params object[] args)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name, args);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitGridEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }


#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
