#pragma checksum "C:\inetpub\wwwroot\blazor\library\jQWidgets.Blazor\Components\JqxKnob.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "506ef565f2b2d452688333d9b152d94e1675d15e"
// <auto-generated/>
#pragma warning disable 1591
namespace jQWidgets.Blazor.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\inetpub\wwwroot\blazor\library\jQWidgets.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 2 "C:\inetpub\wwwroot\blazor\library\jQWidgets.Blazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 1 "C:\inetpub\wwwroot\blazor\library\jQWidgets.Blazor\Components\JqxKnob.razor"
using System.Text.Json;

#line default
#line hidden
    public partial class JqxKnob : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenElement(0, "div");
            __builder.AddAttribute(1, "id", 
#line 4 "C:\inetpub\wwwroot\blazor\library\jQWidgets.Blazor\Components\JqxKnob.razor"
          componentID

#line default
#line hidden
            );
            __builder.AddContent(2, 
#line 4 "C:\inetpub\wwwroot\blazor\library\jQWidgets.Blazor\Components\JqxKnob.razor"
                        ChildContent

#line default
#line hidden
            );
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#line 6 "C:\inetpub\wwwroot\blazor\library\jQWidgets.Blazor\Components\JqxKnob.razor"
       

    [Parameter]
    public bool allowValueChangeOnClick {
        get { return getterProp<bool>("allowValueChangeOnClick"); }
        set { setterProp("allowValueChangeOnClick", value); }
    }

    [Parameter]
    public bool allowValueChangeOnDrag {
        get { return getterProp<bool>("allowValueChangeOnDrag"); }
        set { setterProp("allowValueChangeOnDrag", value); }
    }

    [Parameter]
    public bool allowValueChangeOnMouseWheel {
        get { return getterProp<bool>("allowValueChangeOnMouseWheel"); }
        set { setterProp("allowValueChangeOnMouseWheel", value); }
    }

    [Parameter]
    public object changing {
        get { return getterProp<object>("changing"); }
        set { setterProp("changing", value); }
    }

    [Parameter]
    public double dragEndAngle {
        get { return getterProp<double>("dragEndAngle"); }
        set { setterProp("dragEndAngle", value); }
    }

    [Parameter]
    public double dragStartAngle {
        get { return getterProp<double>("dragStartAngle"); }
        set { setterProp("dragStartAngle", value); }
    }

    [Parameter]
    public bool disabled {
        get { return getterProp<bool>("disabled"); }
        set { setterProp("disabled", value); }
    }

    [Parameter]
    public object dial {
        get { return getterProp<object>("dial"); }
        set { setterProp("dial", value); }
    }

    [Parameter]
    public double endAngle {
        get { return getterProp<double>("endAngle"); }
        set { setterProp("endAngle", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public object labels {
        get { return getterProp<object>("labels"); }
        set { setterProp("labels", value); }
    }

    [Parameter]
    public object marks {
        get { return getterProp<object>("marks"); }
        set { setterProp("marks", value); }
    }

    [Parameter]
    public double min {
        get { return getterProp<double>("min"); }
        set { setterProp("min", value); }
    }

    [Parameter]
    public double max {
        get { return getterProp<double>("max"); }
        set { setterProp("max", value); }
    }

    [Parameter]
    public object progressBar {
        get { return getterProp<object>("progressBar"); }
        set { setterProp("progressBar", value); }
    }

    [Parameter]
    public object pointer {
        get { return getterProp<object>("pointer"); }
        set { setterProp("pointer", value); }
    }

    [Parameter]
    public object pointerGrabAction {
        get { return getterProp<object>("pointerGrabAction"); }
        set { setterProp("pointerGrabAction", value); }
    }

    [Parameter]
    public object rotation {
        get { return getterProp<object>("rotation"); }
        set { setterProp("rotation", value); }
    }

    [Parameter]
    public double startAngle {
        get { return getterProp<double>("startAngle"); }
        set { setterProp("startAngle", value); }
    }

    [Parameter]
    public object spinner {
        get { return getterProp<object>("spinner"); }
        set { setterProp("spinner", value); }
    }

    [Parameter]
    public object styles {
        get { return getterProp<object>("styles"); }
        set { setterProp("styles", value); }
    }

    [Parameter]
    public object step {
        get { return getterProp<object>("step"); }
        set { setterProp("step", value); }
    }

    [Parameter]
    public bool snapToStep {
        get { return getterProp<bool>("snapToStep"); }
        set { setterProp("snapToStep", value); }
    }

    [Parameter]
    public object value {
        get { return getterProp<object>("value"); }
        set { setterProp("value", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public object options { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onChange { get; set; }

    [Parameter]
    public Action onComponentReady { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "onComponentReady", "ChildContent", "onChange" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" },
        { "dragEnd", "onDragEnd" },
        { "drag", "onDrag" },
        { "dragStart", "onDragStart" },
        { "targetDrop", "onTargetDrop" },
        { "dropTargetEnter", "onDropTargetEnter" },
        { "dropTargetLeave", "onDropTargetLeave" }
    };

    private bool shouldSetters;

    private string componentID;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public void destroy()
    {
        setterMethod("destroy");
    }

    public double val()
    {
        return getterMethod<double>("val");
    }

    public void val(object value)
    {
        setterMethod("val", value);
    }

    public IDictionary<string, object> getOptions()
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<IDictionary<string, object>>("jqxBlazor.getOptions", this);
    }

    public void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", componentID, options);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        componentID = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", componentID, "jqxKnob", initialOptions);

            Task.Delay(200).ContinueWith((action) =>
            {
                attachEvents();
                onComponentReady?.Invoke();
            }); 
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", componentID, "change", "emitKnobEvent", DotNetObjectReference.Create(new EventsHandler(onChange)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", componentID, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", componentID, name, value);
        }
    }

    private T getterMethod<T>(string name, params object[] args)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", componentID, name, args);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", componentID, name, args);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitKnobEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }


#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
