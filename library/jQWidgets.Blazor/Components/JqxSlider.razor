@using System.Text.Json;
@inject IJSRuntime JSRuntime;

<div id="@id">@ChildContent</div>

@code {

    [Parameter]
    public object buttonsPosition {
        get { return getterProp<object>("buttonsPosition"); }
        set { setterProp("buttonsPosition", value); }
    }

    [Parameter]
    public bool disabled {
        get { return getterProp<bool>("disabled"); }
        set { setterProp("disabled", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public object layout {
        get { return getterProp<object>("layout"); }
        set { setterProp("layout", value); }
    }

    [Parameter]
    public object mode {
        get { return getterProp<object>("mode"); }
        set { setterProp("mode", value); }
    }

    [Parameter]
    public double minorTicksFrequency {
        get { return getterProp<double>("minorTicksFrequency"); }
        set { setterProp("minorTicksFrequency", value); }
    }

    [Parameter]
    public double minorTickSize {
        get { return getterProp<double>("minorTickSize"); }
        set { setterProp("minorTickSize", value); }
    }

    [Parameter]
    public double max {
        get { return getterProp<double>("max"); }
        set { setterProp("max", value); }
    }

    [Parameter]
    public double min {
        get { return getterProp<double>("min"); }
        set { setterProp("min", value); }
    }

    [Parameter]
    public string orientation {
        get { return getterProp<string>("orientation"); }
        set { setterProp("orientation", value); }
    }

    [Parameter]
    public bool rangeSlider {
        get { return getterProp<bool>("rangeSlider"); }
        set { setterProp("rangeSlider", value); }
    }

    [Parameter]
    public bool rtl {
        get { return getterProp<bool>("rtl"); }
        set { setterProp("rtl", value); }
    }

    [Parameter]
    public double step {
        get { return getterProp<double>("step"); }
        set { setterProp("step", value); }
    }

    [Parameter]
    public bool showTicks {
        get { return getterProp<bool>("showTicks"); }
        set { setterProp("showTicks", value); }
    }

    [Parameter]
    public bool showMinorTicks {
        get { return getterProp<bool>("showMinorTicks"); }
        set { setterProp("showMinorTicks", value); }
    }

    [Parameter]
    public bool showTickLabels {
        get { return getterProp<bool>("showTickLabels"); }
        set { setterProp("showTickLabels", value); }
    }

    [Parameter]
    public bool showButtons {
        get { return getterProp<bool>("showButtons"); }
        set { setterProp("showButtons", value); }
    }

    [Parameter]
    public bool showRange {
        get { return getterProp<bool>("showRange"); }
        set { setterProp("showRange", value); }
    }

    [Parameter]
    public object template {
        get { return getterProp<object>("template"); }
        set { setterProp("template", value); }
    }

    [Parameter]
    public string theme {
        get { return getterProp<string>("theme"); }
        set { setterProp("theme", value); }
    }

    [Parameter]
    public object ticksPosition {
        get { return getterProp<object>("ticksPosition"); }
        set { setterProp("ticksPosition", value); }
    }

    [Parameter]
    public double ticksFrequency {
        get { return getterProp<double>("ticksFrequency"); }
        set { setterProp("ticksFrequency", value); }
    }

    [Parameter]
    public double tickSize {
        get { return getterProp<double>("tickSize"); }
        set { setterProp("tickSize", value); }
    }

    [Parameter]
    public object tickLabelFormatFunction {
        get { return getterProp<object>("tickLabelFormatFunction"); }
        set { setterProp("tickLabelFormatFunction", value); }
    }

    [Parameter]
    public bool tooltip {
        get { return getterProp<bool>("tooltip"); }
        set { setterProp("tooltip", value); }
    }

    [Parameter]
    public double tooltipHideDelay {
        get { return getterProp<double>("tooltipHideDelay"); }
        set { setterProp("tooltipHideDelay", value); }
    }

    [Parameter]
    public object tooltipPosition {
        get { return getterProp<object>("tooltipPosition"); }
        set { setterProp("tooltipPosition", value); }
    }

    [Parameter]
    public object tooltipFormatFunction {
        get { return getterProp<object>("tooltipFormatFunction"); }
        set { setterProp("tooltipFormatFunction", value); }
    }

    [Parameter]
    public object value {
        get { return getterProp<object>("value"); }
        set { setterProp("value", value); }
    }

    [Parameter]
    public double[] values {
        get { return getterProp<double[]>("values"); }
        set { setterProp("values", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public object options { get; set; }

    [Parameter]
    public string id { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onChange { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onSlide { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onSlideStart { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onSlideEnd { get; set; }

    [Parameter]
    public Action onComponentReady { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "onComponentReady", "ChildContent", "onChange", "onSlide", "onSlideStart", "onSlideEnd" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" },
        { "dragEnd", "onDragEnd" },
        { "drag", "onDrag" },
        { "dragStart", "onDragStart" },
        { "targetDrop", "onTargetDrop" },
        { "dropTargetEnter", "onDropTargetEnter" },
        { "dropTargetLeave", "onDropTargetLeave" }
    };

    private bool shouldSetters;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public void destroy()
    {
        setterMethod("destroy");
    }

    public void decrementValue()
    {
        setterMethod("decrementValue");
    }

    public void disable()
    {
        setterMethod("disable");
    }

    public void enable()
    {
        setterMethod("enable");
    }

    public void focus()
    {
        setterMethod("focus");
    }

    public double getValue()
    {
        return getterMethod<double>("getValue");
    }

    public void incrementValue()
    {
        setterMethod("incrementValue");
    }

    public void setValue(object index)
    {
        setterMethod("setValue", index);
    }

    public string val()
    {
        return getterMethod<string>("val");
    }

    public void val(string value)
    {
        setterMethod("val", value);
    }

    public IDictionary<string, object> getOptions()
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<IDictionary<string, object>>("jqxBlazor.getOptions", this);
    }

    public void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", id, options);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        if (id == null)
        {
            id = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", id, "jqxSlider", initialOptions);

            Task.Delay(200).ContinueWith((action) =>
            {
                attachEvents();
                onComponentReady?.Invoke();
            }); 
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", id, "change", "emitSliderEvent", DotNetObjectReference.Create(new EventsHandler(onChange)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", id, "slide", "emitSliderEvent", DotNetObjectReference.Create(new EventsHandler(onSlide)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", id, "slideStart", "emitSliderEvent", DotNetObjectReference.Create(new EventsHandler(onSlideStart)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", id, "slideEnd", "emitSliderEvent", DotNetObjectReference.Create(new EventsHandler(onSlideEnd)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", id, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", id, name, value);
        }
    }

    private T getterMethod<T>(string name, params object[] args)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", id, name, args);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", id, name, args);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitSliderEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }

}
