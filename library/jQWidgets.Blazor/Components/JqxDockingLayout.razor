@using System.Text.Json;
@inject IJSRuntime JSRuntime;

<div id="@id">@ChildContent</div>

@code {

    [Parameter]
    public bool contextMenu {
        get { return getterProp<bool>("contextMenu"); }
        set { setterProp("contextMenu", value); }
    }

    [Parameter]
    public object height {
        get { return getterProp<object>("height"); }
        set { setterProp("height", value); }
    }

    [Parameter]
    public object layout {
        get { return getterProp<object>("layout"); }
        set { setterProp("layout", value); }
    }

    [Parameter]
    public object minGroupHeight {
        get { return getterProp<object>("minGroupHeight"); }
        set { setterProp("minGroupHeight", value); }
    }

    [Parameter]
    public object minGroupWidth {
        get { return getterProp<object>("minGroupWidth"); }
        set { setterProp("minGroupWidth", value); }
    }

    [Parameter]
    public bool resizable {
        get { return getterProp<bool>("resizable"); }
        set { setterProp("resizable", value); }
    }

    [Parameter]
    public bool rtl {
        get { return getterProp<bool>("rtl"); }
        set { setterProp("rtl", value); }
    }

    [Parameter]
    public string theme {
        get { return getterProp<string>("theme"); }
        set { setterProp("theme", value); }
    }

    [Parameter]
    public object width {
        get { return getterProp<object>("width"); }
        set { setterProp("width", value); }
    }

    [Parameter]
    public object options { get; set; }

    [Parameter]
    public string id { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onDock { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onFloatGroupClosed { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onFloat { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onPin { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onResize { get; set; }

    [Parameter]
    public Action<IDictionary<string, object>> onUnpin { get; set; }

    [Parameter]
    public Action onComponentReady { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string[] paramsToBlock = { "onComponentReady", "ChildContent", "onDock", "onFloatGroupClosed", "onFloat", "onPin", "onResize", "onUnpin" };

    private IDictionary<string, string> paramsToChange = new Dictionary<string, string>
    {
        { "isChecked", "checked" },
        { "isReadonly", "readonly" },
        { "isDecimal", "decimal" },
        { "dragEnd", "onDragEnd" },
        { "drag", "onDrag" },
        { "dragStart", "onDragStart" },
        { "targetDrop", "onTargetDrop" },
        { "dropTargetEnter", "onDropTargetEnter" },
        { "dropTargetLeave", "onDropTargetLeave" }
    };

    private bool shouldSetters;

    private IDictionary<string, object> initialOptions = new Dictionary<string, object>();

    public void addFloatGroup(object width, object height, object position, string panelType, string title, string content, object initContent)
    {
        setterMethod("addFloatGroup", width, height, position, panelType, title, content, initContent);
    }

    public void destroy()
    {
        setterMethod("destroy");
    }

    public void loadLayout(object layout)
    {
        setterMethod("loadLayout", layout);
    }

    public void refresh()
    {
        setterMethod("refresh");
    }

    public void render()
    {
        setterMethod("render");
    }

    public object saveLayout()
    {
        return getterMethod<object>("saveLayout");
    }

    public IDictionary<string, object> getOptions()
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<IDictionary<string, object>>("jqxBlazor.getOptions", this);
    }

    public void setOptions(object options)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.setOptions", id, options);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        foreach(var parameter in parameters.ToDictionary())
        {
            var key = parameter.Key;
            var value = parameter.Value;

            if (!paramsToBlock.Contains(key))
            {
                if (paramsToChange.ContainsKey(key))
                {
                    key = paramsToChange[key];
                }

                initialOptions[key] = value;
            }
        }

        shouldSetters = true;
    }

    protected override void OnInitialized()
    {
        if (id == null)
        {
            id = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("jqxBlazor.generateID");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.createComponent", id, "jqxDockingLayout", initialOptions);

            Task.Delay(200).ContinueWith((action) =>
            {
                attachEvents();
                onComponentReady?.Invoke();
            }); 
        }
    }

    private void attachEvents()
    {
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", id, "dock", "emitDockingLayoutEvent", DotNetObjectReference.Create(new EventsHandler(onDock)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", id, "floatGroupClosed", "emitDockingLayoutEvent", DotNetObjectReference.Create(new EventsHandler(onFloatGroupClosed)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", id, "float", "emitDockingLayoutEvent", DotNetObjectReference.Create(new EventsHandler(onFloat)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", id, "pin", "emitDockingLayoutEvent", DotNetObjectReference.Create(new EventsHandler(onPin)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", id, "resize", "emitDockingLayoutEvent", DotNetObjectReference.Create(new EventsHandler(onResize)));
        ((IJSInProcessRuntime)JSRuntime).Invoke<object>("jqxBlazor.manageEvents", id, "unpin", "emitDockingLayoutEvent", DotNetObjectReference.Create(new EventsHandler(onUnpin)));
    }

    private T getterProp<T>(string name)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageProps", id, name);
    }

    private void setterProp(string name, object value)
    {
        if (shouldSetters)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageProps", id, name, value);
        }
    }

    private T getterMethod<T>(string name, params object[] args)
    {
        shouldSetters = false;
        return ((IJSInProcessRuntime)JSRuntime).Invoke<T>("jqxBlazor.manageMethods", id, name, args);
    }

    private void setterMethod(string name, params object[] args)
    {
        shouldSetters = false;
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("jqxBlazor.manageMethods", id, name, args);
    }

    public class EventsHandler
    {
        private Action<IDictionary<string, object>> componentEvent;

        public EventsHandler(Action<IDictionary<string, object>> e)
        {
            componentEvent = e;
        }

        [JSInvokable]
        public void emitDockingLayoutEvent(object e)
        {
            if (componentEvent != null)
            {
                var eventAsJson = JsonSerializer.Serialize(e);
                var eventAsDictionary = JsonSerializer.Deserialize<IDictionary<string, object>>(eventAsJson);

                componentEvent.Invoke(eventAsDictionary);
            }
        }
    }

}
